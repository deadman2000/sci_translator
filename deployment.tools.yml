# Mongo Express
apiVersion: v1
kind: Pod
metadata:
  namespace: translate
  name: mongo-express
  labels:
    app: mongo-express
spec:
  containers:
  - name: mongo-express
    image: mongo-express
    ports:
    - containerPort: 8081
    env:
    - name: ME_CONFIG_BASICAUTH_USERNAME
      valueFrom:
        secretKeyRef:
          name: mongo
          key: username
    - name: ME_CONFIG_BASICAUTH_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mongo
          key: password
    - name: ME_CONFIG_MONGODB_SERVER
      value: "mongodb"
    - name: ME_CONFIG_MONGODB_ADMINUSERNAME
      valueFrom:
        secretKeyRef:
          name: mongo
          key: username
    - name: ME_CONFIG_MONGODB_ADMINPASSWORD
      valueFrom:
        secretKeyRef:
          name: mongo
          key: password
---

kind: Service
apiVersion: v1
metadata:
  namespace: translate
  name: mongo-express-service
spec:
  ports:
  - port: 8081
  selector:
    app: mongo-express
---

apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  namespace: translate
  name: mongo-express
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`mongotr.ml.ask-glonass.ru`)
    kind: Rule
    services:
    - name: mongo-express-service
      port: 8081
  tls:
    certResolver: default


# elastichq
apiVersion: v1
kind: Pod
metadata:
  namespace: translate
  name: elastichq
  labels:
    app: elastichq
spec:
  containers:
  - name: elastichq
    image: elastichq/elasticsearch-hq
    ports:
    - containerPort: 5000
---

kind: Service
apiVersion: v1
metadata:
  namespace: translate
  name: elastichq-service
spec:
  ports:
  - port: 5000
  selector:
    app: elastichq
---

apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  namespace: translate
  name: elastichq-route
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`elastictr.ml.ask-glonass.ru`)
    kind: Rule
    services:
    - name: elastichq-service
      port: 5000
  tls:
    certResolver: default

