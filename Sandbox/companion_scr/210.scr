(script 210)

(string
    string_392c "Willows"
    string_3934 "rm210"
    string_393a "egoEnters"
    string_3944 "disarm"
    string_394b "rearm"
    string_3951 "weaponsCheck"
    string_395e "groveClosed"
    string_396a "bow"
    string_396e "quiver"
    string_3975 "walkOut"
    string_397d "carryIn"
    string_3985 "waitToStand"
    string_3991 "waitToDie"
    string_399b "marian"
    string_39a2 "giveEmerald"
    string_39ae "thereSheGoes"
    string_39bb "sex"
    string_39bf "rHead"
    string_39c5 "mHead"
    string_39cb "sit"
    string_39cf "heal"
    string_39d4 "dying"
    string_39da "unite"
    string_39e0 "giveComb"
    string_39e9 "R"
    string_39eb "O"
    string_39ed "B"
    string_39ef "I"
    string_39f1 "N"
    string_39f3 ""
    string_39f4 "giveScroll"
    string_3a00 "scrollCloseUp"
    string_3a0e "cursMan"
    string_3a16 "giveFScroll"
    string_3a22 "tryBlowinIt"
    string_3a2e "egoActions"
    string_3a39 "waitForIt"
    string_3a43 "willowTalk"
    string_3a4e "spillBeans"
    string_3a59 "rustleSound"
    string_3a65 "joinSound"
    string_3a6f "letterSound"
    string_3a7b "willows"
    string_3a83 "ferns"
    string_3a89 ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
    local5 = $0000
    local6 = $0000
    local7 = $0000
    local8 = $0000
    local9 = $0000
    local10 = $0000
    local11 = $0000
    local12 = $0000
    local13 = $0000
    local14 = $0000
    local15 = $0000
    local16 = $0000
    local17 = $0000
    local18 = $0000
    local19 = $04ba
    local20 = $0000
    local21 = $0001
    local22 = $0000
    local23 = $04ba
    local24 = $0010
    local25 = $0001
    local26 = $0002
    local27 = $0000
    local28 = $04ba
    local29 = $0012
    local30 = $0001
    local31 = $0000
    local32 = $04ba
    local33 = $0013
    local34 = $0001
    local35 = $0002
    local36 = $0001
    local37 = $0001
    local38 = $0002
    local39 = $0001
    local40 = $0002
    local41 = $0001
    local42 = $0002
    local43 = $0001
    local44 = $0002
    local45 = $0000
    local46 = $04ba
    local47 = $001e
    local48 = $0001
    local49 = $0000
    local50 = $04ba
    local51 = $001f
    local52 = $0001
    local53 = $0002
    local54 = $0002
    local55 = $0000
    local56 = $04ba
    local57 = $0022
    local58 = $0001
    local59 = $0000
    local60 = $04ba
    local61 = $0023
    local62 = $0001
    local63 = $0002
    local64 = $0001
    local65 = $0002
    local66 = $0000
    local67 = $04ba
    local68 = $0027
    local69 = $0001
    local70 = $0002
    local71 = $0002
    local72 = $0001
    local73 = $0002
    local74 = $0000
    local75 = $04ba
    local76 = $002c
    local77 = $0001
    local78 = $0000
    local79 = $04ba
    local80 = $002f
    local81 = $0001
    local82 = $0000
    local83 = $04ba
    local84 = $0030
    local85 = $0002
    local86 = $0000
    local87 = $04ba
    local88 = $0031
    local89 = $0001
    local90 = $0000
    local91 = $04ba
    local92 = $0032
    local93 = $0001
    local94 = $0000
    local95 = $04ba
    local96 = $0033
    local97 = $0001
    local98 = $0002
    local99 = $0001
    local100 = $0002
    local101 = $0002
    local102 = $0001
    local103 = $0001
    local104 = $0001
    local105 = $0001
    local106 = $0000
    local107 = $04ba
    local108 = $003c
    local109 = $0002
    local110 = $0001
    local111 = $0001
    local112 = $0001
    local113 = $0002
    local114 = $0002
    local115 = $0001
    local116 = $0001
    local117 = $0002
    local118 = $0001
    local119 = $0000
    local120 = $04ba
    local121 = $0046
    local122 = $0001
    local123 = $0000
    local124 = $04ba
    local125 = $0047
    local126 = $0001
    local127 = $0000
    local128 = $04ba
    local129 = $0048
    local130 = $0001
    local131 = $0002
    local132 = $0001
    local133 = $0001
    local134 = $0002
    local135 = $0002
    local136 = $0001
    local137 = $0002
    local138 = $0002
    local139 = $0001
    local140 = $0001
    local141 = $0001
    local142 = $0000
    local143 = $04ba
    local144 = $0054
    local145 = $0001
    local146 = $0000
    local147 = $04ba
    local148 = $00f4
    local149 = $0001
    local150 = $0002
    local151 = $0001
    local152 = $0001
    local153 = $0000
    local154 = $04ba
    local155 = $0065
    local156 = $0001
    local157 = $0000
    local158 = $04ba
    local159 = $0063
    local160 = $0001
    local161 = $0001
    local162 = $0000
    local163 = $04ba
    local164 = $005a
    local165 = $0002
    local166 = $0001
    local167 = $0000
    local168 = $04ba
    local169 = $005c
    local170 = $0002
    local171 = $0001
    local172 = $0002
    local173 = $0001
    local174 = $0000
    local175 = $04ba
    local176 = $0061
    local177 = $0001
    local178 = $0001
    local179 = $0000
    local180 = $04ba
    local181 = $0066
    local182 = $0002
    local183 = $0001
    local184 = $0001
    local185 = $0002
    local186 = $0001
    local187 = $0002
    local188 = $0001
    local189 = $0002
    local190 = $0002
    local191 = $0002
    local192 = $0002
    local193 = $0001
    local194 = $0002
    local195 = $0002
    local196 = $0001
    local197 = $0002
    local198 = $0001
    local199 = $0002
    local200 = $0001
    local201 = $0002
    local202 = $0001
    local203 = $0002
    local204 = $0002
    local205 = $0000
    local206 = $04ba
    local207 = $007d
    local208 = $0002
    local209 = $0000
    local210 = $04ba
    local211 = $007e
    local212 = $0001
    local213 = $0000
    local214 = $04ba
    local215 = $007f
    local216 = $0002
    local217 = $0002
    local218 = $0000
    local219 = $04ba
    local220 = $0081
    local221 = $0001
    local222 = $0001
    local223 = $0000
    local224 = $04ba
    local225 = $0083
    local226 = $0002
    local227 = $0001
    local228 = $0001
    local229 = $0000
    local230 = $04ba
    local231 = $0086
    local232 = $0001
    local233 = $0002
    local234 = $0001
    local235 = $0001
    local236 = $0001
    local237 = $0002
    local238 = $0001
    local239 = $0001
    local240 = $0001
    local241 = $0000
    local242 = $04ba
    local243 = $008f
    local244 = $0002
    local245 = $0001
    local246 = $0001
    local247 = $0002
    local248 = $0002
    local249 = $0001
    local250 = $0001
    local251 = $0002
    local252 = $0001
    local253 = $0002
    local254 = $0001
    local255 = $0000
    local256 = $04ba
    local257 = $009a
    local258 = $0002
    local259 = $0002
    local260 = $0000
    local261 = $04ba
    local262 = $009d
    local263 = $0001
    local264 = $0001
    local265 = $0000
    local266 = $04ba
    local267 = $009f
    local268 = $0002
    local269 = $0001
    local270 = $0002
    local271 = $0001
    local272 = $0002
    local273 = $0001
    local274 = $0000
    local275 = $04ba
    local276 = $00a5
    local277 = $0002
    local278 = $0001
    local279 = $0001
    local280 = $0002
    local281 = $0000
    local282 = $04ba
    local283 = $00b3
    local284 = $0001
    local285 = $0002
    local286 = $0000
    local287 = $04ba
    local288 = $00b5
    local289 = $0002
    local290 = $0001
    local291 = $0002
    local292 = $0002
    local293 = $0001
    local294 = $0001
    local295 = $0002
    local296 = $0000
    local297 = $04ba
    local298 = $00bc
    local299 = $0001
    local300 = $0000
    local301 = $04ba
    local302 = $00ac
    local303 = $0002
    local304 = $0001
    local305 = $0002
    local306 = $0002
    local307 = $0001
    local308 = $0002
    local309 = $0000
    local310 = $04ba
    local311 = $00bd
    local312 = $0002
    local313 = $0002
    local314 = $0001
    local315 = $0001
    local316 = $0002
    local317 = $0002
    local318 = $0000
    local319 = $04ba
    local320 = $00c3
    local321 = $0001
    local322 = $0000
    local323 = $04ba
    local324 = $00c4
    local325 = $0002
    local326 = $0002
    local327 = $0001
    local328 = $0002
    local329 = $0000
    local330 = $04ba
    local331 = $00c8
    local332 = $0002
    local333 = $0001
    local334 = $0002
    local335 = $0001
    local336 = $0002
    local337 = $0000
    local338 = $04ba
    local339 = $00cd
    local340 = $0001
    local341 = $0000
    local342 = $04ba
    local343 = $00ce
    local344 = $0001
    local345 = $0000
    local346 = $04ba
    local347 = $00cf
    local348 = $0002
    local349 = $0001
    local350 = $0000
    local351 = $04ba
    local352 = $00d1
    local353 = $0001
    local354 = $0002
    local355 = $0000
    local356 = $04ba
    local357 = $00d3
    local358 = $0002
    local359 = $0001
    local360 = $0000
    local361 = $04ba
    local362 = $00d5
    local363 = $0002
    local364 = $0001
    local365 = $0000
    local366 = $04ba
    local367 = $00d7
    local368 = $0002
    local369 = $0001
    local370 = $0002
    local371 = $0000
    local372 = $04ba
    local373 = $00db
    local374 = $0002
    local375 = $0001
    local376 = $0002
    local377 = $0001
    local378 = $0002
    local379 = $0001
    local380 = $0002
    local381 = $0001
    local382 = $0002
    local383 = $0001
    local384 = $0002
    local385 = $0000
    local386 = $04ba
    local387 = $00e6
    local388 = $0002
    local389 = $0001
    local390 = $0002
    local391 = $0000
    local392 = $04ba
    local393 = $00e9
    local394 = $0002
    local395 = $0001
    local396 = $0001
    local397 = $0002
    local398 = $0000
    local399 = $04ba
    local400 = $00ee
    local401 = $0001
    local402 = $0000
    local403 = $04ba
    local404 = $00ef
    local405 = $0001
    local406 = $0000
    local407 = $04ba
    local408 = $002d
    local409 = $0001
    local410 = $0000
    local411 = $04ba
    local412 = $002e
    local413 = $0001
    local414 = $0000
    local415 = $04ba
    local416 = $0003
    local417 = $0001
    local418 = $0000
    local419 = $04ba
    local420 = $00f2
    local421 = $0001
    local422 = $0001
    local423 = $0000
    local424 = $0000
    local425 = $0000
    local426 = $0000
    local427 = $0000
    local428 = $0000
    local429 = $0000
    local430 = $0000
    local431 = $0000
    local432 = $0000
    local433 = $04bb
    local434 = $0000
    local435 = $0001
    local436 = $0000
    local437 = $04bb
    local438 = $0001
    local439 = $0001
    local440 = $0000
    local441 = $04bb
    local442 = $0002
    local443 = $0001
    local444 = $0000
    local445 = $04bb
    local446 = $0003
    local447 = $0001
    local448 = $0002
    local449 = $0001
    local450 = $0002
    local451 = $0000
    local452 = $04bb
    local453 = $0007
    local454 = $0001
    local455 = $0001
    local456 = $0000
    local457 = $04bb
    local458 = $0009
    local459 = $0001
    local460 = $0000
    local461 = $04bb
    local462 = $000a
    local463 = $0001
    local464 = $0002
    local465 = $0001
    local466 = $0000
    local467 = $04bb
    local468 = $000d
    local469 = $0001
    local470 = $0002
    local471 = $0001
    local472 = $0000
    local473 = $04bb
    local474 = $0010
    local475 = $0001
    local476 = $0002
    local477 = $0001
    local478 = $0001
    local479 = $0000
    local480 = $04bb
    local481 = $0014
    local482 = $0001
    local483 = $0000
    local484 = $04bb
    local485 = $0015
    local486 = $0001
    local487 = $0000
    local488 = $04bb
    local489 = $0016
    local490 = $0001
    local491 = $0000
    local492 = $04bb
    local493 = $0017
    local494 = $0002
    local495 = $0001
    local496 = $0001
    local497 = $0000
    local498 = $0525
    local499 = $000c
    local500 = $0001
    local501 = $0000
    local502 = $04ba
    local503 = $00a9
    local504 = $0001
    local505 = $0000
    local506 = $ffff
    local507 = $0000
    local508 = $0000
    local509 = $ffff
    local510 = $392c
    local511 = $0005
)

// 019e
(instance publicrm210 of Rm
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $d2
        style $64
        horizon $0
        controls $0
        north $0
        east $dc
        south $dc
        west $dc
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 6b            pushi 6b // $6b init
  0010:76               push0 
  0011:57 43 04         super Rm 4 

  0014:89 0c              lsg  
  0016:34 00dc            ldi dc 
  0019:1c                 ne? 
  001a:30 0004            bnt code_0021 
  001d:35 01              ldi 1 
  001f:a1 6c              sag  

        code_0021
  0021:89 82              lsg  
  0023:35 04              ldi 4 
  0025:1a                 eq? 
  0026:30 0012            bnt code_003b 
  0029:89 7e              lsg  
  002b:35 00              ldi 0 
  002d:1a                 eq? 
  002e:30 000a            bnt code_003b 
  0031:38 00d5          pushi d5 // $d5 has
  0034:78               push1 
  0035:39 0f            pushi f // $f lsBottom
  0037:81 00              lag  
  0039:4a 06             send 6 


        code_003b
  003b:2e 0024             bt code_0062 
  003e:89 82              lsg  
  0040:35 07              ldi 7 
  0042:1a                 eq? 
  0043:30 0070            bnt code_00b6 
  0046:89 7e              lsg  
  0048:35 00              ldi 0 
  004a:1a                 eq? 
  004b:30 0068            bnt code_00b6 
  004e:38 00d5          pushi d5 // $d5 has
  0051:78               push1 
  0052:39 11            pushi 11 // $11 signal
  0054:81 00              lag  
  0056:4a 06             send 6 

  0058:30 005b            bnt code_00b6 
  005b:78               push1 
  005c:39 22            pushi 22 // $22 type
  005e:45 05 02         callb procedure_0005 2 //  

  0061:18                 not 

        code_0062
  0062:30 0051            bnt code_00b6 
  0065:39 6b            pushi 6b // $6b init
  0067:76               push0 
  0068:72 164e          lofsa $164e // marian
  006b:4a 04             send 4 

  006d:38 0176          pushi 176 // $176 addObstacle
  0070:78               push1 
  0071:39 22            pushi 22 // $22 type
  0073:78               push1 
  0074:7a               push2 
  0075:39 6b            pushi 6b // $6b init
  0077:39 08            pushi 8 // $8 underBits
  0079:39 74            pushi 74 // $74 eachElementDo
  007b:38 0092          pushi 92 // $92 cycleCnt
  007e:38 0099          pushi 99 // $99 timeLeft
  0081:38 0091          pushi 91 // $91 globalize
  0084:38 0099          pushi 99 // $99 timeLeft
  0087:38 0098          pushi 98 // $98 set60ths
  008a:39 74            pushi 74 // $74 eachElementDo
  008c:38 0098          pushi 98 // $98 set60ths
  008f:39 72            pushi 72 // $72 yourself
  0091:76               push0 
  0092:39 6a            pushi 6a // $6a new
  0094:76               push0 
  0095:51 23            class Polygon 
  0097:4a 04             send 4 

  0099:4a 1e             send 1e 

  009b:a2 01b0            sal local432 
  009e:36                push 
  009f:81 02              lag  
  00a1:4a 06             send 6 

  00a3:38 008e          pushi 8e // $8e setScript
  00a6:39 03            pushi 3 // $3 y
  00a8:72 063a          lofsa $063a // egoEnters
  00ab:36                push 
  00ac:76               push0 
  00ad:89 6c              lsg  
  00af:81 02              lag  
  00b1:4a 0a             send a 

  00b3:32 0028            jmp code_00de 

        code_00b6
  00b6:89 0c              lsg  
  00b8:34 00b3            ldi b3 
  00bb:1a                 eq? 
  00bc:30 000f            bnt code_00ce 
  00bf:38 008e          pushi 8e // $8e setScript
  00c2:78               push1 
  00c3:72 0fc4          lofsa $0fc4 // carryIn
  00c6:36                push 
  00c7:81 02              lag  
  00c9:4a 06             send 6 

  00cb:32 0010            jmp code_00de 

        code_00ce
  00ce:38 008e          pushi 8e // $8e setScript
  00d1:39 03            pushi 3 // $3 y
  00d3:72 063a          lofsa $063a // egoEnters
  00d6:36                push 
  00d7:76               push0 
  00d8:89 6c              lsg  
  00da:81 02              lag  
  00dc:4a 0a             send a 


        code_00de
  00de:38 010b          pushi 10b // $10b actions
  00e1:78               push1 
  00e2:72 3454          lofsa $3454 // egoActions
  00e5:36                push 
  00e6:81 00              lag  
  00e8:4a 06             send 6 

  00ea:39 2b            pushi 2b // $2b number
  00ec:78               push1 
  00ed:38 0389          pushi 389 // $389 sel_905
  00f0:39 2a            pushi 2a // $2a play
  00f2:76               push0 
  00f3:81 64              lag  
  00f5:4a 0a             send a 

  00f7:39 2b            pushi 2b // $2b number
  00f9:78               push1 
  00fa:89 82              lsg  
  00fc:35 0a              ldi a 
  00fe:1c                 ne? 
  00ff:30 0006            bnt code_0108 
  0102:34 00d2            ldi d2 
  0105:32 0003            jmp code_010b 

        code_0108
  0108:34 00d9            ldi d9 

        code_010b
  010b:36                push 
  010c:39 06            pushi 6 // $6 loop
  010e:78               push1 
  010f:39 ff            pushi ff // $ff syncNum
  0111:39 2a            pushi 2a // $2a play
  0113:76               push0 
  0114:81 71              lag  
  0116:4a 10             send 10 

  0118:39 6b            pushi 6b // $6b init
  011a:76               push0 
  011b:72 3870          lofsa $3870 // willows
  011e:4a 04             send 4 

  0120:39 6b            pushi 6b // $6b init
  0122:76               push0 
  0123:72 38f4          lofsa $38f4 // ferns
  0126:4a 04             send 4 

  0128:48                 ret 
    )

    (method (doit) // method_0129
  0129:63 08             pToa script 
  012b:30 0008            bnt code_0136 
  012e:39 3c            pushi 3c // $3c doit
  0130:76               push0 
  0131:4a 04             send 4 

  0133:32 003a            jmp code_0170 

        code_0136
  0136:38 0146          pushi 146 // $146 edgeHit
  0139:76               push0 
  013a:81 00              lag  
  013c:4a 04             send 4 

  013e:30 0024            bnt code_0165 
  0141:38 0146          pushi 146 // $146 edgeHit
  0144:76               push0 
  0145:81 00              lag  
  0147:4a 04             send 4 

  0149:a1 6c              sag  
  014b:38 008e          pushi 8e // $8e setScript
  014e:39 03            pushi 3 // $3 y
  0150:72 0dda          lofsa $0dda // walkOut
  0153:36                push 
  0154:76               push0 
  0155:38 018f          pushi 18f // $18f edgeToRoom
  0158:78               push1 
  0159:89 6c              lsg  
  015b:54 06             self 6 

  015d:36                push 
  015e:81 02              lag  
  0160:4a 0a             send a 

  0162:32 000b            jmp code_0170 

        code_0165
  0165:82 01af            lal local431 
  0168:30 0005            bnt code_0170 
  016b:39 3c            pushi 3c // $3c doit
  016d:76               push0 
  016e:4a 04             send 4 


        code_0170
  0170:48                 ret 
    )

    (method (dispose) // method_0171
  0171:38 009f          pushi 9f // $9f fade
  0174:39 04            pushi 4 // $4 x
  0176:76               push0 
  0177:39 14            pushi 14 // $14 brLeft
  0179:39 0c            pushi c // $c nsRight
  017b:78               push1 
  017c:81 71              lag  
  017e:4a 0c             send c 

  0180:38 010b          pushi 10b // $10b actions
  0183:78               push1 
  0184:76               push0 
  0185:81 00              lag  
  0187:4a 06             send 6 

  0189:39 6c            pushi 6c // $6c dispose
  018b:76               push0 
  018c:57 43 04         super Rm 4 

  018f:78               push1 
  0190:38 00dc          pushi dc // $dc cycler
  0193:43 03 02         callk DisposeScript 2 

  0196:48                 ret 
  0197:00                bnot 
    )

)

// 0634
(instance egoEnters of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_023b
  023b:87 01              lap param1 
  023d:65 0a             aTop state 
  023f:36                push 
  0240:3c                 dup 
  0241:35 00              ldi 0 
  0243:1a                 eq? 
  0244:30 01f3            bnt code_043a 
  0247:76               push0 
  0248:45 03 00         callb procedure_0003 0 //  

  024b:76               push0 
  024c:45 02 00         callb procedure_0002 0 //  

  024f:39 12            pushi 12 // $12 illegalBits
  0251:78               push1 
  0252:76               push0 
  0253:81 00              lag  
  0255:4a 06             send 6 

  0257:89 7e              lsg  
  0259:35 00              ldi 0 
  025b:1a                 eq? 
  025c:30 005d            bnt code_02bc 
  025f:72 0bb2          lofsa $0bb2 // weaponsCheck
  0262:a2 01af            sal local431 
  0265:38 0176          pushi 176 // $176 addObstacle
  0268:78               push1 
  0269:39 22            pushi 22 // $22 type
  026b:78               push1 
  026c:7a               push2 
  026d:39 6b            pushi 6b // $6b init
  026f:39 16            pushi 16 // $16 brRight
  0271:38 00e4          pushi e4 // $e4 setHeading
  0274:38 00a1          pushi a1 // $a1 setVol
  0277:38 00c9          pushi c9 // $c9 disable
  027a:38 0093          pushi 93 // $93 ticksToDo
  027d:38 00ab          pushi ab // $ab move
  0280:38 008f          pushi 8f // $8f port
  0283:38 0088          pushi 88 // $88 lastTicks
  0286:38 008f          pushi 8f // $8f port
  0289:39 60            pushi 60 // $60 frame
  028b:38 0093          pushi 93 // $93 ticksToDo
  028e:39 4c            pushi 4c // $4c claimed
  0290:38 0098          pushi 98 // $98 set60ths
  0293:39 3f            pushi 3f // $3f priority
  0295:38 00a0          pushi a0 // $a0 mute
  0298:76               push0 
  0299:38 00a0          pushi a0 // $a0 mute
  029c:76               push0 
  029d:76               push0 
  029e:38 013f          pushi 13f // $13f inputLineAddr
  02a1:76               push0 
  02a2:38 013f          pushi 13f // $13f inputLineAddr
  02a5:38 00a1          pushi a1 // $a1 setVol
  02a8:39 72            pushi 72 // $72 yourself
  02aa:76               push0 
  02ab:39 6a            pushi 6a // $6a new
  02ad:76               push0 
  02ae:51 23            class Polygon 
  02b0:4a 04             send 4 

  02b2:4a 3a             send 3a 

  02b4:36                push 
  02b5:81 02              lag  
  02b7:4a 06             send 6 

  02b9:32 0054            jmp code_0310 

        code_02bc
  02bc:72 0c0e          lofsa $0c0e // groveClosed
  02bf:a2 01af            sal local431 
  02c2:38 0176          pushi 176 // $176 addObstacle
  02c5:78               push1 
  02c6:39 22            pushi 22 // $22 type
  02c8:78               push1 
  02c9:7a               push2 
  02ca:39 6b            pushi 6b // $6b init
  02cc:39 14            pushi 14 // $14 brLeft
  02ce:38 00e4          pushi e4 // $e4 setHeading
  02d1:38 00a1          pushi a1 // $a1 setVol
  02d4:38 00df          pushi df // $df endCel
  02d7:38 009f          pushi 9f // $9f fade
  02da:38 00c1          pushi c1 // $c1 lowlightColor
  02dd:38 00ac          pushi ac // $ac moveTo
  02e0:39 6c            pushi 6c // $6c dispose
  02e2:38 00ac          pushi ac // $ac moveTo
  02e5:39 46            pushi 46 // $46 width
  02e7:38 009d          pushi 9d // $9d pause
  02ea:39 3f            pushi 3f // $3f priority
  02ec:38 00a0          pushi a0 // $a0 mute
  02ef:76               push0 
  02f0:38 00a0          pushi a0 // $a0 mute
  02f3:76               push0 
  02f4:76               push0 
  02f5:38 013f          pushi 13f // $13f inputLineAddr
  02f8:76               push0 
  02f9:38 013f          pushi 13f // $13f inputLineAddr
  02fc:38 00a1          pushi a1 // $a1 setVol
  02ff:39 72            pushi 72 // $72 yourself
  0301:76               push0 
  0302:39 6a            pushi 6a // $6a new
  0304:76               push0 
  0305:51 23            class Polygon 
  0307:4a 04             send 4 

  0309:4a 36             send 36 

  030b:36                push 
  030c:81 02              lag  
  030e:4a 06             send 6 


        code_0310
  0310:38 0176          pushi 176 // $176 addObstacle
  0313:39 03            pushi 3 // $3 y
  0315:39 22            pushi 22 // $22 type
  0317:78               push1 
  0318:7a               push2 
  0319:39 6b            pushi 6b // $6b init
  031b:39 0c            pushi c // $c nsRight
  031d:38 013f          pushi 13f // $13f inputLineAddr
  0320:38 00b2          pushi b2 // $b2 retreat
  0323:38 012f          pushi 12f // $12f observeBlocks
  0326:38 00ba          pushi ba // $ba right
  0329:38 00f8          pushi f8 // $f8 targetY
  032c:38 00ba          pushi ba // $ba right
  032f:38 00e0          pushi e0 // $e0 xLast
  0332:38 00b2          pushi b2 // $b2 retreat
  0335:38 00fb          pushi fb // $fb offScreenOK
  0338:38 00aa          pushi aa // $aa setSize
  033b:38 012c          pushi 12c // $12c ignoreHorizon
  033e:38 00aa          pushi aa // $aa setSize
  0341:39 72            pushi 72 // $72 yourself
  0343:76               push0 
  0344:39 6a            pushi 6a // $6a new
  0346:76               push0 
  0347:51 23            class Polygon 
  0349:4a 04             send 4 

  034b:4a 26             send 26 

  034d:36                push 
  034e:39 22            pushi 22 // $22 type
  0350:78               push1 
  0351:7a               push2 
  0352:39 6b            pushi 6b // $6b init
  0354:39 0c            pushi c // $c nsRight
  0356:39 3c            pushi 3c // $3c doit
  0358:38 00b1          pushi b1 // $b1 advance
  035b:39 29            pushi 29 // $29 edit
  035d:38 00b8          pushi b8 // $b8 left
  0360:39 04            pushi 4 // $4 x
  0362:38 00b8          pushi b8 // $b8 left
  0365:76               push0 
  0366:38 00b0          pushi b0 // $b0 cycle
  0369:39 10            pushi 10 // $10 lsRight
  036b:38 00aa          pushi aa // $aa setSize
  036e:39 2b            pushi 2b // $2b number
  0370:38 00aa          pushi aa // $aa setSize
  0373:39 72            pushi 72 // $72 yourself
  0375:76               push0 
  0376:39 6a            pushi 6a // $6a new
  0378:76               push0 
  0379:51 23            class Polygon 
  037b:4a 04             send 4 

  037d:4a 26             send 26 

  037f:36                push 
  0380:39 22            pushi 22 // $22 type
  0382:78               push1 
  0383:76               push0 
  0384:39 6b            pushi 6b // $6b init
  0386:39 10            pushi 10 // $10 lsRight
  0388:38 00e0          pushi e0 // $e0 xLast
  038b:38 009f          pushi 9f // $9f fade
  038e:38 00df          pushi df // $df endCel
  0391:38 00a2          pushi a2 // $a2 setLoop
  0394:38 00c2          pushi c2 // $c2 show
  0397:38 00ad          pushi ad // $ad setMark
  039a:39 6b            pushi 6b // $6b init
  039c:38 00ad          pushi ad // $ad setMark
  039f:39 4a            pushi 4a // $4a pragmaFail
  03a1:38 00a2          pushi a2 // $a2 setLoop
  03a4:39 43            pushi 43 // $43 at
  03a6:38 009c          pushi 9c // $9c stop
  03a9:7a               push2 
  03aa:39 3a            pushi 3a // $3a heading
  03ac:38 0139          pushi 139 // $139 alterEgo
  03af:39 3a            pushi 3a // $3a heading
  03b1:39 72            pushi 72 // $72 yourself
  03b3:76               push0 
  03b4:39 6a            pushi 6a // $6a new
  03b6:76               push0 
  03b7:51 23            class Polygon 
  03b9:4a 04             send 4 

  03bb:4a 2e             send 2e 

  03bd:36                push 
  03be:81 02              lag  
  03c0:4a 0a             send a 

  03c2:67 1a             pTos register 
  03c4:3c                 dup 
  03c5:35 01              ldi 1 
  03c7:1a                 eq? 
  03c8:30 0023            bnt code_03ee 
  03cb:38 011c          pushi 11c // $11c posn
  03ce:7a               push2 
  03cf:38 008e          pushi 8e // $8e setScript
  03d2:38 00f0          pushi f0 // $f0 thisTurn
  03d5:39 6b            pushi 6b // $6b init
  03d7:76               push0 
  03d8:38 011b          pushi 11b // $11b setMotion
  03db:39 04            pushi 4 // $4 x
  03dd:51 24            class PolyPath 
  03df:36                push 
  03e0:38 008e          pushi 8e // $8e setScript
  03e3:38 00b7          pushi b7 // $b7 top
  03e6:7c            pushSelf 
  03e7:81 00              lag  
  03e9:4a 18             send 18 

  03eb:32 0048            jmp code_0436 

        code_03ee
  03ee:3c                 dup 
  03ef:35 02              ldi 2 
  03f1:1a                 eq? 
  03f2:30 0021            bnt code_0416 
  03f5:38 011c          pushi 11c // $11c posn
  03f8:7a               push2 
  03f9:39 f6            pushi f6 // $f6 nonBumps
  03fb:38 00aa          pushi aa // $aa setSize
  03fe:39 6b            pushi 6b // $6b init
  0400:76               push0 
  0401:38 011b          pushi 11b // $11b setMotion
  0404:39 04            pushi 4 // $4 x
  0406:51 24            class PolyPath 
  0408:36                push 
  0409:39 28            pushi 28 // $28 message
  040b:38 00aa          pushi aa // $aa setSize
  040e:7c            pushSelf 
  040f:81 00              lag  
  0411:4a 18             send 18 

  0413:32 0020            jmp code_0436 

        code_0416
  0416:38 011c          pushi 11c // $11c posn
  0419:7a               push2 
  041a:38 0145          pushi 145 // $145 theObj
  041d:38 00aa          pushi aa // $aa setSize
  0420:39 6b            pushi 6b // $6b init
  0422:76               push0 
  0423:38 011b          pushi 11b // $11b setMotion
  0426:39 04            pushi 4 // $4 x
  0428:51 24            class PolyPath 
  042a:36                push 
  042b:38 00fa          pushi fa // $fa outOfTouch
  042e:38 00aa          pushi aa // $aa setSize
  0431:7c            pushSelf 
  0432:81 00              lag  
  0434:4a 18             send 18 


        code_0436
  0436:3a                toss 
  0437:32 01f1            jmp code_062b 

        code_043a
  043a:3c                 dup 
  043b:35 01              ldi 1 
  043d:1a                 eq? 
  043e:30 0033            bnt code_0474 
  0441:78               push1 
  0442:38 00b3          pushi b3 // $b3 theItem
  0445:45 05 02         callb procedure_0005 2 //  

  0448:30 0020            bnt code_046b 
  044b:78               push1 
  044c:38 00b3          pushi b3 // $b3 theItem
  044f:45 07 02         callb procedure_0007 2 //  

  0452:39 04            pushi 4 // $4 x
  0454:5a 0002 01a3       lea 2 1a3 
  0459:36                push 
  045a:5a 0002 01fa       lea 2 1fa 
  045f:36                push 
  0460:76               push0 
  0461:7c            pushSelf 
  0462:46 0353 0000 08  calle 353 procedure_0000 8 //  

  0468:32 01c0            jmp code_062b 

        code_046b
  046b:38 008d          pushi 8d // $8d cue
  046e:76               push0 
  046f:54 04             self 4 

  0471:32 01b7            jmp code_062b 

        code_0474
  0474:3c                 dup 
  0475:35 02              ldi 2 
  0477:1a                 eq? 
  0478:30 007c            bnt code_04f7 
  047b:39 77            pushi 77 // $77 contains
  047d:78               push1 
  047e:72 164e          lofsa $164e // marian
  0481:36                push 
  0482:81 05              lag  
  0484:4a 06             send 6 

  0486:30 0061            bnt code_04ea 
  0489:89 82              lsg  
  048b:3c                 dup 
  048c:35 04              ldi 4 
  048e:1a                 eq? 
  048f:30 0049            bnt code_04db 
  0492:89 95              lsg  
  0494:3c                 dup 
  0495:35 00              ldi 0 
  0497:1a                 eq? 
  0498:30 0015            bnt code_04b0 
  049b:39 04            pushi 4 // $4 x
  049d:5a 0002 015a       lea 2 15a 
  04a2:36                push 
  04a3:78               push1 
  04a4:39 16            pushi 16 // $16 brRight
  04a6:7c            pushSelf 
  04a7:46 0353 0000 08  calle 353 procedure_0000 8 //  

  04ad:32 0027            jmp code_04d7 

        code_04b0
  04b0:3c                 dup 
  04b1:35 01              ldi 1 
  04b3:1a                 eq? 
  04b4:30 0007            bnt code_04be 
  04b7:35 01              ldi 1 
  04b9:65 10             aTop cycles 
  04bb:32 0019            jmp code_04d7 

        code_04be
  04be:3c                 dup 
  04bf:35 02              ldi 2 
  04c1:1a                 eq? 
  04c2:30 0012            bnt code_04d7 
  04c5:39 04            pushi 4 // $4 x
  04c7:5a 0002 0169       lea 2 169 
  04cc:36                push 
  04cd:78               push1 
  04ce:39 16            pushi 16 // $16 brRight
  04d0:7c            pushSelf 
  04d1:46 0353 0000 08  calle 353 procedure_0000 8 //  


        code_04d7
  04d7:3a                toss 
  04d8:32 000b            jmp code_04e6 

        code_04db
  04db:3c                 dup 
  04dc:35 07              ldi 7 
  04de:1a                 eq? 
  04df:30 0004            bnt code_04e6 
  04e2:35 01              ldi 1 
  04e4:65 10             aTop cycles 

        code_04e6
  04e6:3a                toss 
  04e7:32 0141            jmp code_062b 

        code_04ea
  04ea:76               push0 
  04eb:40 fcf7 00        call proc_01e6 0 

  04ef:39 6c            pushi 6c // $6c dispose
  04f1:76               push0 
  04f2:54 04             self 4 

  04f4:32 0134            jmp code_062b 

        code_04f7
  04f7:3c                 dup 
  04f8:35 03              ldi 3 
  04fa:1a                 eq? 
  04fb:30 001a            bnt code_0518 
  04fe:78               push1 
  04ff:38 009b          pushi 9b // $9b owner
  0502:45 06 02         callb procedure_0006 2 //  

  0505:38 008e          pushi 8e // $8e setScript
  0508:7a               push2 
  0509:72 0910          lofsa $0910 // disarm
  050c:36                push 
  050d:7c            pushSelf 
  050e:54 08             self 8 

  0510:35 01              ldi 1 
  0512:a2 01ae            sal local430 
  0515:32 0113            jmp code_062b 

        code_0518
  0518:3c                 dup 
  0519:35 04              ldi 4 
  051b:1a                 eq? 
  051c:30 001a            bnt code_0539 
  051f:89 82              lsg  
  0521:35 07              ldi 7 
  0523:1a                 eq? 
  0524:30 0002            bnt code_0529 
  0527:6b 0a            ipToa state 

        code_0529
  0529:39 06            pushi 6 // $6 loop
  052b:78               push1 
  052c:76               push0 
  052d:72 164e          lofsa $164e // marian
  0530:4a 06             send 6 

  0532:35 02              ldi 2 
  0534:65 10             aTop cycles 
  0536:32 00f2            jmp code_062b 

        code_0539
  0539:3c                 dup 
  053a:35 05              ldi 5 
  053c:1a                 eq? 
  053d:30 0026            bnt code_0566 
  0540:89 95              lsg  
  0542:3c                 dup 
  0543:35 01              ldi 1 
  0545:1a                 eq? 
  0546:30 0015            bnt code_055e 
  0549:39 04            pushi 4 // $4 x
  054b:5a 0002 0164       lea 2 164 
  0550:36                push 
  0551:78               push1 
  0552:39 16            pushi 16 // $16 brRight
  0554:7c            pushSelf 
  0555:46 0353 0000 08  calle 353 procedure_0000 8 //  

  055b:32 0004            jmp code_0562 

        code_055e
  055e:35 01              ldi 1 
  0560:65 10             aTop cycles 

        code_0562
  0562:3a                toss 
  0563:32 00c5            jmp code_062b 

        code_0566
  0566:3c                 dup 
  0567:35 06              ldi 6 
  0569:1a                 eq? 
  056a:30 00ab            bnt code_0618 
  056d:89 82              lsg  
  056f:3c                 dup 
  0570:35 04              ldi 4 
  0572:1a                 eq? 
  0573:30 0046            bnt code_05bc 
  0576:89 95              lsg  
  0578:3c                 dup 
  0579:35 00              ldi 0 
  057b:1a                 eq? 
  057c:30 0015            bnt code_0594 
  057f:39 04            pushi 4 // $4 x
  0581:5a 0002 015f       lea 2 15f 
  0586:36                push 
  0587:78               push1 
  0588:39 16            pushi 16 // $16 brRight
  058a:7c            pushSelf 
  058b:46 0353 0000 08  calle 353 procedure_0000 8 //  

  0591:32 0024            jmp code_05b8 

        code_0594
  0594:3c                 dup 
  0595:35 02              ldi 2 
  0597:1a                 eq? 
  0598:30 0019            bnt code_05b4 
  059b:39 04            pushi 4 // $4 x
  059d:5a 0002 016e       lea 2 16e 
  05a2:36                push 
  05a3:78               push1 
  05a4:39 16            pushi 16 // $16 brRight
  05a6:7c            pushSelf 
  05a7:46 0353 0000 08  calle 353 procedure_0000 8 //  

  05ad:35 01              ldi 1 
  05af:a3 0c              sal local12 
  05b1:32 0004            jmp code_05b8 

        code_05b4
  05b4:35 01              ldi 1 
  05b6:65 10             aTop cycles 

        code_05b8
  05b8:3a                toss 
  05b9:32 0058            jmp code_0614 

        code_05bc
  05bc:3c                 dup 
  05bd:35 07              ldi 7 
  05bf:1a                 eq? 
  05c0:30 0051            bnt code_0614 
  05c3:89 95              lsg  
  05c5:3c                 dup 
  05c6:35 00              ldi 0 
  05c8:1a                 eq? 
  05c9:30 0015            bnt code_05e1 
  05cc:39 04            pushi 4 // $4 x
  05ce:5a 0002 0174       lea 2 174 
  05d3:36                push 
  05d4:78               push1 
  05d5:39 16            pushi 16 // $16 brRight
  05d7:7c            pushSelf 
  05d8:46 0353 0000 08  calle 353 procedure_0000 8 //  

  05de:32 0032            jmp code_0613 

        code_05e1
  05e1:3c                 dup 
  05e2:35 01              ldi 1 
  05e4:1a                 eq? 
  05e5:30 0015            bnt code_05fd 
  05e8:39 04            pushi 4 // $4 x
  05ea:5a 0002 0182       lea 2 182 
  05ef:36                push 
  05f0:78               push1 
  05f1:39 16            pushi 16 // $16 brRight
  05f3:7c            pushSelf 
  05f4:46 0353 0000 08  calle 353 procedure_0000 8 //  

  05fa:32 0016            jmp code_0613 

        code_05fd
  05fd:39 04            pushi 4 // $4 x
  05ff:5a 0002 0188       lea 2 188 
  0604:36                push 
  0605:78               push1 
  0606:39 16            pushi 16 // $16 brRight
  0608:7c            pushSelf 
  0609:46 0353 0000 08  calle 353 procedure_0000 8 //  

  060f:35 01              ldi 1 
  0611:a3 0c              sal local12 

        code_0613
  0613:3a                toss 

        code_0614
  0614:3a                toss 
  0615:32 0013            jmp code_062b 

        code_0618
  0618:3c                 dup 
  0619:35 07              ldi 7 
  061b:1a                 eq? 
  061c:30 000c            bnt code_062b 
  061f:76               push0 
  0620:40 fbc2 00        call proc_01e6 0 

  0624:c1 95              +ag  
  0626:39 6c            pushi 6c // $6c dispose
  0628:76               push0 
  0629:54 04             self 4 


        code_062b
  062b:3a                toss 
  062c:48                 ret 
  062d:00                bnot 
    )

)

// 090a
(instance disarm of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0668
  0668:3f 02             link 2 // (var $2)
  066a:87 01              lap param1 
  066c:65 0a             aTop state 
  066e:36                push 
  066f:3c                 dup 
  0670:35 00              ldi 0 
  0672:1a                 eq? 
  0673:30 005f            bnt code_06d5 
  0676:76               push0 
  0677:45 03 00         callb procedure_0003 0 //  

  067a:39 3b            pushi 3b // $3b mover
  067c:76               push0 
  067d:81 00              lag  
  067f:4a 04             send 4 

  0681:65 1a             aTop register 
  0683:63 1a             pToa register 
  0685:30 0018            bnt code_06a0 
  0688:39 70            pushi 70 // $70 isMemberOf
  068a:78               push1 
  068b:51 24            class PolyPath 
  068d:36                push 
  068e:63 1a             pToa register 
  0690:4a 06             send 6 

  0692:30 000b            bnt code_06a0 
  0695:39 3b            pushi 3b // $3b mover
  0697:78               push1 
  0698:76               push0 
  0699:81 00              lag  
  069b:4a 06             send 6 

  069d:32 000d            jmp code_06ad 

        code_06a0
  06a0:38 011b          pushi 11b // $11b setMotion
  06a3:78               push1 
  06a4:35 00              ldi 0 
  06a6:65 1a             aTop register 
  06a8:36                push 
  06a9:81 00              lag  
  06ab:4a 06             send 6 


        code_06ad
  06ad:78               push1 
  06ae:38 009b          pushi 9b // $9b owner
  06b1:45 05 02         callb procedure_0005 2 //  

  06b4:30 0007            bnt code_06be 
  06b7:35 01              ldi 1 
  06b9:65 10             aTop cycles 
  06bb:32 000d            jmp code_06cb 

        code_06be
  06be:39 03            pushi 3 // $3 y
  06c0:38 04ba          pushi 4ba // $4ba sel_1210
  06c3:38 00da          pushi da // $da motionCue
  06c6:7c            pushSelf 
  06c7:47 0d 04 06      calle d procedure_0004 6 //  


        code_06cb
  06cb:78               push1 
  06cc:38 009b          pushi 9b // $9b owner
  06cf:45 06 02         callb procedure_0006 2 //  

  06d2:32 022c            jmp code_0901 

        code_06d5
  06d5:3c                 dup 
  06d6:35 01              ldi 1 
  06d8:1a                 eq? 
  06d9:30 0016            bnt code_06f2 
  06dc:38 011b          pushi 11b // $11b setMotion
  06df:39 04            pushi 4 // $4 x
  06e1:51 24            class PolyPath 
  06e3:36                push 
  06e4:38 0095          pushi 95 // $95 set
  06e7:38 00af          pushi af // $af checkState
  06ea:7c            pushSelf 
  06eb:81 00              lag  
  06ed:4a 0c             send c 

  06ef:32 020f            jmp code_0901 

        code_06f2
  06f2:3c                 dup 
  06f3:35 02              ldi 2 
  06f5:1a                 eq? 
  06f6:30 000f            bnt code_0708 
  06f9:38 00e4          pushi e4 // $e4 setHeading
  06fc:7a               push2 
  06fd:38 0087          pushi 87 // $87 ticks
  0700:7c            pushSelf 
  0701:81 00              lag  
  0703:4a 08             send 8 

  0705:32 01f9            jmp code_0901 

        code_0708
  0708:3c                 dup 
  0709:35 03              ldi 3 
  070b:1a                 eq? 
  070c:30 007c            bnt code_078b 
  070f:39 05            pushi 5 // $5 view
  0711:78               push1 
  0712:39 0f            pushi f // $f lsBottom
  0714:38 00a2          pushi a2 // $a2 setLoop
  0717:78               push1 
  0718:7a               push2 
  0719:38 0120          pushi 120 // $120 setCel
  071c:78               push1 
  071d:76               push0 
  071e:38 00db          pushi db // $db cycleSpeed
  0721:78               push1 
  0722:39 0c            pushi c // $c nsRight
  0724:38 011c          pushi 11c // $11c posn
  0727:7a               push2 
  0728:39 04            pushi 4 // $4 x
  072a:76               push0 
  072b:81 00              lag  
  072d:4a 04             send 4 

  072f:36                push 
  0730:35 05              ldi 5 
  0732:02                 add 
  0733:36                push 
  0734:39 03            pushi 3 // $3 y
  0736:76               push0 
  0737:81 00              lag  
  0739:4a 04             send 4 

  073b:36                push 
  073c:35 05              ldi 5 
  073e:02                 add 
  073f:36                push 
  0740:39 42            pushi 42 // $42 setPri
  0742:78               push1 
  0743:39 0c            pushi c // $c nsRight
  0745:38 0096          pushi 96 // $96 setCycle
  0748:7a               push2 
  0749:51 1a            class End 
  074b:36                push 
  074c:7c            pushSelf 
  074d:81 00              lag  
  074f:4a 2e             send 2e 

  0751:38 011c          pushi 11c // $11c posn
  0754:7a               push2 
  0755:39 04            pushi 4 // $4 x
  0757:76               push0 
  0758:81 00              lag  
  075a:4a 04             send 4 

  075c:36                push 
  075d:39 03            pushi 3 // $3 y
  075f:76               push0 
  0760:81 00              lag  
  0762:4a 04             send 4 

  0764:36                push 
  0765:39 6b            pushi 6b // $6b init
  0767:76               push0 
  0768:38 0096          pushi 96 // $96 setCycle
  076b:78               push1 
  076c:51 1a            class End 
  076e:36                push 
  076f:72 0c64          lofsa $0c64 // bow
  0772:4a 12             send 12 

  0774:7a               push2 
  0775:38 0080          pushi 80 // $80 indexOf
  0778:38 02be          pushi 2be // $2be sel_702
  077b:43 00 04         callk Load 4 

  077e:7a               push2 
  077f:38 0080          pushi 80 // $80 indexOf
  0782:38 02bf          pushi 2bf // $2bf sel_703
  0785:43 00 04         callk Load 4 

  0788:32 0176            jmp code_0901 

        code_078b
  078b:3c                 dup 
  078c:35 04              ldi 4 
  078e:1a                 eq? 
  078f:30 000f            bnt code_07a1 
  0792:38 0096          pushi 96 // $96 setCycle
  0795:7a               push2 
  0796:51 1b            class Beg 
  0798:36                push 
  0799:7c            pushSelf 
  079a:81 00              lag  
  079c:4a 08             send 8 

  079e:32 0160            jmp code_0901 

        code_07a1
  07a1:3c                 dup 
  07a2:35 05              ldi 5 
  07a4:1a                 eq? 
  07a5:30 003a            bnt code_07e2 
  07a8:38 011c          pushi 11c // $11c posn
  07ab:7a               push2 
  07ac:39 04            pushi 4 // $4 x
  07ae:76               push0 
  07af:81 00              lag  
  07b1:4a 04             send 4 

  07b3:36                push 
  07b4:35 09              ldi 9 
  07b6:04                 sub 
  07b7:36                push 
  07b8:39 03            pushi 3 // $3 y
  07ba:76               push0 
  07bb:81 00              lag  
  07bd:4a 04             send 4 

  07bf:36                push 
  07c0:35 03              ldi 3 
  07c2:04                 sub 
  07c3:36                push 
  07c4:38 00a2          pushi a2 // $a2 setLoop
  07c7:78               push1 
  07c8:39 03            pushi 3 // $3 y
  07ca:38 0120          pushi 120 // $120 setCel
  07cd:78               push1 
  07ce:76               push0 
  07cf:38 0096          pushi 96 // $96 setCycle
  07d2:39 04            pushi 4 // $4 x
  07d4:51 19            class CT 
  07d6:36                push 
  07d7:39 05            pushi 5 // $5 view
  07d9:78               push1 
  07da:7c            pushSelf 
  07db:81 00              lag  
  07dd:4a 20             send 20 

  07df:32 011f            jmp code_0901 

        code_07e2
  07e2:3c                 dup 
  07e3:35 06              ldi 6 
  07e5:1a                 eq? 
  07e6:30 003d            bnt code_0826 
  07e9:38 011c          pushi 11c // $11c posn
  07ec:7a               push2 
  07ed:39 04            pushi 4 // $4 x
  07ef:76               push0 
  07f0:81 00              lag  
  07f2:4a 04             send 4 

  07f4:36                push 
  07f5:35 06              ldi 6 
  07f7:02                 add 
  07f8:36                push 
  07f9:39 03            pushi 3 // $3 y
  07fb:76               push0 
  07fc:81 00              lag  
  07fe:4a 04             send 4 

  0800:36                push 
  0801:35 02              ldi 2 
  0803:02                 add 
  0804:36                push 
  0805:39 11            pushi 11 // $11 signal
  0807:78               push1 
  0808:38 4101          pushi 4101 // $4101 sel_16641
  080b:39 6b            pushi 6b // $6b init
  080d:76               push0 
  080e:72 0cde          lofsa $0cde // quiver
  0811:4a 12             send 12 

  0813:39 03            pushi 3 // $3 y
  0815:7a               push2 
  0816:38 02be          pushi 2be // $2be sel_702
  0819:38 02bf          pushi 2bf // $2bf sel_703
  081c:45 02 06         callb procedure_0002 6 //  

  081f:35 0c              ldi c 
  0821:65 16             aTop ticks 
  0823:32 00db            jmp code_0901 

        code_0826
  0826:3c                 dup 
  0827:35 07              ldi 7 
  0829:1a                 eq? 
  082a:30 003c            bnt code_0869 
  082d:39 11            pushi 11 // $11 signal
  082f:78               push1 
  0830:39 11            pushi 11 // $11 signal
  0832:76               push0 
  0833:72 0c64          lofsa $0c64 // bow
  0836:4a 04             send 4 

  0838:36                push 
  0839:34 0100            ldi 100 
  083c:14                  or 
  083d:36                push 
  083e:38 011d          pushi 11d // $11d stopUpd
  0841:76               push0 
  0842:72 0c64          lofsa $0c64 // bow
  0845:4a 0a             send a 

  0847:38 00db          pushi db // $db cycleSpeed
  084a:78               push1 
  084b:39 38            pushi 38 // $38 moveSpeed
  084d:76               push0 
  084e:81 00              lag  
  0850:4a 04             send 4 

  0852:36                push 
  0853:38 011b          pushi 11b // $11b setMotion
  0856:39 04            pushi 4 // $4 x
  0858:51 1e            class MoveTo 
  085a:36                push 
  085b:38 0095          pushi 95 // $95 set
  085e:38 00ac          pushi ac // $ac moveTo
  0861:7c            pushSelf 
  0862:81 00              lag  
  0864:4a 12             send 12 

  0866:32 0098            jmp code_0901 

        code_0869
  0869:3c                 dup 
  086a:35 08              ldi 8 
  086c:1a                 eq? 
  086d:30 005c            bnt code_08cc 
  0870:63 1a             pToa register 
  0872:30 0030            bnt code_08a5 
  0875:76               push0 
  0876:40 f96c 00        call proc_01e6 0 

  087a:39 3b            pushi 3b // $3b mover
  087c:78               push1 
  087d:67 1a             pTos register 
  087f:38 011b          pushi 11b // $11b setMotion
  0882:39 03            pushi 3 // $3 y
  0884:51 24            class PolyPath 
  0886:36                push 
  0887:38 00e8          pushi e8 // $e8 finalX
  088a:76               push0 
  088b:63 1a             pToa register 
  088d:4a 04             send 4 

  088f:36                push 
  0890:38 00e9          pushi e9 // $e9 finalY
  0893:76               push0 
  0894:63 1a             pToa register 
  0896:4a 04             send 4 

  0898:36                push 
  0899:81 00              lag  
  089b:4a 10             send 10 

  089d:39 6c            pushi 6c // $6c dispose
  089f:76               push0 
  08a0:54 04             self 4 

  08a2:32 005c            jmp code_0901 

        code_08a5
  08a5:38 011b          pushi 11b // $11b setMotion
  08a8:39 04            pushi 4 // $4 x
  08aa:51 1e            class MoveTo 
  08ac:36                push 
  08ad:38 00a5          pushi a5 // $a5 clean
  08b0:38 0095          pushi 95 // $95 set
  08b3:7c            pushSelf 
  08b4:81 00              lag  
  08b6:4a 0c             send c 

  08b8:39 77            pushi 77 // $77 contains
  08ba:78               push1 
  08bb:72 164e          lofsa $164e // marian
  08be:36                push 
  08bf:81 05              lag  
  08c1:4a 06             send 6 

  08c3:18                 not 
  08c4:30 003a            bnt code_0901 
  08c7:6b 0a            ipToa state 
  08c9:32 0035            jmp code_0901 

        code_08cc
  08cc:3c                 dup 
  08cd:35 09              ldi 9 
  08cf:1a                 eq? 
  08d0:30 000f            bnt code_08e2 
  08d3:39 03            pushi 3 // $3 y
  08d5:89 00              lsg  
  08d7:72 164e          lofsa $164e // marian
  08da:36                push 
  08db:7c            pushSelf 
  08dc:45 09 06         callb procedure_0009 6 //  

  08df:32 001f            jmp code_0901 

        code_08e2
  08e2:3c                 dup 
  08e3:35 0a              ldi a 
  08e5:1a                 eq? 
  08e6:30 0007            bnt code_08f0 
  08e9:35 02              ldi 2 
  08eb:65 10             aTop cycles 
  08ed:32 0011            jmp code_0901 

        code_08f0
  08f0:3c                 dup 
  08f1:35 0b              ldi b 
  08f3:1a                 eq? 
  08f4:30 000a            bnt code_0901 
  08f7:76               push0 
  08f8:40 f8ea 00        call proc_01e6 0 

  08fc:39 6c            pushi 6c // $6c dispose
  08fe:76               push0 
  08ff:54 04             self 4 


        code_0901
  0901:3a                toss 
  0902:48                 ret 
  0903:00                bnot 
    )

)

// 0b30
(instance rearm of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_093e
  093e:3f 02             link 2 // (var $2)
  0940:87 01              lap param1 
  0942:65 0a             aTop state 
  0944:36                push 
  0945:3c                 dup 
  0946:35 00              ldi 0 
  0948:1a                 eq? 
  0949:30 0069            bnt code_09b5 
  094c:76               push0 
  094d:45 03 00         callb procedure_0003 0 //  

  0950:7a               push2 
  0951:38 0080          pushi 80 // $80 indexOf
  0954:76               push0 
  0955:43 00 04         callk Load 4 

  0958:7a               push2 
  0959:38 0080          pushi 80 // $80 indexOf
  095c:78               push1 
  095d:43 00 04         callk Load 4 

  0960:39 3b            pushi 3b // $3b mover
  0962:76               push0 
  0963:81 00              lag  
  0965:4a 04             send 4 

  0967:65 1a             aTop register 
  0969:63 1a             pToa register 
  096b:30 0018            bnt code_0986 
  096e:39 70            pushi 70 // $70 isMemberOf
  0970:78               push1 
  0971:51 24            class PolyPath 
  0973:36                push 
  0974:63 1a             pToa register 
  0976:4a 06             send 6 

  0978:30 000b            bnt code_0986 
  097b:39 3b            pushi 3b // $3b mover
  097d:78               push1 
  097e:76               push0 
  097f:81 00              lag  
  0981:4a 06             send 6 

  0983:32 000d            jmp code_0993 

        code_0986
  0986:38 011b          pushi 11b // $11b setMotion
  0989:78               push1 
  098a:35 00              ldi 0 
  098c:65 1a             aTop register 
  098e:36                push 
  098f:81 00              lag  
  0991:4a 06             send 6 


        code_0993
  0993:38 011b          pushi 11b // $11b setMotion
  0996:39 04            pushi 4 // $4 x
  0998:51 24            class PolyPath 
  099a:36                push 
  099b:39 04            pushi 4 // $4 x
  099d:76               push0 
  099e:72 0c64          lofsa $0c64 // bow
  09a1:4a 04             send 4 

  09a3:36                push 
  09a4:39 03            pushi 3 // $3 y
  09a6:76               push0 
  09a7:72 0c64          lofsa $0c64 // bow
  09aa:4a 04             send 4 

  09ac:36                push 
  09ad:7c            pushSelf 
  09ae:81 00              lag  
  09b0:4a 0c             send c 

  09b2:32 0172            jmp code_0b27 

        code_09b5
  09b5:3c                 dup 
  09b6:35 01              ldi 1 
  09b8:1a                 eq? 
  09b9:30 000f            bnt code_09cb 
  09bc:38 00e4          pushi e4 // $e4 setHeading
  09bf:7a               push2 
  09c0:38 0087          pushi 87 // $87 ticks
  09c3:7c            pushSelf 
  09c4:81 00              lag  
  09c6:4a 08             send 8 

  09c8:32 015c            jmp code_0b27 

        code_09cb
  09cb:3c                 dup 
  09cc:35 02              ldi 2 
  09ce:1a                 eq? 
  09cf:30 004e            bnt code_0a20 
  09d2:39 05            pushi 5 // $5 view
  09d4:78               push1 
  09d5:39 0f            pushi f // $f lsBottom
  09d7:38 011c          pushi 11c // $11c posn
  09da:7a               push2 
  09db:39 04            pushi 4 // $4 x
  09dd:76               push0 
  09de:81 00              lag  
  09e0:4a 04             send 4 

  09e2:36                push 
  09e3:35 09              ldi 9 
  09e5:04                 sub 
  09e6:36                push 
  09e7:39 03            pushi 3 // $3 y
  09e9:76               push0 
  09ea:81 00              lag  
  09ec:4a 04             send 4 

  09ee:36                push 
  09ef:35 03              ldi 3 
  09f1:04                 sub 
  09f2:36                push 
  09f3:38 00a2          pushi a2 // $a2 setLoop
  09f6:78               push1 
  09f7:39 03            pushi 3 // $3 y
  09f9:39 07            pushi 7 // $7 cel
  09fb:78               push1 
  09fc:39 05            pushi 5 // $5 view
  09fe:38 00db          pushi db // $db cycleSpeed
  0a01:78               push1 
  0a02:39 0c            pushi c // $c nsRight
  0a04:39 42            pushi 42 // $42 setPri
  0a06:78               push1 
  0a07:39 0d            pushi d // $d lsTop
  0a09:38 0096          pushi 96 // $96 setCycle
  0a0c:7a               push2 
  0a0d:51 1b            class Beg 
  0a0f:36                push 
  0a10:7c            pushSelf 
  0a11:81 00              lag  
  0a13:4a 2e             send 2e 

  0a15:39 6c            pushi 6c // $6c dispose
  0a17:76               push0 
  0a18:72 0cde          lofsa $0cde // quiver
  0a1b:4a 04             send 4 

  0a1d:32 0107            jmp code_0b27 

        code_0a20
  0a20:3c                 dup 
  0a21:35 03              ldi 3 
  0a23:1a                 eq? 
  0a24:30 0007            bnt code_0a2e 
  0a27:35 0c              ldi c 
  0a29:65 16             aTop ticks 
  0a2b:32 00f9            jmp code_0b27 

        code_0a2e
  0a2e:3c                 dup 
  0a2f:35 04              ldi 4 
  0a31:1a                 eq? 
  0a32:30 002f            bnt code_0a64 
  0a35:38 011c          pushi 11c // $11c posn
  0a38:7a               push2 
  0a39:39 04            pushi 4 // $4 x
  0a3b:76               push0 
  0a3c:72 0c64          lofsa $0c64 // bow
  0a3f:4a 04             send 4 

  0a41:36                push 
  0a42:39 03            pushi 3 // $3 y
  0a44:76               push0 
  0a45:72 0c64          lofsa $0c64 // bow
  0a48:4a 04             send 4 

  0a4a:36                push 
  0a4b:38 00a2          pushi a2 // $a2 setLoop
  0a4e:78               push1 
  0a4f:7a               push2 
  0a50:38 0120          pushi 120 // $120 setCel
  0a53:78               push1 
  0a54:76               push0 
  0a55:38 0096          pushi 96 // $96 setCycle
  0a58:7a               push2 
  0a59:51 1a            class End 
  0a5b:36                push 
  0a5c:7c            pushSelf 
  0a5d:81 00              lag  
  0a5f:4a 1c             send 1c 

  0a61:32 00c3            jmp code_0b27 

        code_0a64
  0a64:3c                 dup 
  0a65:35 05              ldi 5 
  0a67:1a                 eq? 
  0a68:30 0021            bnt code_0a8c 
  0a6b:39 11            pushi 11 // $11 signal
  0a6d:78               push1 
  0a6e:39 11            pushi 11 // $11 signal
  0a70:76               push0 
  0a71:72 0c64          lofsa $0c64 // bow
  0a74:4a 04             send 4 

  0a76:36                push 
  0a77:34 feff            ldi feff 
  0a7a:12                 and 
  0a7b:36                push 
  0a7c:38 011f          pushi 11f // $11f startUpd
  0a7f:76               push0 
  0a80:72 0c64          lofsa $0c64 // bow
  0a83:4a 0a             send a 

  0a85:35 0c              ldi c 
  0a87:65 16             aTop ticks 
  0a89:32 009b            jmp code_0b27 

        code_0a8c
  0a8c:3c                 dup 
  0a8d:35 06              ldi 6 
  0a8f:1a                 eq? 
  0a90:30 001b            bnt code_0aae 
  0a93:38 0096          pushi 96 // $96 setCycle
  0a96:7a               push2 
  0a97:51 1b            class Beg 
  0a99:36                push 
  0a9a:7c            pushSelf 
  0a9b:81 00              lag  
  0a9d:4a 08             send 8 

  0a9f:38 0096          pushi 96 // $96 setCycle
  0aa2:78               push1 
  0aa3:51 1b            class Beg 
  0aa5:36                push 
  0aa6:72 0c64          lofsa $0c64 // bow
  0aa9:4a 06             send 6 

  0aab:32 0079            jmp code_0b27 

        code_0aae
  0aae:3c                 dup 
  0aaf:35 07              ldi 7 
  0ab1:1a                 eq? 
  0ab2:30 0007            bnt code_0abc 
  0ab5:35 0c              ldi c 
  0ab7:65 16             aTop ticks 
  0ab9:32 006b            jmp code_0b27 

        code_0abc
  0abc:3c                 dup 
  0abd:35 08              ldi 8 
  0abf:1a                 eq? 
  0ac0:30 0064            bnt code_0b27 
  0ac3:39 6c            pushi 6c // $6c dispose
  0ac5:76               push0 
  0ac6:72 0c64          lofsa $0c64 // bow
  0ac9:4a 04             send 4 

  0acb:78               push1 
  0acc:39 04            pushi 4 // $4 x
  0ace:45 02 02         callb procedure_0002 2 //  

  0ad1:76               push0 
  0ad2:40 f710 00        call proc_01e6 0 

  0ad6:39 42            pushi 42 // $42 setPri
  0ad8:78               push1 
  0ad9:39 ff            pushi ff // $ff syncNum
  0adb:38 011c          pushi 11c // $11c posn
  0ade:7a               push2 
  0adf:39 04            pushi 4 // $4 x
  0ae1:76               push0 
  0ae2:81 00              lag  
  0ae4:4a 04             send 4 

  0ae6:36                push 
  0ae7:35 06              ldi 6 
  0ae9:04                 sub 
  0aea:36                push 
  0aeb:39 03            pushi 3 // $3 y
  0aed:76               push0 
  0aee:81 00              lag  
  0af0:4a 04             send 4 

  0af2:36                push 
  0af3:35 06              ldi 6 
  0af5:04                 sub 
  0af6:36                push 
  0af7:81 00              lag  
  0af9:4a 0e             send e 

  0afb:63 1a             pToa register 
  0afd:30 0022            bnt code_0b22 
  0b00:39 3b            pushi 3b // $3b mover
  0b02:78               push1 
  0b03:36                push 
  0b04:38 011b          pushi 11b // $11b setMotion
  0b07:39 03            pushi 3 // $3 y
  0b09:51 24            class PolyPath 
  0b0b:36                push 
  0b0c:38 00e8          pushi e8 // $e8 finalX
  0b0f:76               push0 
  0b10:63 1a             pToa register 
  0b12:4a 04             send 4 

  0b14:36                push 
  0b15:38 00e9          pushi e9 // $e9 finalY
  0b18:76               push0 
  0b19:63 1a             pToa register 
  0b1b:4a 04             send 4 

  0b1d:36                push 
  0b1e:81 00              lag  
  0b20:4a 10             send 10 


        code_0b22
  0b22:39 6c            pushi 6c // $6c dispose
  0b24:76               push0 
  0b25:54 04             self 4 


        code_0b27
  0b27:3a                toss 
  0b28:48                 ret 
  0b29:00                bnot 
    )

)

// 0bac
(instance weaponsCheck of Code
    (properties
    )
    (method (doit) // method_0b64
  0b64:3f 01             link 1 // (var $1)
  0b66:38 0133          pushi 133 // $133 onControl
  0b69:78               push1 
  0b6a:78               push1 
  0b6b:81 00              lag  
  0b6d:4a 06             send 6 

  0b6f:36                push 
  0b70:35 04              ldi 4 
  0b72:12                 and 
  0b73:a5 00              sat temp0 
  0b75:30 0016            bnt code_0b8e 
  0b78:82 01ae            lal local430 
  0b7b:18                 not 
  0b7c:30 0021            bnt code_0ba0 
  0b7f:38 008e          pushi 8e // $8e setScript
  0b82:78               push1 
  0b83:72 0910          lofsa $0910 // disarm
  0b86:36                push 
  0b87:81 02              lag  
  0b89:4a 06             send 6 

  0b8b:32 0012            jmp code_0ba0 

        code_0b8e
  0b8e:82 01ae            lal local430 
  0b91:30 000c            bnt code_0ba0 
  0b94:38 008e          pushi 8e // $8e setScript
  0b97:78               push1 
  0b98:72 0b36          lofsa $0b36 // rearm
  0b9b:36                push 
  0b9c:81 02              lag  
  0b9e:4a 06             send 6 


        code_0ba0
  0ba0:85 00              lat temp0 
  0ba2:a2 01ae            sal local430 
  0ba5:48                 ret 
    )

)

// 0c08
(instance groveClosed of Code
    (properties
    )
    (method (doit) // method_0bc6
  0bc6:3f 01             link 1 // (var $1)
  0bc8:38 0133          pushi 133 // $133 onControl
  0bcb:78               push1 
  0bcc:78               push1 
  0bcd:81 00              lag  
  0bcf:4a 06             send 6 

  0bd1:36                push 
  0bd2:35 04              ldi 4 
  0bd4:12                 and 
  0bd5:30 0029            bnt code_0c01 
  0bd8:35 00              ldi 0 
  0bda:a2 01af            sal local431 
  0bdd:39 03            pushi 3 // $3 y
  0bdf:38 04ba          pushi 4ba // $4ba sel_1210
  0be2:89 7e              lsg  
  0be4:35 04              ldi 4 
  0be6:1a                 eq? 
  0be7:30 000e            bnt code_0bf8 
  0bea:89 82              lsg  
  0bec:35 08              ldi 8 
  0bee:1a                 eq? 
  0bef:30 0006            bnt code_0bf8 
  0bf2:34 00f8            ldi f8 
  0bf5:32 0003            jmp code_0bfb 

        code_0bf8
  0bf8:34 00f9            ldi f9 

        code_0bfb
  0bfb:36                push 
  0bfc:78               push1 
  0bfd:47 0d 04 06      calle d procedure_0004 6 //  


        code_0c01
  0c01:48                 ret 
    )

)

// 0c5e
(instance bow of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $7
        yStep $2
        view $f
        loop $6
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_0c22
  0c22:8f 01              lsp param1 
  0c24:35 03              ldi 3 
  0c26:1c                 ne? 
  0c27:2e 0002             bt code_0c2c 
  0c2a:83 0c              lal local12 

        code_0c2c
  0c2c:30 000e            bnt code_0c3d 
  0c2f:38 010c          pushi 10c // $10c doVerb
  0c32:7a               push2 
  0c33:8f 01              lsp param1 
  0c35:8f 02              lsp param2 
  0c37:57 2f 08         super Prop 8 

  0c3a:32 001a            jmp code_0c57 

        code_0c3d
  0c3d:38 011b          pushi 11b // $11b setMotion
  0c40:78               push1 
  0c41:76               push0 
  0c42:81 00              lag  
  0c44:4a 06             send 6 

  0c46:38 008e          pushi 8e // $8e setScript
  0c49:78               push1 
  0c4a:72 0b36          lofsa $0b36 // rearm
  0c4d:36                push 
  0c4e:81 02              lag  
  0c50:4a 06             send 6 

  0c52:35 00              ldi 0 
  0c54:a2 01ae            sal local430 

        code_0c57
  0c57:48                 ret 
    )

)

// 0cd8
(instance quiver of View
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $7
        yStep $2
        view $f
        loop $4
        cel $0
        priority $0
        underBits $0
        signal $4101
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_0cc6
  0cc6:38 010c          pushi 10c // $10c doVerb
  0cc9:76               push0 
  0cca:59 01            &rest 1 
  0ccc:72 0c64          lofsa $0c64 // bow
  0ccf:4a 04             send 4 

  0cd1:48                 ret 
    )

)

// 0dd4
(instance walkOut of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0d36
  0d36:3f 02             link 2 // (var $2)
  0d38:87 01              lap param1 
  0d3a:65 0a             aTop state 
  0d3c:36                push 
  0d3d:3c                 dup 
  0d3e:35 00              ldi 0 
  0d40:1a                 eq? 
  0d41:30 0071            bnt code_0db5 
  0d44:39 04            pushi 4 // $4 x
  0d46:76               push0 
  0d47:81 00              lag  
  0d49:4a 04             send 4 

  0d4b:a5 00              sat temp0 
  0d4d:39 03            pushi 3 // $3 y
  0d4f:76               push0 
  0d50:81 00              lag  
  0d52:4a 04             send 4 

  0d54:a5 01              sat temp1 
  0d56:89 6c              lsg  
  0d58:3c                 dup 
  0d59:35 03              ldi 3 
  0d5b:1a                 eq? 
  0d5c:30 0008            bnt code_0d67 
  0d5f:34 00f0            ldi f0 
  0d62:a5 01              sat temp1 
  0d64:32 001f            jmp code_0d86 

        code_0d67
  0d67:3c                 dup 
  0d68:35 02              ldi 2 
  0d6a:1a                 eq? 
  0d6b:30 000a            bnt code_0d78 
  0d6e:8d 00              lst temp0 
  0d70:35 14              ldi 14 
  0d72:02                 add 
  0d73:a5 00              sat temp0 
  0d75:32 000e            jmp code_0d86 

        code_0d78
  0d78:3c                 dup 
  0d79:35 04              ldi 4 
  0d7b:1a                 eq? 
  0d7c:30 0007            bnt code_0d86 
  0d7f:8d 00              lst temp0 
  0d81:35 14              ldi 14 
  0d83:04                 sub 
  0d84:a5 00              sat temp0 

        code_0d86
  0d86:3a                toss 
  0d87:76               push0 
  0d88:45 03 00         callb procedure_0003 0 //  

  0d8b:89 6c              lsg  
  0d8d:35 01              ldi 1 
  0d8f:1c                 ne? 
  0d90:30 0019            bnt code_0dac 
  0d93:38 0121          pushi 121 // $121 ignoreActors
  0d96:78               push1 
  0d97:78               push1 
  0d98:38 011b          pushi 11b // $11b setMotion
  0d9b:39 04            pushi 4 // $4 x
  0d9d:51 24            class PolyPath 
  0d9f:36                push 
  0da0:8d 00              lst temp0 
  0da2:8d 01              lst temp1 
  0da4:7c            pushSelf 
  0da5:81 00              lag  
  0da7:4a 12             send 12 

  0da9:32 001f            jmp code_0dcb 

        code_0dac
  0dac:38 008d          pushi 8d // $8d cue
  0daf:76               push0 
  0db0:54 04             self 4 

  0db2:32 0016            jmp code_0dcb 

        code_0db5
  0db5:3c                 dup 
  0db6:35 01              ldi 1 
  0db8:1a                 eq? 
  0db9:30 000f            bnt code_0dcb 
  0dbc:76               push0 
  0dbd:40 f425 00        call proc_01e6 0 

  0dc1:38 0179          pushi 179 // $179 newRoom
  0dc4:78               push1 
  0dc5:67 1a             pTos register 
  0dc7:81 02              lag  
  0dc9:4a 06             send 6 


        code_0dcb
  0dcb:3a                toss 
  0dcc:48                 ret 
  0dcd:00                bnot 
    )

)

// 0fbe
(instance carryIn of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0e08
  0e08:3f 02             link 2 // (var $2)
  0e0a:87 01              lap param1 
  0e0c:65 0a             aTop state 
  0e0e:36                push 
  0e0f:3c                 dup 
  0e10:35 00              ldi 0 
  0e12:1a                 eq? 
  0e13:30 00e9            bnt code_0eff 
  0e16:76               push0 
  0e17:45 03 00         callb procedure_0003 0 //  

  0e1a:38 0176          pushi 176 // $176 addObstacle
  0e1d:7a               push2 
  0e1e:39 22            pushi 22 // $22 type
  0e20:78               push1 
  0e21:39 03            pushi 3 // $3 y
  0e23:39 6b            pushi 6b // $6b init
  0e25:39 22            pushi 22 // $22 type
  0e27:38 00e4          pushi e4 // $e4 setHeading
  0e2a:38 00a1          pushi a1 // $a1 setVol
  0e2d:38 00c9          pushi c9 // $c9 disable
  0e30:38 0093          pushi 93 // $93 ticksToDo
  0e33:38 00ab          pushi ab // $ab move
  0e36:38 008f          pushi 8f // $8f port
  0e39:38 0088          pushi 88 // $88 lastTicks
  0e3c:38 008f          pushi 8f // $8f port
  0e3f:39 60            pushi 60 // $60 frame
  0e41:38 0093          pushi 93 // $93 ticksToDo
  0e44:39 4c            pushi 4c // $4c claimed
  0e46:38 0098          pushi 98 // $98 set60ths
  0e49:39 3f            pushi 3f // $3f priority
  0e4b:38 00a0          pushi a0 // $a0 mute
  0e4e:39 0e            pushi e // $e lsLeft
  0e50:38 00a0          pushi a0 // $a0 mute
  0e53:39 0e            pushi e // $e lsLeft
  0e55:38 00aa          pushi aa // $aa setSize
  0e58:39 2b            pushi 2b // $2b number
  0e5a:38 00aa          pushi aa // $aa setSize
  0e5d:39 3c            pushi 3c // $3c doit
  0e5f:38 00b1          pushi b1 // $b1 advance
  0e62:39 24            pushi 24 // $24 cursor
  0e64:38 00ba          pushi ba // $ba right
  0e67:38 00f8          pushi f8 // $f8 targetY
  0e6a:38 00ba          pushi ba // $ba right
  0e6d:38 00e0          pushi e0 // $e0 xLast
  0e70:38 00b2          pushi b2 // $b2 retreat
  0e73:38 00fb          pushi fb // $fb offScreenOK
  0e76:38 00aa          pushi aa // $aa setSize
  0e79:38 012e          pushi 12e // $12e ignoreControl
  0e7c:38 00aa          pushi aa // $aa setSize
  0e7f:38 012e          pushi 12e // $12e ignoreControl
  0e82:38 00a1          pushi a1 // $a1 setVol
  0e85:39 72            pushi 72 // $72 yourself
  0e87:76               push0 
  0e88:39 6a            pushi 6a // $6a new
  0e8a:76               push0 
  0e8b:51 23            class Polygon 
  0e8d:4a 04             send 4 

  0e8f:4a 52             send 52 

  0e91:36                push 
  0e92:39 22            pushi 22 // $22 type
  0e94:78               push1 
  0e95:7a               push2 
  0e96:39 6b            pushi 6b // $6b init
  0e98:39 0c            pushi c // $c nsRight
  0e9a:38 0081          pushi 81 // $81 handleEvent
  0e9d:38 0095          pushi 95 // $95 set
  0ea0:38 00b9          pushi b9 // $b9 bottom
  0ea3:38 0093          pushi 93 // $93 ticksToDo
  0ea6:38 00be          pushi be // $be maskLoop
  0ea9:38 0097          pushi 97 // $97 setReal
  0eac:38 00b6          pushi b6 // $b6 center
  0eaf:38 009c          pushi 9c // $9c stop
  0eb2:39 7f            pushi 7f // $7f addAfter
  0eb4:38 009f          pushi 9f // $9f fade
  0eb7:39 77            pushi 77 // $77 contains
  0eb9:38 009a          pushi 9a // $9a prevSignal
  0ebc:39 72            pushi 72 // $72 yourself
  0ebe:76               push0 
  0ebf:39 6a            pushi 6a // $6a new
  0ec1:76               push0 
  0ec2:51 23            class Polygon 
  0ec4:4a 04             send 4 

  0ec6:4a 26             send 26 

  0ec8:36                push 
  0ec9:81 02              lag  
  0ecb:4a 08             send 8 

  0ecd:38 010b          pushi 10b // $10b actions
  0ed0:78               push1 
  0ed1:72 2314          lofsa $2314 // dying
  0ed4:36                push 
  0ed5:39 05            pushi 5 // $5 view
  0ed7:78               push1 
  0ed8:38 01fe          pushi 1fe // $1fe startAudio
  0edb:39 06            pushi 6 // $6 loop
  0edd:78               push1 
  0ede:78               push1 
  0edf:38 011c          pushi 11c // $11c posn
  0ee2:7a               push2 
  0ee3:38 009a          pushi 9a // $9a prevSignal
  0ee6:3c                 dup 
  0ee7:39 6b            pushi 6b // $6b init
  0ee9:76               push0 
  0eea:38 0096          pushi 96 // $96 setCycle
  0eed:7a               push2 
  0eee:51 1a            class End 
  0ef0:36                push 
  0ef1:7c            pushSelf 
  0ef2:38 0121          pushi 121 // $121 ignoreActors
  0ef5:78               push1 
  0ef6:78               push1 
  0ef7:72 164e          lofsa $164e // marian
  0efa:4a 2c             send 2c 

  0efc:32 00b6            jmp code_0fb5 

        code_0eff
  0eff:3c                 dup 
  0f00:35 01              ldi 1 
  0f02:1a                 eq? 
  0f03:30 001d            bnt code_0f23 
  0f06:35 01              ldi 1 
  0f08:a2 01ad            sal local429 
  0f0b:39 06            pushi 6 // $6 loop
  0f0d:78               push1 
  0f0e:7a               push2 
  0f0f:39 07            pushi 7 // $7 cel
  0f11:78               push1 
  0f12:76               push0 
  0f13:38 0096          pushi 96 // $96 setCycle
  0f16:7a               push2 
  0f17:51 1a            class End 
  0f19:36                push 
  0f1a:7c            pushSelf 
  0f1b:72 164e          lofsa $164e // marian
  0f1e:4a 14             send 14 

  0f20:32 0092            jmp code_0fb5 

        code_0f23
  0f23:3c                 dup 
  0f24:35 02              ldi 2 
  0f26:1a                 eq? 
  0f27:30 0014            bnt code_0f3e 
  0f2a:39 04            pushi 4 // $4 x
  0f2c:5b 02 13           lea 2 13 
  0f2f:36                push 
  0f30:38 03e7          pushi 3e7 // $3e7 sel_999
  0f33:76               push0 
  0f34:7c            pushSelf 
  0f35:46 0353 0000 08  calle 353 procedure_0000 8 //  

  0f3b:32 0077            jmp code_0fb5 

        code_0f3e
  0f3e:3c                 dup 
  0f3f:35 03              ldi 3 
  0f41:1a                 eq? 
  0f42:30 000e            bnt code_0f53 
  0f45:39 03            pushi 3 // $3 y
  0f47:38 04ba          pushi 4ba // $4ba sel_1210
  0f4a:78               push1 
  0f4b:7c            pushSelf 
  0f4c:47 0d 04 06      calle d procedure_0004 6 //  

  0f50:32 0062            jmp code_0fb5 

        code_0f53
  0f53:3c                 dup 
  0f54:35 04              ldi 4 
  0f56:1a                 eq? 
  0f57:30 000e            bnt code_0f68 
  0f5a:39 03            pushi 3 // $3 y
  0f5c:38 04ba          pushi 4ba // $4ba sel_1210
  0f5f:7a               push2 
  0f60:7c            pushSelf 
  0f61:47 0d 04 06      calle d procedure_0004 6 //  

  0f65:32 004d            jmp code_0fb5 

        code_0f68
  0f68:3c                 dup 
  0f69:35 05              ldi 5 
  0f6b:1a                 eq? 
  0f6c:30 0046            bnt code_0fb5 
  0f6f:39 05            pushi 5 // $5 view
  0f71:78               push1 
  0f72:38 01fe          pushi 1fe // $1fe startAudio
  0f75:38 00a2          pushi a2 // $a2 setLoop
  0f78:78               push1 
  0f79:39 04            pushi 4 // $4 x
  0f7b:39 42            pushi 42 // $42 setPri
  0f7d:78               push1 
  0f7e:39 ff            pushi ff // $ff syncNum
  0f80:38 011c          pushi 11c // $11c posn
  0f83:7a               push2 
  0f84:38 00a7          pushi a7 // $a7 enable
  0f87:38 0098          pushi 98 // $98 set60ths
  0f8a:39 6b            pushi 6b // $6b init
  0f8c:76               push0 
  0f8d:38 008e          pushi 8e // $8e setScript
  0f90:78               push1 
  0f91:72 10ea          lofsa $10ea // waitToStand
  0f94:36                push 
  0f95:81 00              lag  
  0f97:4a 24             send 24 

  0f99:39 06            pushi 6 // $6 loop
  0f9b:78               push1 
  0f9c:39 03            pushi 3 // $3 y
  0f9e:38 008e          pushi 8e // $8e setScript
  0fa1:78               push1 
  0fa2:72 12a6          lofsa $12a6 // waitToDie
  0fa5:36                push 
  0fa6:72 164e          lofsa $164e // marian
  0fa9:4a 0c             send c 

  0fab:76               push0 
  0fac:40 f236 00        call proc_01e6 0 

  0fb0:39 6c            pushi 6c // $6c dispose
  0fb2:76               push0 
  0fb3:54 04             self 4 


        code_0fb5
  0fb5:3a                toss 
  0fb6:48                 ret 
  0fb7:00                bnot 
    )

)

// 10e4
(instance waitToStand of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (doit) // method_10cc
  10cc:39 3b            pushi 3b // $3b mover
  10ce:76               push0 
  10cf:81 00              lag  
  10d1:4a 04             send 4 

  10d3:30 0006            bnt code_10dc 
  10d6:38 008d          pushi 8d // $8d cue
  10d9:76               push0 
  10da:54 04             self 4 


        code_10dc
  10dc:48                 ret 
  10dd:00                bnot 
    )

    (method (changeState) // method_0ff2
  0ff2:87 01              lap param1 
  0ff4:65 0a             aTop state 
  0ff6:36                push 
  0ff7:3c                 dup 
  0ff8:35 01              ldi 1 
  0ffa:1a                 eq? 
  0ffb:30 0025            bnt code_1023 
  0ffe:76               push0 
  0fff:45 03 00         callb procedure_0003 0 //  

  1002:39 3b            pushi 3b // $3b mover
  1004:76               push0 
  1005:81 00              lag  
  1007:4a 04             send 4 

  1009:65 1a             aTop register 
  100b:39 3b            pushi 3b // $3b mover
  100d:78               push1 
  100e:76               push0 
  100f:39 42            pushi 42 // $42 setPri
  1011:78               push1 
  1012:39 ff            pushi ff // $ff syncNum
  1014:38 0096          pushi 96 // $96 setCycle
  1017:7a               push2 
  1018:51 1a            class End 
  101a:36                push 
  101b:7c            pushSelf 
  101c:81 00              lag  
  101e:4a 14             send 14 

  1020:32 00a7            jmp code_10ca 

        code_1023
  1023:3c                 dup 
  1024:35 02              ldi 2 
  1026:1a                 eq? 
  1027:30 002d            bnt code_1057 
  102a:39 03            pushi 3 // $3 y
  102c:7a               push2 
  102d:38 02be          pushi 2be // $2be sel_702
  1030:38 02bf          pushi 2bf // $2bf sel_703
  1033:45 02 06         callb procedure_0002 6 //  

  1036:39 03            pushi 3 // $3 y
  1038:78               push1 
  1039:38 0096          pushi 96 // $96 setCycle
  103c:38 011b          pushi 11b // $11b setMotion
  103f:39 04            pushi 4 // $4 x
  1041:51 1e            class MoveTo 
  1043:36                push 
  1044:39 04            pushi 4 // $4 x
  1046:76               push0 
  1047:81 00              lag  
  1049:4a 04             send 4 

  104b:36                push 
  104c:38 0093          pushi 93 // $93 ticksToDo
  104f:7c            pushSelf 
  1050:81 00              lag  
  1052:4a 12             send 12 

  1054:32 0073            jmp code_10ca 

        code_1057
  1057:3c                 dup 
  1058:35 03              ldi 3 
  105a:1a                 eq? 
  105b:30 006c            bnt code_10ca 
  105e:63 1a             pToa register 
  1060:30 002d            bnt code_1090 
  1063:39 70            pushi 70 // $70 isMemberOf
  1065:78               push1 
  1066:51 24            class PolyPath 
  1068:36                push 
  1069:63 1a             pToa register 
  106b:4a 06             send 6 

  106d:30 0020            bnt code_1090 
  1070:38 011b          pushi 11b // $11b setMotion
  1073:39 03            pushi 3 // $3 y
  1075:67 1a             pTos register 
  1077:38 00e8          pushi e8 // $e8 finalX
  107a:76               push0 
  107b:63 1a             pToa register 
  107d:4a 04             send 4 

  107f:36                push 
  1080:38 00e9          pushi e9 // $e9 finalY
  1083:76               push0 
  1084:63 1a             pToa register 
  1086:4a 04             send 4 

  1088:36                push 
  1089:81 00              lag  
  108b:4a 0a             send a 

  108d:32 001b            jmp code_10ab 

        code_1090
  1090:38 011b          pushi 11b // $11b setMotion
  1093:39 03            pushi 3 // $3 y
  1095:67 1a             pTos register 
  1097:39 04            pushi 4 // $4 x
  1099:76               push0 
  109a:63 1a             pToa register 
  109c:4a 04             send 4 

  109e:36                push 
  109f:39 03            pushi 3 // $3 y
  10a1:76               push0 
  10a2:63 1a             pToa register 
  10a4:4a 04             send 4 

  10a6:36                push 
  10a7:81 00              lag  
  10a9:4a 0a             send a 


        code_10ab
  10ab:38 00db          pushi db // $db cycleSpeed
  10ae:78               push1 
  10af:39 38            pushi 38 // $38 moveSpeed
  10b1:76               push0 
  10b2:81 00              lag  
  10b4:4a 04             send 4 

  10b6:36                push 
  10b7:81 00              lag  
  10b9:4a 06             send 6 

  10bb:35 00              ldi 0 
  10bd:a2 01ad            sal local429 
  10c0:76               push0 
  10c1:40 f121 00        call proc_01e6 0 

  10c5:39 6c            pushi 6c // $6c dispose
  10c7:76               push0 
  10c8:54 04             self 4 


        code_10ca
  10ca:3a                toss 
  10cb:48                 ret 
    )

)

// 12a0
(instance waitToDie of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (doit) // method_1269
  1269:3f 01             link 1 // (var $1)
  126b:39 3c            pushi 3c // $3c doit
  126d:76               push0 
  126e:57 06 04         super Script 4 

  1271:38 0133          pushi 133 // $133 onControl
  1274:78               push1 
  1275:78               push1 
  1276:81 00              lag  
  1278:4a 06             send 6 

  127a:36                push 
  127b:35 02              ldi 2 
  127d:12                 and 
  127e:a5 00              sat temp0 
  1280:30 0011            bnt code_1294 
  1283:82 01ae            lal local430 
  1286:18                 not 
  1287:30 000a            bnt code_1294 
  128a:7a               push2 
  128b:38 04ba          pushi 4ba // $4ba sel_1210
  128e:39 04            pushi 4 // $4 x
  1290:47 0d 04 04      calle d procedure_0004 4 //  


        code_1294
  1294:85 00              lat temp0 
  1296:a2 01ae            sal local430 
  1299:48                 ret 
    )

    (method (changeState) // method_111c
  111c:87 01              lap param1 
  111e:65 0a             aTop state 
  1120:36                push 
  1121:3c                 dup 
  1122:35 00              ldi 0 
  1124:1a                 eq? 
  1125:30 0007            bnt code_112f 
  1128:35 3c              ldi 3c 
  112a:65 12             aTop seconds 
  112c:32 0138            jmp code_1267 

        code_112f
  112f:3c                 dup 
  1130:35 01              ldi 1 
  1132:1a                 eq? 
  1133:30 001c            bnt code_1152 
  1136:76               push0 
  1137:45 03 00         callb procedure_0003 0 //  

  113a:78               push1 
  113b:38 fe0c          pushi fe0c // $fe0c sel_65036
  113e:46 0326 0001 02  calle 326 procedure_0001 2 //  

  1144:38 008e          pushi 8e // $8e setScript
  1147:7a               push2 
  1148:72 2004          lofsa $2004 // sit
  114b:36                push 
  114c:7c            pushSelf 
  114d:54 08             self 8 

  114f:32 0115            jmp code_1267 

        code_1152
  1152:3c                 dup 
  1153:35 02              ldi 2 
  1155:1a                 eq? 
  1156:30 0026            bnt code_117f 
  1159:39 2b            pushi 2b // $2b number
  115b:78               push1 
  115c:38 00d7          pushi d7 // $d7 completed
  115f:39 06            pushi 6 // $6 loop
  1161:78               push1 
  1162:39 ff            pushi ff // $ff syncNum
  1164:39 2a            pushi 2a // $2a play
  1166:76               push0 
  1167:81 71              lag  
  1169:4a 10             send 10 

  116b:39 04            pushi 4 // $4 x
  116d:5a 0002 019f       lea 2 19f 
  1172:36                push 
  1173:7a               push2 
  1174:76               push0 
  1175:7c            pushSelf 
  1176:46 0353 0000 08  calle 353 procedure_0000 8 //  

  117c:32 00e8            jmp code_1267 

        code_117f
  117f:3c                 dup 
  1180:35 03              ldi 3 
  1182:1a                 eq? 
  1183:30 0022            bnt code_11a8 
  1186:7a               push2 
  1187:38 0080          pushi 80 // $80 indexOf
  118a:38 01f5          pushi 1f5 // $1f5 cursorInc
  118d:43 00 04         callk Load 4 

  1190:38 00db          pushi db // $db cycleSpeed
  1193:78               push1 
  1194:39 09            pushi 9 // $9 nsTop
  1196:38 0096          pushi 96 // $96 setCycle
  1199:39 04            pushi 4 // $4 x
  119b:51 19            class CT 
  119d:36                push 
  119e:7a               push2 
  119f:78               push1 
  11a0:7c            pushSelf 
  11a1:81 00              lag  
  11a3:4a 12             send 12 

  11a5:32 00bf            jmp code_1267 

        code_11a8
  11a8:3c                 dup 
  11a9:35 04              ldi 4 
  11ab:1a                 eq? 
  11ac:30 002c            bnt code_11db 
  11af:39 05            pushi 5 // $5 view
  11b1:78               push1 
  11b2:38 01f5          pushi 1f5 // $1f5 cursorInc
  11b5:39 07            pushi 7 // $7 cel
  11b7:78               push1 
  11b8:76               push0 
  11b9:39 04            pushi 4 // $4 x
  11bb:78               push1 
  11bc:39 04            pushi 4 // $4 x
  11be:76               push0 
  11bf:81 00              lag  
  11c1:4a 04             send 4 

  11c3:36                push 
  11c4:35 02              ldi 2 
  11c6:04                 sub 
  11c7:36                push 
  11c8:38 0096          pushi 96 // $96 setCycle
  11cb:39 04            pushi 4 // $4 x
  11cd:51 19            class CT 
  11cf:36                push 
  11d0:39 03            pushi 3 // $3 y
  11d2:78               push1 
  11d3:7c            pushSelf 
  11d4:81 00              lag  
  11d6:4a 1e             send 1e 

  11d8:32 008c            jmp code_1267 

        code_11db
  11db:3c                 dup 
  11dc:35 05              ldi 5 
  11de:1a                 eq? 
  11df:30 0061            bnt code_1243 
  11e2:35 62              ldi 62 
  11e4:65 1a             aTop register 

        code_11e6
  11e6:67 1a             pTos register 
  11e8:35 00              ldi 0 
  11ea:20                 ge? 
  11eb:30 001c            bnt code_120a 
  11ee:39 04            pushi 4 // $4 x
  11f0:3c                 dup 
  11f1:78               push1 
  11f2:38 00ff          pushi ff // $ff syncNum
  11f5:67 1a             pTos register 
  11f7:43 6f 08         callk Palette 8 

  11fa:78               push1 
  11fb:39 04            pushi 4 // $4 x
  11fd:43 41 02         callk Wait 2 

  1200:67 1a             pTos register 
  1202:35 02              ldi 2 
  1204:04                 sub 
  1205:65 1a             aTop register 
  1207:32 ffdc            jmp code_11e6 

        code_120a
  120a:38 018c          pushi 18c // $18c drawPic
  120d:7a               push2 
  120e:38 0323          pushi 323 // $323 sel_803
  1211:39 64            pushi 64 // $64 moveDone
  1213:81 02              lag  
  1215:4a 08             send 8 

  1217:38 008e          pushi 8e // $8e setScript
  121a:78               push1 
  121b:76               push0 
  121c:38 008a          pushi 8a // $8a script
  121f:78               push1 
  1220:7c            pushSelf 
  1221:81 02              lag  
  1223:4a 0c             send c 

  1225:38 008a          pushi 8a // $8a script
  1228:78               push1 
  1229:76               push0 
  122a:72 164e          lofsa $164e // marian
  122d:4a 06             send 6 

  122f:81 02              lag  
  1231:65 08             aTop client 
  1233:39 74            pushi 74 // $74 eachElementDo
  1235:78               push1 
  1236:39 6c            pushi 6c // $6c dispose
  1238:81 05              lag  
  123a:4a 06             send 6 

  123c:35 03              ldi 3 
  123e:65 10             aTop cycles 
  1240:32 0024            jmp code_1267 

        code_1243
  1243:3c                 dup 
  1244:35 06              ldi 6 
  1246:1a                 eq? 
  1247:30 001d            bnt code_1267 
  124a:39 04            pushi 4 // $4 x
  124c:3c                 dup 
  124d:78               push1 
  124e:38 00ff          pushi ff // $ff syncNum
  1251:39 64            pushi 64 // $64 moveDone
  1253:43 6f 08         callk Palette 8 

  1256:78               push1 
  1257:39 05            pushi 5 // $5 view
  1259:45 06 02         callb procedure_0006 2 //  

  125c:38 0179          pushi 179 // $179 newRoom
  125f:78               push1 
  1260:38 00a0          pushi a0 // $a0 mute
  1263:81 02              lag  
  1265:4a 06             send 6 


        code_1267
  1267:3a                toss 
  1268:48                 ret 
    )

)

// 1648
(instance marian of Actor
    (properties
        x $87
        y $96
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $5
        yStep $2
        view $d4
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $4000
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (doVerb) // method_12d8
  12d8:8f 01              lsp param1 
  12da:3c                 dup 
  12db:35 03              ldi 3 
  12dd:1a                 eq? 
  12de:30 000d            bnt code_12ee 
  12e1:7a               push2 
  12e2:38 04ba          pushi 4ba // $4ba sel_1210
  12e5:39 0e            pushi e // $e lsLeft
  12e7:47 0d 04 04      calle d procedure_0004 4 //  

  12eb:32 0351            jmp code_163f 

        code_12ee
  12ee:3c                 dup 
  12ef:35 05              ldi 5 
  12f1:1a                 eq? 
  12f2:30 0119            bnt code_140e 
  12f5:89 82              lsg  
  12f7:3c                 dup 
  12f8:35 04              ldi 4 
  12fa:1a                 eq? 
  12fb:30 007c            bnt code_137a 
  12fe:38 00d5          pushi d5 // $d5 has
  1301:78               push1 
  1302:39 0f            pushi f // $f lsBottom
  1304:81 00              lag  
  1306:4a 06             send 6 

  1308:30 0019            bnt code_1324 
  130b:83 04              lal local4 
  130d:30 0014            bnt code_1324 
  1310:39 04            pushi 4 // $4 x
  1312:78               push1 
  1313:5b 02 1c           lea 2 1c 
  1316:36                push 
  1317:39 16            pushi 16 // $16 brRight
  1319:39 03            pushi 3 // $3 y
  131b:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1321:32 00e6            jmp code_140a 

        code_1324
  1324:38 00d5          pushi d5 // $d5 has
  1327:78               push1 
  1328:39 0f            pushi f // $f lsBottom
  132a:81 00              lag  
  132c:4a 06             send 6 

  132e:30 0018            bnt code_1349 
  1331:35 01              ldi 1 
  1333:a3 04              sal local4 
  1335:39 03            pushi 3 // $3 y
  1337:5b 02 17           lea 2 17 
  133a:36                push 
  133b:38 03e7          pushi 3e7 // $3e7 sel_999
  133e:39 16            pushi 16 // $16 brRight
  1340:46 0353 0000 06  calle 353 procedure_0000 6 //  

  1346:32 00c1            jmp code_140a 

        code_1349
  1349:83 05              lal local5 
  134b:30 0014            bnt code_1362 
  134e:39 04            pushi 4 // $4 x
  1350:78               push1 
  1351:5b 02 2e           lea 2 2e 
  1354:36                push 
  1355:39 16            pushi 16 // $16 brRight
  1357:39 03            pushi 3 // $3 y
  1359:46 0353 0000 08  calle 353 procedure_0000 8 //  

  135f:32 00a8            jmp code_140a 

        code_1362
  1362:35 01              ldi 1 
  1364:a3 05              sal local5 
  1366:39 03            pushi 3 // $3 y
  1368:5b 02 20           lea 2 20 
  136b:36                push 
  136c:38 03e7          pushi 3e7 // $3e7 sel_999
  136f:39 16            pushi 16 // $16 brRight
  1371:46 0353 0000 06  calle 353 procedure_0000 6 //  

  1377:32 0090            jmp code_140a 

        code_137a
  137a:3c                 dup 
  137b:35 07              ldi 7 
  137d:1a                 eq? 
  137e:30 0089            bnt code_140a 
  1381:78               push1 
  1382:39 22            pushi 22 // $22 type
  1384:45 05 02         callb procedure_0005 2 //  

  1387:18                 not 
  1388:30 0017            bnt code_13a2 
  138b:83 06              lal local6 
  138d:30 0012            bnt code_13a2 
  1390:39 03            pushi 3 // $3 y
  1392:5b 02 38           lea 2 38 
  1395:36                push 
  1396:39 16            pushi 16 // $16 brRight
  1398:76               push0 
  1399:46 0353 0000 06  calle 353 procedure_0000 6 //  

  139f:32 0068            jmp code_140a 

        code_13a2
  13a2:78               push1 
  13a3:39 22            pushi 22 // $22 type
  13a5:45 05 02         callb procedure_0005 2 //  

  13a8:18                 not 
  13a9:30 0014            bnt code_13c0 
  13ac:c3 06              +al local6 
  13ae:39 03            pushi 3 // $3 y
  13b0:5b 02 32           lea 2 32 
  13b3:36                push 
  13b4:78               push1 
  13b5:39 16            pushi 16 // $16 brRight
  13b7:46 0353 0000 06  calle 353 procedure_0000 6 //  

  13bd:32 004a            jmp code_140a 

        code_13c0
  13c0:8b 07              lsl local7 
  13c2:35 01              ldi 1 
  13c4:1e                 gt? 
  13c5:30 0010            bnt code_13d8 
  13c8:7a               push2 
  13c9:5b 02 4b           lea 2 4b 
  13cc:36                push 
  13cd:39 16            pushi 16 // $16 brRight
  13cf:46 0353 0000 04  calle 353 procedure_0000 4 //  

  13d5:32 0032            jmp code_140a 

        code_13d8
  13d8:8b 07              lsl local7 
  13da:35 01              ldi 1 
  13dc:1a                 eq? 
  13dd:30 0014            bnt code_13f4 
  13e0:c3 07              +al local7 
  13e2:39 03            pushi 3 // $3 y
  13e4:5b 02 43           lea 2 43 
  13e7:36                push 
  13e8:78               push1 
  13e9:39 16            pushi 16 // $16 brRight
  13eb:46 0353 0000 06  calle 353 procedure_0000 6 //  

  13f1:32 0016            jmp code_140a 

        code_13f4
  13f4:35 01              ldi 1 
  13f6:30 0011            bnt code_140a 
  13f9:c3 07              +al local7 
  13fb:39 03            pushi 3 // $3 y
  13fd:5b 02 3c           lea 2 3c 
  1400:36                push 
  1401:78               push1 
  1402:39 16            pushi 16 // $16 brRight
  1404:46 0353 0000 06  calle 353 procedure_0000 6 //  


        code_140a
  140a:3a                toss 
  140b:32 0231            jmp code_163f 

        code_140e
  140e:3c                 dup 
  140f:35 04              ldi 4 
  1411:1a                 eq? 
  1412:30 021f            bnt code_1634 
  1415:8f 02              lsp param2 
  1417:3c                 dup 
  1418:35 01              ldi 1 
  141a:1a                 eq? 
  141b:30 0012            bnt code_1430 
  141e:7a               push2 
  141f:5a 0002 0197       lea 2 197 
  1424:36                push 
  1425:39 16            pushi 16 // $16 brRight
  1427:46 0353 0000 04  calle 353 procedure_0000 4 //  

  142d:32 0200            jmp code_1630 

        code_1430
  1430:3c                 dup 
  1431:35 00              ldi 0 
  1433:1a                 eq? 
  1434:30 0012            bnt code_1449 
  1437:7a               push2 
  1438:5a 0002 019b       lea 2 19b 
  143d:36                push 
  143e:39 16            pushi 16 // $16 brRight
  1440:46 0353 0000 04  calle 353 procedure_0000 4 //  

  1446:32 01e7            jmp code_1630 

        code_1449
  1449:3c                 dup 
  144a:35 02              ldi 2 
  144c:1a                 eq? 
  144d:30 0077            bnt code_14c7 
  1450:89 82              lsg  
  1452:3c                 dup 
  1453:35 04              ldi 4 
  1455:1a                 eq? 
  1456:30 0022            bnt code_147b 
  1459:83 10              lal local16 
  145b:30 000e            bnt code_146c 
  145e:38 010c          pushi 10c // $10c doVerb
  1461:78               push1 
  1462:8f 01              lsp param1 
  1464:59 03            &rest 3 
  1466:57 30 06         super Actor 6 

  1469:32 0057            jmp code_14c3 

        code_146c
  146c:38 008e          pushi 8e // $8e setScript
  146f:78               push1 
  1470:72 19e8          lofsa $19e8 // giveEmerald
  1473:36                push 
  1474:81 02              lag  
  1476:4a 06             send 6 

  1478:32 0048            jmp code_14c3 

        code_147b
  147b:3c                 dup 
  147c:35 07              ldi 7 
  147e:1a                 eq? 
  147f:30 0041            bnt code_14c3 
  1482:83 10              lal local16 
  1484:30 000e            bnt code_1495 
  1487:38 010c          pushi 10c // $10c doVerb
  148a:78               push1 
  148b:8f 01              lsp param1 
  148d:59 03            &rest 3 
  148f:57 30 06         super Actor 6 

  1492:32 002e            jmp code_14c3 

        code_1495
  1495:78               push1 
  1496:38 008f          pushi 8f // $8f port
  1499:45 05 02         callb procedure_0005 2 //  

  149c:30 0018            bnt code_14b7 
  149f:78               push1 
  14a0:39 22            pushi 22 // $22 type
  14a2:45 05 02         callb procedure_0005 2 //  

  14a5:30 000f            bnt code_14b7 
  14a8:38 008e          pushi 8e // $8e setScript
  14ab:78               push1 
  14ac:72 1e88          lofsa $1e88 // sex
  14af:36                push 
  14b0:81 02              lag  
  14b2:4a 06             send 6 

  14b4:32 000c            jmp code_14c3 

        code_14b7
  14b7:38 008e          pushi 8e // $8e setScript
  14ba:78               push1 
  14bb:72 19e8          lofsa $19e8 // giveEmerald
  14be:36                push 
  14bf:81 02              lag  
  14c1:4a 06             send 6 


        code_14c3
  14c3:3a                toss 
  14c4:32 0169            jmp code_1630 

        code_14c7
  14c7:3c                 dup 
  14c8:35 0f              ldi f 
  14ca:1a                 eq? 
  14cb:30 000f            bnt code_14dd 
  14ce:38 008e          pushi 8e // $8e setScript
  14d1:78               push1 
  14d2:72 2780          lofsa $2780 // giveComb
  14d5:36                push 
  14d6:81 02              lag  
  14d8:4a 06             send 6 

  14da:32 0153            jmp code_1630 

        code_14dd
  14dd:3c                 dup 
  14de:35 0e              ldi e 
  14e0:1a                 eq? 
  14e1:30 0014            bnt code_14f8 
  14e4:39 03            pushi 3 // $3 y
  14e6:5a 0002 011a       lea 2 11a 
  14eb:36                push 
  14ec:78               push1 
  14ed:39 16            pushi 16 // $16 brRight
  14ef:46 0353 0000 06  calle 353 procedure_0000 6 //  

  14f5:32 0138            jmp code_1630 

        code_14f8
  14f8:3c                 dup 
  14f9:35 0c              ldi c 
  14fb:1a                 eq? 
  14fc:30 0033            bnt code_1532 
  14ff:83 08              lal local8 
  1501:30 0016            bnt code_151a 
  1504:39 04            pushi 4 // $4 x
  1506:78               push1 
  1507:5a 0002 0129       lea 2 129 
  150c:36                push 
  150d:39 16            pushi 16 // $16 brRight
  150f:39 03            pushi 3 // $3 y
  1511:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1517:32 0116            jmp code_1630 

        code_151a
  151a:35 01              ldi 1 
  151c:a3 08              sal local8 
  151e:39 03            pushi 3 // $3 y
  1520:5a 0002 011f       lea 2 11f 
  1525:36                push 
  1526:78               push1 
  1527:39 16            pushi 16 // $16 brRight
  1529:46 0353 0000 06  calle 353 procedure_0000 6 //  

  152f:32 00fe            jmp code_1630 

        code_1532
  1532:3c                 dup 
  1533:35 0a              ldi a 
  1535:1a                 eq? 
  1536:30 002f            bnt code_1568 
  1539:89 82              lsg  
  153b:35 07              ldi 7 
  153d:1a                 eq? 
  153e:30 00ef            bnt code_1630 
  1541:83 09              lal local9 
  1543:30 000e            bnt code_1554 
  1546:7a               push2 
  1547:38 04ba          pushi 4ba // $4ba sel_1210
  154a:38 00aa          pushi aa // $aa setSize
  154d:47 0d 04 04      calle d procedure_0004 4 //  

  1551:32 00dc            jmp code_1630 

        code_1554
  1554:39 03            pushi 3 // $3 y
  1556:5a 0002 012d       lea 2 12d 
  155b:36                push 
  155c:78               push1 
  155d:39 16            pushi 16 // $16 brRight
  155f:46 0353 0000 06  calle 353 procedure_0000 6 //  

  1565:32 00c8            jmp code_1630 

        code_1568
  1568:3c                 dup 
  1569:35 11              ldi 11 
  156b:1a                 eq? 
  156c:30 002e            bnt code_159d 
  156f:78               push1 
  1570:39 22            pushi 22 // $22 type
  1572:45 05 02         callb procedure_0005 2 //  

  1575:30 0016            bnt code_158e 
  1578:39 04            pushi 4 // $4 x
  157a:78               push1 
  157b:5a 0002 01f6       lea 2 1f6 
  1580:36                push 
  1581:39 16            pushi 16 // $16 brRight
  1583:39 03            pushi 3 // $3 y
  1585:46 0353 0000 08  calle 353 procedure_0000 8 //  

  158b:32 00a2            jmp code_1630 

        code_158e
  158e:38 008e          pushi 8e // $8e setScript
  1591:78               push1 
  1592:72 2e08          lofsa $2e08 // giveScroll
  1595:36                push 
  1596:81 02              lag  
  1598:4a 06             send 6 

  159a:32 0093            jmp code_1630 

        code_159d
  159d:3c                 dup 
  159e:35 10              ldi 10 
  15a0:1a                 eq? 
  15a1:30 000f            bnt code_15b3 
  15a4:38 008e          pushi 8e // $8e setScript
  15a7:78               push1 
  15a8:72 32d2          lofsa $32d2 // giveFScroll
  15ab:36                push 
  15ac:81 02              lag  
  15ae:4a 06             send 6 

  15b0:32 007d            jmp code_1630 

        code_15b3
  15b3:3c                 dup 
  15b4:35 12              ldi 12 
  15b6:1a                 eq? 
  15b7:30 004e            bnt code_1608 
  15ba:89 82              lsg  
  15bc:3c                 dup 
  15bd:35 07              ldi 7 
  15bf:1a                 eq? 
  15c0:30 002f            bnt code_15f2 
  15c3:83 0b              lal local11 
  15c5:30 0016            bnt code_15de 
  15c8:39 04            pushi 4 // $4 x
  15ca:78               push1 
  15cb:5a 0002 0152       lea 2 152 
  15d0:36                push 
  15d1:39 16            pushi 16 // $16 brRight
  15d3:39 03            pushi 3 // $3 y
  15d5:46 0353 0000 08  calle 353 procedure_0000 8 //  

  15db:32 0026            jmp code_1604 

        code_15de
  15de:39 03            pushi 3 // $3 y
  15e0:5a 0002 014a       lea 2 14a 
  15e5:36                push 
  15e6:78               push1 
  15e7:39 16            pushi 16 // $16 brRight
  15e9:46 0353 0000 06  calle 353 procedure_0000 6 //  

  15ef:32 0012            jmp code_1604 

        code_15f2
  15f2:3c                 dup 
  15f3:35 0a              ldi a 
  15f5:1a                 eq? 
  15f6:30 000b            bnt code_1604 
  15f9:7a               push2 
  15fa:38 04ba          pushi 4ba // $4ba sel_1210
  15fd:38 00b2          pushi b2 // $b2 retreat
  1600:47 0d 04 04      calle d procedure_0004 4 //  


        code_1604
  1604:3a                toss 
  1605:32 0028            jmp code_1630 

        code_1608
  1608:3c                 dup 
  1609:35 04              ldi 4 
  160b:1a                 eq? 
  160c:30 0016            bnt code_1625 
  160f:39 04            pushi 4 // $4 x
  1611:78               push1 
  1612:5a 0002 0156       lea 2 156 
  1617:36                push 
  1618:39 16            pushi 16 // $16 brRight
  161a:39 03            pushi 3 // $3 y
  161c:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1622:32 000b            jmp code_1630 

        code_1625
  1625:38 010c          pushi 10c // $10c doVerb
  1628:78               push1 
  1629:8f 01              lsp param1 
  162b:59 03            &rest 3 
  162d:57 30 06         super Actor 6 


        code_1630
  1630:3a                toss 
  1631:32 000b            jmp code_163f 

        code_1634
  1634:38 010c          pushi 10c // $10c doVerb
  1637:7a               push2 
  1638:8f 01              lsp param1 
  163a:8f 02              lsp param2 
  163c:57 30 08         super Actor 8 


        code_163f
  163f:3a                toss 
  1640:48                 ret 
  1641:00                bnot 
    )

)

// 19e2
(instance giveEmerald of TScript
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
        notKilled $1
    )
    (method (changeState) // method_16c8
  16c8:3f 02             link 2 // (var $2)
  16ca:87 01              lap param1 
  16cc:65 0a             aTop state 
  16ce:36                push 
  16cf:3c                 dup 
  16d0:35 00              ldi 0 
  16d2:1a                 eq? 
  16d3:30 0052            bnt code_1728 
  16d6:76               push0 
  16d7:45 03 00         callb procedure_0003 0 //  

  16da:38 0133          pushi 133 // $133 onControl
  16dd:78               push1 
  16de:78               push1 
  16df:81 00              lag  
  16e1:4a 06             send 6 

  16e3:36                push 
  16e4:35 04              ldi 4 
  16e6:12                 and 
  16e7:18                 not 
  16e8:30 0013            bnt code_16fe 
  16eb:38 008e          pushi 8e // $8e setScript
  16ee:7a               push2 
  16ef:72 0910          lofsa $0910 // disarm
  16f2:36                push 
  16f3:7c            pushSelf 
  16f4:54 08             self 8 

  16f6:35 04              ldi 4 
  16f8:a2 01ae            sal local430 
  16fb:6d 0a            dpToa state 
  16fd:48                 ret 

        code_16fe
  16fe:38 011b          pushi 11b // $11b setMotion
  1701:39 04            pushi 4 // $4 x
  1703:51 24            class PolyPath 
  1705:36                push 
  1706:39 04            pushi 4 // $4 x
  1708:76               push0 
  1709:72 164e          lofsa $164e // marian
  170c:4a 04             send 4 

  170e:36                push 
  170f:35 1c              ldi 1c 
  1711:02                 add 
  1712:36                push 
  1713:39 03            pushi 3 // $3 y
  1715:76               push0 
  1716:72 164e          lofsa $164e // marian
  1719:4a 04             send 4 

  171b:36                push 
  171c:35 ff              ldi ff 
  171e:02                 add 
  171f:36                push 
  1720:7c            pushSelf 
  1721:81 00              lag  
  1723:4a 0c             send c 

  1725:32 02b1            jmp code_19d9 

        code_1728
  1728:3c                 dup 
  1729:35 01              ldi 1 
  172b:1a                 eq? 
  172c:30 0027            bnt code_1756 
  172f:35 01              ldi 1 
  1731:65 22             aTop notKilled 
  1733:38 00a2          pushi a2 // $a2 setLoop
  1736:78               push1 
  1737:78               push1 
  1738:81 00              lag  
  173a:4a 06             send 6 

  173c:39 06            pushi 6 // $6 loop
  173e:78               push1 
  173f:76               push0 
  1740:72 164e          lofsa $164e // marian
  1743:4a 06             send 6 

  1745:7a               push2 
  1746:38 0080          pushi 80 // $80 indexOf
  1749:38 00d7          pushi d7 // $d7 completed
  174c:43 00 04         callk Load 4 

  174f:35 14              ldi 14 
  1751:65 16             aTop ticks 
  1753:32 0283            jmp code_19d9 

        code_1756
  1756:3c                 dup 
  1757:35 02              ldi 2 
  1759:1a                 eq? 
  175a:30 0041            bnt code_179e 
  175d:39 69            pushi 69 // $69 hide
  175f:76               push0 
  1760:72 164e          lofsa $164e // marian
  1763:4a 04             send 4 

  1765:39 05            pushi 5 // $5 view
  1767:78               push1 
  1768:38 00d7          pushi d7 // $d7 completed
  176b:38 00db          pushi db // $db cycleSpeed
  176e:78               push1 
  176f:39 06            pushi 6 // $6 loop
  1771:38 00a2          pushi a2 // $a2 setLoop
  1774:78               push1 
  1775:76               push0 
  1776:38 0120          pushi 120 // $120 setCel
  1779:78               push1 
  177a:76               push0 
  177b:38 011c          pushi 11c // $11c posn
  177e:7a               push2 
  177f:39 04            pushi 4 // $4 x
  1781:76               push0 
  1782:81 00              lag  
  1784:4a 04             send 4 

  1786:36                push 
  1787:35 07              ldi 7 
  1789:04                 sub 
  178a:36                push 
  178b:39 03            pushi 3 // $3 y
  178d:76               push0 
  178e:81 00              lag  
  1790:4a 04             send 4 

  1792:36                push 
  1793:81 00              lag  
  1795:4a 20             send 20 

  1797:35 28              ldi 28 
  1799:65 16             aTop ticks 
  179b:32 023b            jmp code_19d9 

        code_179e
  179e:3c                 dup 
  179f:35 03              ldi 3 
  17a1:1a                 eq? 
  17a2:30 005c            bnt code_1801 
  17a5:38 011c          pushi 11c // $11c posn
  17a8:7a               push2 
  17a9:39 04            pushi 4 // $4 x
  17ab:76               push0 
  17ac:81 00              lag  
  17ae:4a 04             send 4 

  17b0:36                push 
  17b1:35 07              ldi 7 
  17b3:02                 add 
  17b4:36                push 
  17b5:39 03            pushi 3 // $3 y
  17b7:76               push0 
  17b8:81 00              lag  
  17ba:4a 04             send 4 

  17bc:36                push 
  17bd:81 00              lag  
  17bf:4a 08             send 8 

  17c1:39 03            pushi 3 // $3 y
  17c3:78               push1 
  17c4:38 02be          pushi 2be // $2be sel_702
  17c7:38 02bf          pushi 2bf // $2bf sel_703
  17ca:45 02 06         callb procedure_0002 6 //  

  17cd:39 05            pushi 5 // $5 view
  17cf:78               push1 
  17d0:38 00d7          pushi d7 // $d7 completed
  17d3:39 04            pushi 4 // $4 x
  17d5:78               push1 
  17d6:39 04            pushi 4 // $4 x
  17d8:76               push0 
  17d9:72 164e          lofsa $164e // marian
  17dc:4a 04             send 4 

  17de:36                push 
  17df:35 01              ldi 1 
  17e1:02                 add 
  17e2:36                push 
  17e3:39 06            pushi 6 // $6 loop
  17e5:78               push1 
  17e6:39 04            pushi 4 // $4 x
  17e8:39 07            pushi 7 // $7 cel
  17ea:78               push1 
  17eb:39 03            pushi 3 // $3 y
  17ed:38 00c2          pushi c2 // $c2 show
  17f0:76               push0 
  17f1:38 0096          pushi 96 // $96 setCycle
  17f4:7a               push2 
  17f5:51 1a            class End 
  17f7:36                push 
  17f8:7c            pushSelf 
  17f9:72 164e          lofsa $164e // marian
  17fc:4a 24             send 24 

  17fe:32 01d8            jmp code_19d9 

        code_1801
  1801:3c                 dup 
  1802:35 04              ldi 4 
  1804:1a                 eq? 
  1805:30 00ca            bnt code_18d2 
  1808:39 05            pushi 5 // $5 view
  180a:78               push1 
  180b:38 00d3          pushi d3 // $d3 helpIconItem
  180e:39 04            pushi 4 // $4 x
  1810:78               push1 
  1811:39 04            pushi 4 // $4 x
  1813:76               push0 
  1814:72 164e          lofsa $164e // marian
  1817:4a 04             send 4 

  1819:36                push 
  181a:35 ff              ldi ff 
  181c:02                 add 
  181d:36                push 
  181e:39 06            pushi 6 // $6 loop
  1820:78               push1 
  1821:76               push0 
  1822:38 0096          pushi 96 // $96 setCycle
  1825:7a               push2 
  1826:51 56            class StopWalk 
  1828:36                push 
  1829:38 00d4          pushi d4 // $d4 activateHeight
  182c:72 164e          lofsa $164e // marian
  182f:4a 1a             send 1a 

  1831:38 00d5          pushi d5 // $d5 has
  1834:78               push1 
  1835:39 0f            pushi f // $f lsBottom
  1837:81 00              lag  
  1839:4a 06             send 6 

  183b:2e 000f             bt code_184d 
  183e:89 82              lsg  
  1840:35 07              ldi 7 
  1842:1a                 eq? 
  1843:30 0056            bnt code_189c 
  1846:78               push1 
  1847:39 22            pushi 22 // $22 type
  1849:45 05 02         callb procedure_0005 2 //  

  184c:18                 not 

        code_184d
  184d:30 004c            bnt code_189c 
  1850:89 82              lsg  
  1852:35 04              ldi 4 
  1854:1a                 eq? 
  1855:30 0010            bnt code_1868 
  1858:7a               push2 
  1859:5b 02 4f           lea 2 4f 
  185c:36                push 
  185d:39 16            pushi 16 // $16 brRight
  185f:46 0353 0000 04  calle 353 procedure_0000 4 //  

  1865:32 0027            jmp code_188f 

        code_1868
  1868:78               push1 
  1869:38 008f          pushi 8f // $8f port
  186c:45 05 02         callb procedure_0005 2 //  

  186f:30 0010            bnt code_1882 
  1872:7a               push2 
  1873:5b 02 9e           lea 2 9e 
  1876:36                push 
  1877:39 16            pushi 16 // $16 brRight
  1879:46 0353 0000 04  calle 353 procedure_0000 4 //  

  187f:32 000d            jmp code_188f 

        code_1882
  1882:7a               push2 
  1883:5b 02 9a           lea 2 9a 
  1886:36                push 
  1887:39 16            pushi 16 // $16 brRight
  1889:46 0353 0000 04  calle 353 procedure_0000 4 //  


        code_188f
  188f:76               push0 
  1890:40 e952 00        call proc_01e6 0 

  1894:39 6c            pushi 6c // $6c dispose
  1896:76               push0 
  1897:54 04             self 4 

  1899:32 002f            jmp code_18cb 

        code_189c
  189c:7a               push2 
  189d:39 32            pushi 32 // $32 b-i2
  189f:38 008f          pushi 8f // $8f port
  18a2:46 0326 0001 04  calle 326 procedure_0001 4 //  

  18a8:35 01              ldi 1 
  18aa:a3 10              sal local16 
  18ac:83 12              lal local18 
  18ae:30 0014            bnt code_18c5 
  18b1:39 05            pushi 5 // $5 view
  18b3:5b 02 53           lea 2 53 
  18b6:36                push 
  18b7:39 16            pushi 16 // $16 brRight
  18b9:78               push1 
  18ba:7c            pushSelf 
  18bb:76               push0 
  18bc:46 0353 0000 0a  calle 353 procedure_0000 a //  

  18c2:32 0006            jmp code_18cb 

        code_18c5
  18c5:6b 0a            ipToa state 
  18c7:35 01              ldi 1 
  18c9:65 10             aTop cycles 

        code_18cb
  18cb:35 01              ldi 1 
  18cd:a3 12              sal local18 
  18cf:32 0107            jmp code_19d9 

        code_18d2
  18d2:3c                 dup 
  18d3:35 05              ldi 5 
  18d5:1a                 eq? 
  18d6:30 0039            bnt code_1912 
  18d9:89 82              lsg  
  18db:3c                 dup 
  18dc:35 04              ldi 4 
  18de:1a                 eq? 
  18df:30 0014            bnt code_18f6 
  18e2:39 05            pushi 5 // $5 view
  18e4:5b 02 57           lea 2 57 
  18e7:36                push 
  18e8:39 16            pushi 16 // $16 brRight
  18ea:78               push1 
  18eb:7c            pushSelf 
  18ec:76               push0 
  18ed:46 0353 0000 0a  calle 353 procedure_0000 a //  

  18f3:32 0018            jmp code_190e 

        code_18f6
  18f6:3c                 dup 
  18f7:35 07              ldi 7 
  18f9:1a                 eq? 
  18fa:30 0011            bnt code_190e 
  18fd:39 05            pushi 5 // $5 view
  18ff:5b 02 5b           lea 2 5b 
  1902:36                push 
  1903:39 16            pushi 16 // $16 brRight
  1905:78               push1 
  1906:7c            pushSelf 
  1907:76               push0 
  1908:46 0353 0000 0a  calle 353 procedure_0000 a //  


        code_190e
  190e:3a                toss 
  190f:32 00c7            jmp code_19d9 

        code_1912
  1912:3c                 dup 
  1913:35 06              ldi 6 
  1915:1a                 eq? 
  1916:30 0013            bnt code_192c 
  1919:39 04            pushi 4 // $4 x
  191b:5b 02 5f           lea 2 5f 
  191e:36                push 
  191f:39 16            pushi 16 // $16 brRight
  1921:78               push1 
  1922:7c            pushSelf 
  1923:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1929:32 00ad            jmp code_19d9 

        code_192c
  192c:3c                 dup 
  192d:35 07              ldi 7 
  192f:1a                 eq? 
  1930:30 000e            bnt code_1941 
  1933:38 008e          pushi 8e // $8e setScript
  1936:7a               push2 
  1937:72 256c          lofsa $256c // unite
  193a:36                push 
  193b:7c            pushSelf 
  193c:54 08             self 8 

  193e:32 0098            jmp code_19d9 

        code_1941
  1941:3c                 dup 
  1942:35 08              ldi 8 
  1944:1a                 eq? 
  1945:30 0014            bnt code_195c 
  1948:39 05            pushi 5 // $5 view
  194a:5b 02 6b           lea 2 6b 
  194d:36                push 
  194e:39 16            pushi 16 // $16 brRight
  1950:78               push1 
  1951:7c            pushSelf 
  1952:76               push0 
  1953:46 0353 0000 0a  calle 353 procedure_0000 a //  

  1959:32 007d            jmp code_19d9 

        code_195c
  195c:3c                 dup 
  195d:35 09              ldi 9 
  195f:1a                 eq? 
  1960:30 0037            bnt code_199a 
  1963:89 82              lsg  
  1965:3c                 dup 
  1966:35 04              ldi 4 
  1968:1a                 eq? 
  1969:30 0013            bnt code_197f 
  196c:39 04            pushi 4 // $4 x
  196e:5b 02 78           lea 2 78 
  1971:36                push 
  1972:39 16            pushi 16 // $16 brRight
  1974:78               push1 
  1975:7c            pushSelf 
  1976:46 0353 0000 08  calle 353 procedure_0000 8 //  

  197c:32 0017            jmp code_1996 

        code_197f
  197f:3c                 dup 
  1980:35 07              ldi 7 
  1982:1a                 eq? 
  1983:30 0010            bnt code_1996 
  1986:39 04            pushi 4 // $4 x
  1988:5b 02 7c           lea 2 7c 
  198b:36                push 
  198c:39 16            pushi 16 // $16 brRight
  198e:78               push1 
  198f:7c            pushSelf 
  1990:46 0353 0000 08  calle 353 procedure_0000 8 //  


        code_1996
  1996:3a                toss 
  1997:32 003f            jmp code_19d9 

        code_199a
  199a:3c                 dup 
  199b:35 0a              ldi a 
  199d:1a                 eq? 
  199e:30 0038            bnt code_19d9 
  19a1:89 82              lsg  
  19a3:35 04              ldi 4 
  19a5:1a                 eq? 
  19a6:30 000b            bnt code_19b4 
  19a9:38 00d5          pushi d5 // $d5 has
  19ac:78               push1 
  19ad:39 0f            pushi f // $f lsBottom
  19af:81 00              lag  
  19b1:4a 06             send 6 

  19b3:18                 not 

        code_19b4
  19b4:2e 0006             bt code_19bd 
  19b7:78               push1 
  19b8:39 22            pushi 22 // $22 type
  19ba:45 06 02         callb procedure_0006 2 //  


        code_19bd
  19bd:30 000f            bnt code_19cf 
  19c0:38 008e          pushi 8e // $8e setScript
  19c3:78               push1 
  19c4:72 1aaa          lofsa $1aaa // thereSheGoes
  19c7:36                push 
  19c8:81 02              lag  
  19ca:4a 06             send 6 

  19cc:32 0005            jmp code_19d4 

        code_19cf
  19cf:76               push0 
  19d0:40 e812 00        call proc_01e6 0 


        code_19d4
  19d4:39 6c            pushi 6c // $6c dispose
  19d6:76               push0 
  19d7:54 04             self 4 


        code_19d9
  19d9:3a                toss 
  19da:48                 ret 
  19db:00                bnot 
    )

)

// 1aa4
(instance thereSheGoes of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1a18
  1a18:3f 02             link 2 // (var $2)
  1a1a:87 01              lap param1 
  1a1c:65 0a             aTop state 
  1a1e:36                push 
  1a1f:3c                 dup 
  1a20:35 00              ldi 0 
  1a22:1a                 eq? 
  1a23:30 0021            bnt code_1a47 
  1a26:76               push0 
  1a27:45 03 00         callb procedure_0003 0 //  

  1a2a:38 0096          pushi 96 // $96 setCycle
  1a2d:78               push1 
  1a2e:51 18            class Walk 
  1a30:36                push 
  1a31:38 011b          pushi 11b // $11b setMotion
  1a34:39 04            pushi 4 // $4 x
  1a36:51 24            class PolyPath 
  1a38:36                push 
  1a39:39 72            pushi 72 // $72 yourself
  1a3b:38 00b1          pushi b1 // $b1 advance
  1a3e:7c            pushSelf 
  1a3f:72 164e          lofsa $164e // marian
  1a42:4a 12             send 12 

  1a44:32 0054            jmp code_1a9b 

        code_1a47
  1a47:3c                 dup 
  1a48:35 01              ldi 1 
  1a4a:1a                 eq? 
  1a4b:30 0016            bnt code_1a64 
  1a4e:38 011b          pushi 11b // $11b setMotion
  1a51:39 04            pushi 4 // $4 x
  1a53:51 24            class PolyPath 
  1a55:36                push 
  1a56:39 6e            pushi 6e // $6e showSelf
  1a58:38 00f5          pushi f5 // $f5 counter
  1a5b:7c            pushSelf 
  1a5c:72 164e          lofsa $164e // marian
  1a5f:4a 0c             send c 

  1a61:32 0037            jmp code_1a9b 

        code_1a64
  1a64:3c                 dup 
  1a65:35 02              ldi 2 
  1a67:1a                 eq? 
  1a68:30 0030            bnt code_1a9b 
  1a6b:35 00              ldi 0 
  1a6d:a3 01              sal local1 
  1a6f:a3 02              sal local2 
  1a71:39 6c            pushi 6c // $6c dispose
  1a73:76               push0 
  1a74:72 164e          lofsa $164e // marian
  1a77:4a 04             send 4 

  1a79:39 54            pushi 54 // $54 delete
  1a7b:78               push1 
  1a7c:8a 01b0            lsl local432 
  1a7f:38 00ea          pushi ea // $ea obstacles
  1a82:76               push0 
  1a83:81 02              lag  
  1a85:4a 04             send 4 

  1a87:4a 06             send 6 

  1a89:39 6c            pushi 6c // $6c dispose
  1a8b:76               push0 
  1a8c:82 01b0            lal local432 
  1a8f:4a 04             send 4 

  1a91:76               push0 
  1a92:40 e750 00        call proc_01e6 0 

  1a96:39 6c            pushi 6c // $6c dispose
  1a98:76               push0 
  1a99:54 04             self 4 


        code_1a9b
  1a9b:3a                toss 
  1a9c:48                 ret 
  1a9d:00                bnot 
    )

)

// 1e82
(instance sex of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1ad8
  1ad8:3f 02             link 2 // (var $2)
  1ada:87 01              lap param1 
  1adc:65 0a             aTop state 
  1ade:36                push 
  1adf:3c                 dup 
  1ae0:35 00              ldi 0 
  1ae2:1a                 eq? 
  1ae3:30 0052            bnt code_1b38 
  1ae6:76               push0 
  1ae7:45 03 00         callb procedure_0003 0 //  

  1aea:38 0133          pushi 133 // $133 onControl
  1aed:78               push1 
  1aee:78               push1 
  1aef:81 00              lag  
  1af1:4a 06             send 6 

  1af3:36                push 
  1af4:35 04              ldi 4 
  1af6:12                 and 
  1af7:18                 not 
  1af8:30 0013            bnt code_1b0e 
  1afb:38 008e          pushi 8e // $8e setScript
  1afe:7a               push2 
  1aff:72 0910          lofsa $0910 // disarm
  1b02:36                push 
  1b03:7c            pushSelf 
  1b04:54 08             self 8 

  1b06:35 04              ldi 4 
  1b08:a2 01ae            sal local430 
  1b0b:6d 0a            dpToa state 
  1b0d:48                 ret 

        code_1b0e
  1b0e:38 011b          pushi 11b // $11b setMotion
  1b11:39 04            pushi 4 // $4 x
  1b13:51 24            class PolyPath 
  1b15:36                push 
  1b16:39 04            pushi 4 // $4 x
  1b18:76               push0 
  1b19:72 164e          lofsa $164e // marian
  1b1c:4a 04             send 4 

  1b1e:36                push 
  1b1f:35 15              ldi 15 
  1b21:02                 add 
  1b22:36                push 
  1b23:39 03            pushi 3 // $3 y
  1b25:76               push0 
  1b26:72 164e          lofsa $164e // marian
  1b29:4a 04             send 4 

  1b2b:36                push 
  1b2c:35 fb              ldi fb 
  1b2e:02                 add 
  1b2f:36                push 
  1b30:7c            pushSelf 
  1b31:81 00              lag  
  1b33:4a 0c             send c 

  1b35:32 0342            jmp code_1e7a 

        code_1b38
  1b38:3c                 dup 
  1b39:35 01              ldi 1 
  1b3b:1a                 eq? 
  1b3c:30 000f            bnt code_1b4e 
  1b3f:38 00e4          pushi e4 // $e4 setHeading
  1b42:7a               push2 
  1b43:38 010e          pushi 10e // $10e description
  1b46:7c            pushSelf 
  1b47:81 00              lag  
  1b49:4a 08             send 8 

  1b4b:32 032c            jmp code_1e7a 

        code_1b4e
  1b4e:3c                 dup 
  1b4f:35 02              ldi 2 
  1b51:1a                 eq? 
  1b52:30 0007            bnt code_1b5c 
  1b55:35 02              ldi 2 
  1b57:65 10             aTop cycles 
  1b59:32 031e            jmp code_1e7a 

        code_1b5c
  1b5c:3c                 dup 
  1b5d:35 03              ldi 3 
  1b5f:1a                 eq? 
  1b60:30 0013            bnt code_1b76 
  1b63:39 04            pushi 4 // $4 x
  1b65:5b 02 80           lea 2 80 
  1b68:36                push 
  1b69:78               push1 
  1b6a:39 16            pushi 16 // $16 brRight
  1b6c:7c            pushSelf 
  1b6d:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1b73:32 0304            jmp code_1e7a 

        code_1b76
  1b76:3c                 dup 
  1b77:35 04              ldi 4 
  1b79:1a                 eq? 
  1b7a:30 0047            bnt code_1bc4 
  1b7d:39 05            pushi 5 // $5 view
  1b7f:78               push1 
  1b80:38 00d9          pushi d9 // $d9 cycleDone
  1b83:39 06            pushi 6 // $6 loop
  1b85:78               push1 
  1b86:39 07            pushi 7 // $7 cel
  1b88:3c                 dup 
  1b89:78               push1 
  1b8a:76               push0 
  1b8b:38 011c          pushi 11c // $11c posn
  1b8e:7a               push2 
  1b8f:39 04            pushi 4 // $4 x
  1b91:76               push0 
  1b92:81 00              lag  
  1b94:4a 04             send 4 

  1b96:36                push 
  1b97:35 12              ldi 12 
  1b99:04                 sub 
  1b9a:36                push 
  1b9b:39 03            pushi 3 // $3 y
  1b9d:76               push0 
  1b9e:81 00              lag  
  1ba0:4a 04             send 4 

  1ba2:36                push 
  1ba3:35 03              ldi 3 
  1ba5:02                 add 
  1ba6:36                push 
  1ba7:38 00db          pushi db // $db cycleSpeed
  1baa:78               push1 
  1bab:39 0f            pushi f // $f lsBottom
  1bad:38 0096          pushi 96 // $96 setCycle
  1bb0:7a               push2 
  1bb1:51 1a            class End 
  1bb3:36                push 
  1bb4:7c            pushSelf 
  1bb5:72 164e          lofsa $164e // marian
  1bb8:4a 28             send 28 

  1bba:39 6c            pushi 6c // $6c dispose
  1bbc:76               push0 
  1bbd:81 00              lag  
  1bbf:4a 04             send 4 

  1bc1:32 02b6            jmp code_1e7a 

        code_1bc4
  1bc4:3c                 dup 
  1bc5:35 05              ldi 5 
  1bc7:1a                 eq? 
  1bc8:30 0028            bnt code_1bf3 
  1bcb:39 04            pushi 4 // $4 x
  1bcd:78               push1 
  1bce:39 04            pushi 4 // $4 x
  1bd0:76               push0 
  1bd1:72 164e          lofsa $164e // marian
  1bd4:4a 04             send 4 

  1bd6:36                push 
  1bd7:35 0f              ldi f 
  1bd9:02                 add 
  1bda:36                push 
  1bdb:39 06            pushi 6 // $6 loop
  1bdd:78               push1 
  1bde:78               push1 
  1bdf:39 07            pushi 7 // $7 cel
  1be1:78               push1 
  1be2:76               push0 
  1be3:38 0096          pushi 96 // $96 setCycle
  1be6:7a               push2 
  1be7:51 1a            class End 
  1be9:36                push 
  1bea:7c            pushSelf 
  1beb:72 164e          lofsa $164e // marian
  1bee:4a 1a             send 1a 

  1bf0:32 0287            jmp code_1e7a 

        code_1bf3
  1bf3:3c                 dup 
  1bf4:35 06              ldi 6 
  1bf6:1a                 eq? 
  1bf7:30 0007            bnt code_1c01 
  1bfa:35 64              ldi 64 
  1bfc:65 16             aTop ticks 
  1bfe:32 0279            jmp code_1e7a 

        code_1c01
  1c01:3c                 dup 
  1c02:35 07              ldi 7 
  1c04:1a                 eq? 
  1c05:30 0010            bnt code_1c18 
  1c08:38 0096          pushi 96 // $96 setCycle
  1c0b:7a               push2 
  1c0c:51 1b            class Beg 
  1c0e:36                push 
  1c0f:7c            pushSelf 
  1c10:72 164e          lofsa $164e // marian
  1c13:4a 08             send 8 

  1c15:32 0262            jmp code_1e7a 

        code_1c18
  1c18:3c                 dup 
  1c19:35 08              ldi 8 
  1c1b:1a                 eq? 
  1c1c:30 0007            bnt code_1c26 
  1c1f:35 2d              ldi 2d 
  1c21:65 16             aTop ticks 
  1c23:32 0254            jmp code_1e7a 

        code_1c26
  1c26:3c                 dup 
  1c27:35 09              ldi 9 
  1c29:1a                 eq? 
  1c2a:30 0013            bnt code_1c40 
  1c2d:39 04            pushi 4 // $4 x
  1c2f:5b 02 8f           lea 2 8f 
  1c32:36                push 
  1c33:39 16            pushi 16 // $16 brRight
  1c35:76               push0 
  1c36:7c            pushSelf 
  1c37:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1c3d:32 023a            jmp code_1e7a 

        code_1c40
  1c40:3c                 dup 
  1c41:35 0a              ldi a 
  1c43:1a                 eq? 
  1c44:30 0007            bnt code_1c4e 
  1c47:35 02              ldi 2 
  1c49:65 12             aTop seconds 
  1c4b:32 022c            jmp code_1e7a 

        code_1c4e
  1c4e:3c                 dup 
  1c4f:35 0b              ldi b 
  1c51:1a                 eq? 
  1c52:30 001f            bnt code_1c74 
  1c55:39 06            pushi 6 // $6 loop
  1c57:78               push1 
  1c58:39 03            pushi 3 // $3 y
  1c5a:39 07            pushi 7 // $7 cel
  1c5c:78               push1 
  1c5d:76               push0 
  1c5e:38 00db          pushi db // $db cycleSpeed
  1c61:78               push1 
  1c62:39 0c            pushi c // $c nsRight
  1c64:38 0096          pushi 96 // $96 setCycle
  1c67:7a               push2 
  1c68:51 1a            class End 
  1c6a:36                push 
  1c6b:7c            pushSelf 
  1c6c:72 164e          lofsa $164e // marian
  1c6f:4a 1a             send 1a 

  1c71:32 0206            jmp code_1e7a 

        code_1c74
  1c74:3c                 dup 
  1c75:35 0c              ldi c 
  1c77:1a                 eq? 
  1c78:30 001d            bnt code_1c98 
  1c7b:39 06            pushi 6 // $6 loop
  1c7d:78               push1 
  1c7e:39 05            pushi 5 // $5 view
  1c80:39 07            pushi 7 // $7 cel
  1c82:78               push1 
  1c83:76               push0 
  1c84:38 0096          pushi 96 // $96 setCycle
  1c87:39 04            pushi 4 // $4 x
  1c89:51 19            class CT 
  1c8b:36                push 
  1c8c:39 07            pushi 7 // $7 cel
  1c8e:78               push1 
  1c8f:7c            pushSelf 
  1c90:72 164e          lofsa $164e // marian
  1c93:4a 18             send 18 

  1c95:32 01e2            jmp code_1e7a 

        code_1c98
  1c98:3c                 dup 
  1c99:35 0d              ldi d 
  1c9b:1a                 eq? 
  1c9c:30 0016            bnt code_1cb5 
  1c9f:38 00db          pushi db // $db cycleSpeed
  1ca2:78               push1 
  1ca3:39 23            pushi 23 // $23 window
  1ca5:38 0096          pushi 96 // $96 setCycle
  1ca8:7a               push2 
  1ca9:51 1a            class End 
  1cab:36                push 
  1cac:7c            pushSelf 
  1cad:72 164e          lofsa $164e // marian
  1cb0:4a 0e             send e 

  1cb2:32 01c5            jmp code_1e7a 

        code_1cb5
  1cb5:3c                 dup 
  1cb6:35 0e              ldi e 
  1cb8:1a                 eq? 
  1cb9:30 003c            bnt code_1cf8 
  1cbc:39 6c            pushi 6c // $6c dispose
  1cbe:76               push0 
  1cbf:72 164e          lofsa $164e // marian
  1cc2:4a 04             send 4 

  1cc4:39 6b            pushi 6b // $6b init
  1cc6:76               push0 
  1cc7:72 1f24          lofsa $1f24 // mHead
  1cca:4a 04             send 4 

  1ccc:39 6b            pushi 6b // $6b init
  1cce:76               push0 
  1ccf:72 1ebe          lofsa $1ebe // rHead
  1cd2:4a 04             send 4 

  1cd4:38 018d          pushi 18d // $18d overlay
  1cd7:78               push1 
  1cd8:38 00d8          pushi d8 // $d8 nextCel
  1cdb:81 02              lag  
  1cdd:4a 06             send 6 

  1cdf:39 08            pushi 8 // $8 underBits
  1ce1:39 0b            pushi b // $b nsBottom
  1ce3:76               push0 
  1ce4:76               push0 
  1ce5:38 00c0          pushi c0 // $c0 highlightColor
  1ce8:38 0140          pushi 140 // $140 mapKeyToDir
  1ceb:7a               push2 
  1cec:76               push0 
  1ced:76               push0 
  1cee:43 6c 10         callk Graph 10 

  1cf1:35 04              ldi 4 
  1cf3:65 12             aTop seconds 
  1cf5:32 0182            jmp code_1e7a 

        code_1cf8
  1cf8:3c                 dup 
  1cf9:35 0f              ldi f 
  1cfb:1a                 eq? 
  1cfc:30 001c            bnt code_1d1b 
  1cff:38 0096          pushi 96 // $96 setCycle
  1d02:78               push1 
  1d03:51 1a            class End 
  1d05:36                push 
  1d06:72 1f24          lofsa $1f24 // mHead
  1d09:4a 06             send 6 

  1d0b:38 0096          pushi 96 // $96 setCycle
  1d0e:7a               push2 
  1d0f:51 1a            class End 
  1d11:36                push 
  1d12:7c            pushSelf 
  1d13:72 1ebe          lofsa $1ebe // rHead
  1d16:4a 08             send 8 

  1d18:32 015f            jmp code_1e7a 

        code_1d1b
  1d1b:3c                 dup 
  1d1c:35 10              ldi 10 
  1d1e:1a                 eq? 
  1d1f:30 0007            bnt code_1d29 
  1d22:35 3c              ldi 3c 
  1d24:65 16             aTop ticks 
  1d26:32 0151            jmp code_1e7a 

        code_1d29
  1d29:3c                 dup 
  1d2a:35 11              ldi 11 
  1d2c:1a                 eq? 
  1d2d:30 0072            bnt code_1da2 
  1d30:35 62              ldi 62 
  1d32:65 1a             aTop register 

        code_1d34
  1d34:67 1a             pTos register 
  1d36:35 00              ldi 0 
  1d38:20                 ge? 
  1d39:30 001c            bnt code_1d58 
  1d3c:39 04            pushi 4 // $4 x
  1d3e:3c                 dup 
  1d3f:78               push1 
  1d40:38 00ff          pushi ff // $ff syncNum
  1d43:67 1a             pTos register 
  1d45:43 6f 08         callk Palette 8 

  1d48:78               push1 
  1d49:39 04            pushi 4 // $4 x
  1d4b:43 41 02         callk Wait 2 

  1d4e:67 1a             pTos register 
  1d50:35 02              ldi 2 
  1d52:04                 sub 
  1d53:65 1a             aTop register 
  1d55:32 ffdc            jmp code_1d34 

        code_1d58
  1d58:38 018c          pushi 18c // $18c drawPic
  1d5b:7a               push2 
  1d5c:38 0323          pushi 323 // $323 sel_803
  1d5f:39 07            pushi 7 // $7 cel
  1d61:81 02              lag  
  1d63:4a 08             send 8 

  1d65:35 ff              ldi ff 
  1d67:a1 24              sag  
  1d69:39 6c            pushi 6c // $6c dispose
  1d6b:76               push0 
  1d6c:72 164e          lofsa $164e // marian
  1d6f:4a 04             send 4 

  1d71:39 6c            pushi 6c // $6c dispose
  1d73:76               push0 
  1d74:72 1ebe          lofsa $1ebe // rHead
  1d77:4a 04             send 4 

  1d79:39 6c            pushi 6c // $6c dispose
  1d7b:76               push0 
  1d7c:72 1f24          lofsa $1f24 // mHead
  1d7f:4a 04             send 4 

  1d81:39 55            pushi 55 // $55 z
  1d83:78               push1 
  1d84:38 03e8          pushi 3e8 // $3e8 sel_1000
  1d87:72 0c64          lofsa $0c64 // bow
  1d8a:4a 06             send 6 

  1d8c:39 55            pushi 55 // $55 z
  1d8e:78               push1 
  1d8f:38 03e8          pushi 3e8 // $3e8 sel_1000
  1d92:38 011e          pushi 11e // $11e forceUpd
  1d95:76               push0 
  1d96:72 0cde          lofsa $0cde // quiver
  1d99:4a 0a             send a 

  1d9b:35 03              ldi 3 
  1d9d:65 10             aTop cycles 
  1d9f:32 00d8            jmp code_1e7a 

        code_1da2
  1da2:3c                 dup 
  1da3:35 12              ldi 12 
  1da5:1a                 eq? 
  1da6:30 0026            bnt code_1dcf 
  1da9:39 04            pushi 4 // $4 x
  1dab:3c                 dup 
  1dac:78               push1 
  1dad:38 00ff          pushi ff // $ff syncNum
  1db0:39 64            pushi 64 // $64 moveDone
  1db2:43 6f 08         callk Palette 8 

  1db5:7a               push2 
  1db6:39 32            pushi 32 // $32 b-i2
  1db8:39 78            pushi 78 // $78 isEmpty
  1dba:46 0326 0001 04  calle 326 procedure_0001 4 //  

  1dc0:39 03            pushi 3 // $3 y
  1dc2:38 04ba          pushi 4ba // $4ba sel_1210
  1dc5:39 55            pushi 55 // $55 z
  1dc7:7c            pushSelf 
  1dc8:47 0d 04 06      calle d procedure_0004 6 //  

  1dcc:32 00ab            jmp code_1e7a 

        code_1dcf
  1dcf:3c                 dup 
  1dd0:35 13              ldi 13 
  1dd2:1a                 eq? 
  1dd3:30 0076            bnt code_1e4c 
  1dd6:38 018c          pushi 18c // $18c drawPic
  1dd9:7a               push2 
  1dda:38 00d2          pushi d2 // $d2 useIconItem
  1ddd:39 0a            pushi a // $a nsLeft
  1ddf:81 02              lag  
  1de1:4a 08             send 8 

  1de3:39 03            pushi 3 // $3 y
  1de5:78               push1 
  1de6:38 02be          pushi 2be // $2be sel_702
  1de9:38 02bf          pushi 2bf // $2bf sel_703
  1dec:45 02 06         callb procedure_0002 6 //  

  1def:39 6b            pushi 6b // $6b init
  1df1:76               push0 
  1df2:38 010b          pushi 10b // $10b actions
  1df5:78               push1 
  1df6:72 3454          lofsa $3454 // egoActions
  1df9:36                push 
  1dfa:81 00              lag  
  1dfc:4a 0a             send a 

  1dfe:39 05            pushi 5 // $5 view
  1e00:78               push1 
  1e01:38 00d3          pushi d3 // $d3 helpIconItem
  1e04:39 06            pushi 6 // $6 loop
  1e06:78               push1 
  1e07:76               push0 
  1e08:38 011c          pushi 11c // $11c posn
  1e0b:7a               push2 
  1e0c:38 0087          pushi 87 // $87 ticks
  1e0f:38 0096          pushi 96 // $96 setCycle
  1e12:39 6b            pushi 6b // $6b init
  1e14:76               push0 
  1e15:38 0121          pushi 121 // $121 ignoreActors
  1e18:78               push1 
  1e19:78               push1 
  1e1a:38 00db          pushi db // $db cycleSpeed
  1e1d:78               push1 
  1e1e:39 06            pushi 6 // $6 loop
  1e20:38 0096          pushi 96 // $96 setCycle
  1e23:7a               push2 
  1e24:51 56            class StopWalk 
  1e26:36                push 
  1e27:38 00d4          pushi d4 // $d4 activateHeight
  1e2a:72 164e          lofsa $164e // marian
  1e2d:4a 2c             send 2c 

  1e2f:39 55            pushi 55 // $55 z
  1e31:78               push1 
  1e32:76               push0 
  1e33:72 0c64          lofsa $0c64 // bow
  1e36:4a 06             send 6 

  1e38:39 55            pushi 55 // $55 z
  1e3a:78               push1 
  1e3b:76               push0 
  1e3c:38 011e          pushi 11e // $11e forceUpd
  1e3f:76               push0 
  1e40:72 0cde          lofsa $0cde // quiver
  1e43:4a 0a             send a 

  1e45:35 02              ldi 2 
  1e47:65 10             aTop cycles 
  1e49:32 002e            jmp code_1e7a 

        code_1e4c
  1e4c:3c                 dup 
  1e4d:35 14              ldi 14 
  1e4f:1a                 eq? 
  1e50:30 0013            bnt code_1e66 
  1e53:39 04            pushi 4 // $4 x
  1e55:5b 02 93           lea 2 93 
  1e58:36                push 
  1e59:39 16            pushi 16 // $16 brRight
  1e5b:78               push1 
  1e5c:7c            pushSelf 
  1e5d:46 0353 0000 08  calle 353 procedure_0000 8 //  

  1e63:32 0014            jmp code_1e7a 

        code_1e66
  1e66:3c                 dup 
  1e67:35 15              ldi 15 
  1e69:1a                 eq? 
  1e6a:30 000d            bnt code_1e7a 
  1e6d:38 008e          pushi 8e // $8e setScript
  1e70:7a               push2 
  1e71:72 1aaa          lofsa $1aaa // thereSheGoes
  1e74:36                push 
  1e75:7c            pushSelf 
  1e76:63 08             pToa client 
  1e78:4a 08             send 8 


        code_1e7a
  1e7a:3a                toss 
  1e7b:48                 ret 
    )

)

// 1eb8
(instance rHead of Prop
    (properties
        x $78
        y $49
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $db
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $11
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1f1e
(instance mHead of Prop
    (properties
        x $a1
        y $57
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $db
        loop $1
        cel $0
        priority $d
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $11
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1ffe
(instance sit of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1f82
  1f82:3f 98             link 98 // (var $98)
  1f84:87 01              lap param1 
  1f86:65 0a             aTop state 
  1f88:36                push 
  1f89:3c                 dup 
  1f8a:35 00              ldi 0 
  1f8c:1a                 eq? 
  1f8d:30 0025            bnt code_1fb5 
  1f90:82 01ad            lal local429 
  1f93:30 0009            bnt code_1f9f 
  1f96:6b 0a            ipToa state 
  1f98:35 01              ldi 1 
  1f9a:65 10             aTop cycles 
  1f9c:32 0057            jmp code_1ff6 

        code_1f9f
  1f9f:38 011b          pushi 11b // $11b setMotion
  1fa2:39 04            pushi 4 // $4 x
  1fa4:51 24            class PolyPath 
  1fa6:36                push 
  1fa7:38 00a7          pushi a7 // $a7 enable
  1faa:38 0096          pushi 96 // $96 setCycle
  1fad:7c            pushSelf 
  1fae:81 00              lag  
  1fb0:4a 0c             send c 

  1fb2:32 0041            jmp code_1ff6 

        code_1fb5
  1fb5:3c                 dup 
  1fb6:35 01              ldi 1 
  1fb8:1a                 eq? 
  1fb9:30 002e            bnt code_1fea 
  1fbc:35 00              ldi 0 
  1fbe:a2 01ad            sal local429 
  1fc1:39 05            pushi 5 // $5 view
  1fc3:78               push1 
  1fc4:38 01fe          pushi 1fe // $1fe startAudio
  1fc7:39 06            pushi 6 // $6 loop
  1fc9:78               push1 
  1fca:39 04            pushi 4 // $4 x
  1fcc:39 07            pushi 7 // $7 cel
  1fce:78               push1 
  1fcf:39 03            pushi 3 // $3 y
  1fd1:38 011c          pushi 11c // $11c posn
  1fd4:7a               push2 
  1fd5:38 00a7          pushi a7 // $a7 enable
  1fd8:38 0098          pushi 98 // $98 set60ths
  1fdb:38 0096          pushi 96 // $96 setCycle
  1fde:7a               push2 
  1fdf:51 1b            class Beg 
  1fe1:36                push 
  1fe2:7c            pushSelf 
  1fe3:81 00              lag  
  1fe5:4a 22             send 22 

  1fe7:32 000c            jmp code_1ff6 

        code_1fea
  1fea:3c                 dup 
  1feb:35 02              ldi 2 
  1fed:1a                 eq? 
  1fee:30 0005            bnt code_1ff6 
  1ff1:39 6c            pushi 6c // $6c dispose
  1ff3:76               push0 
  1ff4:54 04             self 4 


        code_1ff6
  1ff6:3a                toss 
  1ff7:48                 ret 
    )

)

// 2220
(instance heal of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (dispose) // method_2032
  2032:39 6c            pushi 6c // $6c dispose
  2034:76               push0 
  2035:59 01            &rest 1 
  2037:57 06 04         super Script 4 

  203a:48                 ret 
    )

    (method (changeState) // method_203b
  203b:3f 98             link 98 // (var $98)
  203d:87 01              lap param1 
  203f:65 0a             aTop state 
  2041:36                push 
  2042:3c                 dup 
  2043:35 00              ldi 0 
  2045:1a                 eq? 
  2046:30 001c            bnt code_2065 
  2049:76               push0 
  204a:45 03 00         callb procedure_0003 0 //  

  204d:38 008e          pushi 8e // $8e setScript
  2050:78               push1 
  2051:76               push0 
  2052:72 164e          lofsa $164e // marian
  2055:4a 06             send 6 

  2057:38 008e          pushi 8e // $8e setScript
  205a:7a               push2 
  205b:72 2004          lofsa $2004 // sit
  205e:36                push 
  205f:7c            pushSelf 
  2060:54 08             self 8 

  2062:32 01b2            jmp code_2217 

        code_2065
  2065:3c                 dup 
  2066:35 01              ldi 1 
  2068:1a                 eq? 
  2069:30 0028            bnt code_2094 
  206c:78               push1 
  206d:38 008f          pushi 8f // $8f port
  2070:45 05 02         callb procedure_0005 2 //  

  2073:30 000f            bnt code_2085 
  2076:39 03            pushi 3 // $3 y
  2078:38 04ba          pushi 4ba // $4ba sel_1210
  207b:39 58            pushi 58 // $58 subtitleLang
  207d:7c            pushSelf 
  207e:47 0d 04 06      calle d procedure_0004 6 //  

  2082:32 0192            jmp code_2217 

        code_2085
  2085:39 03            pushi 3 // $3 y
  2087:38 04ba          pushi 4ba // $4ba sel_1210
  208a:39 56            pushi 56 // $56 parseLang
  208c:7c            pushSelf 
  208d:47 0d 04 06      calle d procedure_0004 6 //  

  2091:32 0183            jmp code_2217 

        code_2094
  2094:3c                 dup 
  2095:35 02              ldi 2 
  2097:1a                 eq? 
  2098:30 0021            bnt code_20bc 
  209b:38 008e          pushi 8e // $8e setScript
  209e:39 03            pushi 3 // $3 y
  20a0:72 256c          lofsa $256c // unite
  20a3:36                push 
  20a4:7c            pushSelf 
  20a5:78               push1 
  20a6:38 008f          pushi 8f // $8f port
  20a9:45 05 02         callb procedure_0005 2 //  

  20ac:30 0005            bnt code_20b4 
  20af:35 00              ldi 0 
  20b1:32 0002            jmp code_20b6 

        code_20b4
  20b4:35 57              ldi 57 

        code_20b6
  20b6:36                push 
  20b7:54 0a             self a 

  20b9:32 015b            jmp code_2217 

        code_20bc
  20bc:3c                 dup 
  20bd:35 03              ldi 3 
  20bf:1a                 eq? 
  20c0:30 0021            bnt code_20e4 
  20c3:39 2b            pushi 2b // $2b number
  20c5:78               push1 
  20c6:38 00d2          pushi d2 // $d2 useIconItem
  20c9:39 06            pushi 6 // $6 loop
  20cb:78               push1 
  20cc:39 ff            pushi ff // $ff syncNum
  20ce:39 2a            pushi 2a // $2a play
  20d0:76               push0 
  20d1:81 71              lag  
  20d3:4a 10             send 10 

  20d5:39 03            pushi 3 // $3 y
  20d7:38 04ba          pushi 4ba // $4ba sel_1210
  20da:39 59            pushi 59 // $59 size
  20dc:7c            pushSelf 
  20dd:47 0d 04 06      calle d procedure_0004 6 //  

  20e1:32 0133            jmp code_2217 

        code_20e4
  20e4:3c                 dup 
  20e5:35 04              ldi 4 
  20e7:1a                 eq? 
  20e8:30 0007            bnt code_20f2 
  20eb:35 3c              ldi 3c 
  20ed:65 16             aTop ticks 
  20ef:32 0125            jmp code_2217 

        code_20f2
  20f2:3c                 dup 
  20f3:35 05              ldi 5 
  20f5:1a                 eq? 
  20f6:30 0013            bnt code_210c 
  20f9:39 04            pushi 4 // $4 x
  20fb:5b 02 a3           lea 2 a3 
  20fe:36                push 
  20ff:78               push1 
  2100:39 16            pushi 16 // $16 brRight
  2102:7c            pushSelf 
  2103:46 0353 0000 08  calle 353 procedure_0000 8 //  

  2109:32 010b            jmp code_2217 

        code_210c
  210c:3c                 dup 
  210d:35 06              ldi 6 
  210f:1a                 eq? 
  2110:30 0013            bnt code_2126 
  2113:7a               push2 
  2114:38 012c          pushi 12c // $12c ignoreHorizon
  2117:39 3e            pushi 3e // $3e looper
  2119:46 0326 0001 04  calle 326 procedure_0001 4 //  

  211f:35 02              ldi 2 
  2121:65 12             aTop seconds 
  2123:32 00f1            jmp code_2217 

        code_2126
  2126:3c                 dup 
  2127:35 07              ldi 7 
  2129:1a                 eq? 
  212a:30 0014            bnt code_2141 
  212d:39 05            pushi 5 // $5 view
  212f:5b 02 a8           lea 2 a8 
  2132:36                push 
  2133:78               push1 
  2134:39 16            pushi 16 // $16 brRight
  2136:7c            pushSelf 
  2137:76               push0 
  2138:46 0353 0000 0a  calle 353 procedure_0000 a //  

  213e:32 00d6            jmp code_2217 

        code_2141
  2141:3c                 dup 
  2142:35 08              ldi 8 
  2144:1a                 eq? 
  2145:30 0058            bnt code_21a0 
  2148:39 03            pushi 3 // $3 y
  214a:38 04ba          pushi 4ba // $4ba sel_1210
  214d:39 60            pushi 60 // $60 frame
  214f:5b 04 02           lea 4 2 
  2152:36                push 
  2153:43 49 06         callk GetFarText 6 

  2156:39 03            pushi 3 // $3 y
  2158:38 0525          pushi 525 // $525 sel_1317
  215b:39 f6            pushi f6 // $f6 nonBumps
  215d:81 8c              lag  
  215f:02                 add 
  2160:36                push 
  2161:5b 04 02           lea 4 2 
  2164:36                push 
  2165:78               push1 
  2166:5b 04 02           lea 4 2 
  2169:36                push 
  216a:43 46 02         callk StrLen 2 

  216d:02                 add 
  216e:36                push 
  216f:43 49 06         callk GetFarText 6 

  2172:39 08            pushi 8 // $8 underBits
  2174:76               push0 
  2175:7a               push2 
  2176:38 0353          pushi 353 // $353 sel_851
  2179:39 03            pushi 3 // $3 y
  217b:43 02 04         callk ScriptID 4 

  217e:65 1a             aTop register 
  2180:4a 04             send 4 

  2182:30 0014            bnt code_2199 
  2185:38 01fd          pushi 1fd // $1fd say
  2188:39 05            pushi 5 // $5 view
  218a:5b 04 02           lea 4 2 
  218d:36                push 
  218e:76               push0 
  218f:76               push0 
  2190:76               push0 
  2191:7c            pushSelf 
  2192:63 1a             pToa register 
  2194:4a 0e             send e 

  2196:32 007e            jmp code_2217 

        code_2199
  2199:35 01              ldi 1 
  219b:65 10             aTop cycles 
  219d:32 0077            jmp code_2217 

        code_21a0
  21a0:3c                 dup 
  21a1:35 09              ldi 9 
  21a3:1a                 eq? 
  21a4:30 0013            bnt code_21ba 
  21a7:39 04            pushi 4 // $4 x
  21a9:5b 02 af           lea 2 af 
  21ac:36                push 
  21ad:78               push1 
  21ae:39 16            pushi 16 // $16 brRight
  21b0:7c            pushSelf 
  21b1:46 0353 0000 08  calle 353 procedure_0000 8 //  

  21b7:32 005d            jmp code_2217 

        code_21ba
  21ba:3c                 dup 
  21bb:35 0a              ldi a 
  21bd:1a                 eq? 
  21be:30 0020            bnt code_21e1 
  21c1:39 06            pushi 6 // $6 loop
  21c3:78               push1 
  21c4:7a               push2 
  21c5:39 07            pushi 7 // $7 cel
  21c7:78               push1 
  21c8:39 08            pushi 8 // $8 underBits
  21ca:38 0096          pushi 96 // $96 setCycle
  21cd:7a               push2 
  21ce:51 1b            class Beg 
  21d0:36                push 
  21d1:7c            pushSelf 
  21d2:72 164e          lofsa $164e // marian
  21d5:4a 14             send 14 

  21d7:39 6c            pushi 6c // $6c dispose
  21d9:76               push0 
  21da:81 00              lag  
  21dc:4a 04             send 4 

  21de:32 0036            jmp code_2217 

        code_21e1
  21e1:3c                 dup 
  21e2:35 0b              ldi b 
  21e4:1a                 eq? 
  21e5:30 001d            bnt code_2205 
  21e8:38 018c          pushi 18c // $18c drawPic
  21eb:7a               push2 
  21ec:38 0323          pushi 323 // $323 sel_803
  21ef:39 06            pushi 6 // $6 loop
  21f1:81 02              lag  
  21f3:4a 08             send 8 

  21f5:39 74            pushi 74 // $74 eachElementDo
  21f7:78               push1 
  21f8:39 6c            pushi 6c // $6c dispose
  21fa:81 05              lag  
  21fc:4a 06             send 6 

  21fe:35 3c              ldi 3c 
  2200:65 16             aTop ticks 
  2202:32 0012            jmp code_2217 

        code_2205
  2205:3c                 dup 
  2206:35 0c              ldi c 
  2208:1a                 eq? 
  2209:30 000b            bnt code_2217 
  220c:38 0179          pushi 179 // $179 newRoom
  220f:78               push1 
  2210:38 00a0          pushi a0 // $a0 mute
  2213:81 02              lag  
  2215:4a 06             send 6 


        code_2217
  2217:3a                toss 
  2218:48                 ret 
  2219:00                bnot 
    )

)

// 230e
(instance dying of SpecialDoVerb
    (properties
    )
    (method (doVerb) // method_2258
  2258:8f 01              lsp param1 
  225a:3c                 dup 
  225b:35 02              ldi 2 
  225d:1a                 eq? 
  225e:30 000f            bnt code_2270 
  2261:39 03            pushi 3 // $3 y
  2263:38 04ba          pushi 4ba // $4ba sel_1210
  2266:39 06            pushi 6 // $6 loop
  2268:78               push1 
  2269:47 0d 04 06      calle d procedure_0004 6 //  

  226d:32 0094            jmp code_2304 

        code_2270
  2270:3c                 dup 
  2271:35 03              ldi 3 
  2273:1a                 eq? 
  2274:30 000f            bnt code_2286 
  2277:39 03            pushi 3 // $3 y
  2279:38 04ba          pushi 4ba // $4ba sel_1210
  227c:39 0f            pushi f // $f lsBottom
  227e:78               push1 
  227f:47 0d 04 06      calle d procedure_0004 6 //  

  2283:32 007e            jmp code_2304 

        code_2286
  2286:3c                 dup 
  2287:35 04              ldi 4 
  2289:1a                 eq? 
  228a:30 0055            bnt code_22e2 
  228d:8f 02              lsp param2 
  228f:3c                 dup 
  2290:35 02              ldi 2 
  2292:1a                 eq? 
  2293:30 000f            bnt code_22a5 
  2296:38 008e          pushi 8e // $8e setScript
  2299:78               push1 
  229a:72 2226          lofsa $2226 // heal
  229d:36                push 
  229e:81 02              lag  
  22a0:4a 06             send 6 

  22a2:32 0039            jmp code_22de 

        code_22a5
  22a5:3c                 dup 
  22a6:35 0a              ldi a 
  22a8:1a                 eq? 
  22a9:30 0010            bnt code_22bc 
  22ac:39 03            pushi 3 // $3 y
  22ae:38 04ba          pushi 4ba // $4ba sel_1210
  22b1:38 00ab          pushi ab // $ab move
  22b4:78               push1 
  22b5:47 0d 04 06      calle d procedure_0004 6 //  

  22b9:32 0022            jmp code_22de 

        code_22bc
  22bc:3c                 dup 
  22bd:35 12              ldi 12 
  22bf:1a                 eq? 
  22c0:30 0010            bnt code_22d3 
  22c3:39 03            pushi 3 // $3 y
  22c5:38 04ba          pushi 4ba // $4ba sel_1210
  22c8:38 00b2          pushi b2 // $b2 retreat
  22cb:78               push1 
  22cc:47 0d 04 06      calle d procedure_0004 6 //  

  22d0:32 000b            jmp code_22de 

        code_22d3
  22d3:39 3c            pushi 3c // $3c doit
  22d5:78               push1 
  22d6:8f 01              lsp param1 
  22d8:59 03            &rest 3 
  22da:81 41              lag  
  22dc:4a 06             send 6 


        code_22de
  22de:3a                toss 
  22df:32 0022            jmp code_2304 

        code_22e2
  22e2:3c                 dup 
  22e3:35 05              ldi 5 
  22e5:1a                 eq? 
  22e6:30 0010            bnt code_22f9 
  22e9:39 03            pushi 3 // $3 y
  22eb:38 04ba          pushi 4ba // $4ba sel_1210
  22ee:38 00fa          pushi fa // $fa outOfTouch
  22f1:78               push1 
  22f2:47 0d 04 06      calle d procedure_0004 6 //  

  22f6:32 000b            jmp code_2304 

        code_22f9
  22f9:39 3c            pushi 3c // $3c doit
  22fb:78               push1 
  22fc:8f 01              lsp param1 
  22fe:59 03            &rest 3 
  2300:81 41              lag  
  2302:4a 06             send 6 


        code_2304
  2304:3a                toss 
  2305:35 01              ldi 1 
  2307:48                 ret 
    )

)

// 2566
(instance unite of TScript
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
        notKilled $1
    )
    (method (doit) // method_2546
  2546:39 3c            pushi 3c // $3c doit
  2548:76               push0 
  2549:57 9d 04         super TScript 4 

  254c:83 11              lal local17 
  254e:30 000e            bnt code_255f 
  2551:39 04            pushi 4 // $4 x
  2553:39 06            pushi 6 // $6 loop
  2555:38 00e0          pushi e0 // $e0 xLast
  2558:38 00fe          pushi fe // $fe prevCue
  255b:36                push 
  255c:43 6f 08         callk Palette 8 


        code_255f
  255f:48                 ret 
    )

    (method (changeState) // method_2328
  2328:3f 03             link 3 // (var $3)
  232a:87 01              lap param1 
  232c:65 0a             aTop state 
  232e:36                push 
  232f:3c                 dup 
  2330:35 00              ldi 0 
  2332:1a                 eq? 
  2333:30 00cc            bnt code_2402 
  2336:38 00bb          pushi bb // $bb setCursor
  2339:39 04            pushi 4 // $4 x
  233b:39 05            pushi 5 // $5 view
  233d:78               push1 
  233e:38 0136          pushi 136 // $136 horizon
  2341:38 00b9          pushi b9 // $b9 bottom
  2344:81 01              lag  
  2346:4a 0c             send c 

  2348:35 ff              ldi ff 
  234a:a3 11              sal local17 
  234c:39 69            pushi 69 // $69 hide
  234e:76               push0 
  234f:81 00              lag  
  2351:4a 04             send 4 

  2353:39 69            pushi 69 // $69 hide
  2355:76               push0 
  2356:72 164e          lofsa $164e // marian
  2359:4a 04             send 4 

  235b:39 69            pushi 69 // $69 hide
  235d:76               push0 
  235e:72 0c64          lofsa $0c64 // bow
  2361:4a 04             send 4 

  2363:39 69            pushi 69 // $69 hide
  2365:76               push0 
  2366:72 0cde          lofsa $0cde // quiver
  2369:4a 04             send 4 

  236b:38 018c          pushi 18c // $18c drawPic
  236e:78               push1 
  236f:38 00d7          pushi d7 // $d7 completed
  2372:81 02              lag  
  2374:4a 06             send 6 

  2376:39 05            pushi 5 // $5 view
  2378:78               push1 
  2379:38 00d8          pushi d8 // $d8 nextCel
  237c:39 06            pushi 6 // $6 loop
  237e:78               push1 
  237f:67 08             pTos client 
  2381:72 2226          lofsa $2226 // heal
  2384:1a                 eq? 
  2385:36                push 
  2386:38 011c          pushi 11c // $11c posn
  2389:7a               push2 
  238a:39 50            pushi 50 // $50 title
  238c:38 008c          pushi 8c // $8c changeState
  238f:39 11            pushi 11 // $11 signal
  2391:78               push1 
  2392:38 4800          pushi 4800 // $4800 sel_18432
  2395:39 6b            pushi 6b // $6b init
  2397:76               push0 
  2398:38 011b          pushi 11b // $11b setMotion
  239b:39 04            pushi 4 // $4 x
  239d:51 1e            class MoveTo 
  239f:36                push 
  23a0:39 79            pushi 79 // $79 first
  23a2:39 78            pushi 78 // $78 isEmpty
  23a4:7c            pushSelf 
  23a5:39 6a            pushi 6a // $6a new
  23a7:76               push0 
  23a8:51 30            class Actor 
  23aa:4a 04             send 4 

  23ac:a3 0d              sal local13 
  23ae:4a 2a             send 2a 

  23b0:39 05            pushi 5 // $5 view
  23b2:78               push1 
  23b3:38 00d8          pushi d8 // $d8 nextCel
  23b6:39 06            pushi 6 // $6 loop
  23b8:78               push1 
  23b9:7a               push2 
  23ba:38 011c          pushi 11c // $11c posn
  23bd:7a               push2 
  23be:38 00fa          pushi fa // $fa outOfTouch
  23c1:38 008e          pushi 8e // $8e setScript
  23c4:39 11            pushi 11 // $11 signal
  23c6:78               push1 
  23c7:38 4800          pushi 4800 // $4800 sel_18432
  23ca:39 6b            pushi 6b // $6b init
  23cc:76               push0 
  23cd:38 011b          pushi 11b // $11b setMotion
  23d0:39 03            pushi 3 // $3 y
  23d2:51 1e            class MoveTo 
  23d4:36                push 
  23d5:38 00d2          pushi d2 // $d2 useIconItem
  23d8:39 7a            pushi 7a // $7a release
  23da:39 6a            pushi 6a // $6a new
  23dc:76               push0 
  23dd:51 30            class Actor 
  23df:4a 04             send 4 

  23e1:a3 0e              sal local14 
  23e3:4a 28             send 28 

  23e5:38 009d          pushi 9d // $9d pause
  23e8:78               push1 
  23e9:78               push1 
  23ea:81 71              lag  
  23ec:4a 06             send 6 

  23ee:38 009d          pushi 9d // $9d pause
  23f1:78               push1 
  23f2:78               push1 
  23f3:81 64              lag  
  23f5:4a 06             send 6 

  23f7:39 2a            pushi 2a // $2a play
  23f9:76               push0 
  23fa:72 37c0          lofsa $37c0 // joinSound
  23fd:4a 04             send 4 

  23ff:32 0142            jmp code_2544 

        code_2402
  2402:3c                 dup 
  2403:35 01              ldi 1 
  2405:1a                 eq? 
  2406:30 004c            bnt code_2455 
  2409:35 fe              ldi fe 
  240b:a3 11              sal local17 
  240d:38 0122          pushi 122 // $122 addToPic
  2410:76               push0 
  2411:83 0d              lal local13 
  2413:4a 04             send 4 

  2415:38 0122          pushi 122 // $122 addToPic
  2418:76               push0 
  2419:83 0e              lal local14 
  241b:4a 04             send 4 

  241d:39 05            pushi 5 // $5 view
  241f:78               push1 
  2420:38 00d8          pushi d8 // $d8 nextCel
  2423:39 06            pushi 6 // $6 loop
  2425:78               push1 
  2426:39 03            pushi 3 // $3 y
  2428:38 011c          pushi 11c // $11c posn
  242b:7a               push2 
  242c:38 009c          pushi 9c // $9c stop
  242f:39 59            pushi 59 // $59 size
  2431:39 3f            pushi 3f // $3f priority
  2433:78               push1 
  2434:39 09            pushi 9 // $9 nsTop
  2436:39 11            pushi 11 // $11 signal
  2438:78               push1 
  2439:38 4010          pushi 4010 // $4010 sel_16400
  243c:39 6b            pushi 6b // $6b init
  243e:76               push0 
  243f:38 0096          pushi 96 // $96 setCycle
  2442:7a               push2 
  2443:51 1a            class End 
  2445:36                push 
  2446:7c            pushSelf 
  2447:39 6a            pushi 6a // $6a new
  2449:76               push0 
  244a:51 2f            class Prop 
  244c:4a 04             send 4 

  244e:a3 0f              sal local15 
  2450:4a 2c             send 2c 

  2452:32 00ef            jmp code_2544 

        code_2455
  2455:3c                 dup 
  2456:35 02              ldi 2 
  2458:1a                 eq? 
  2459:30 000f            bnt code_246b 
  245c:38 0096          pushi 96 // $96 setCycle
  245f:7a               push2 
  2460:51 1b            class Beg 
  2462:36                push 
  2463:7c            pushSelf 
  2464:83 0f              lal local15 
  2466:4a 08             send 8 

  2468:32 00d9            jmp code_2544 

        code_246b
  246b:3c                 dup 
  246c:35 03              ldi 3 
  246e:1a                 eq? 
  246f:30 0026            bnt code_2498 
  2472:35 fc              ldi fc 
  2474:a3 11              sal local17 
  2476:39 6c            pushi 6c // $6c dispose
  2478:76               push0 
  2479:83 0f              lal local15 
  247b:4a 04             send 4 

  247d:63 1a             pToa register 
  247f:30 000e            bnt code_2490 
  2482:39 03            pushi 3 // $3 y
  2484:38 04ba          pushi 4ba // $4ba sel_1210
  2487:36                push 
  2488:7c            pushSelf 
  2489:47 0d 04 06      calle d procedure_0004 6 //  

  248d:32 00b4            jmp code_2544 

        code_2490
  2490:34 00b4            ldi b4 
  2493:65 16             aTop ticks 
  2495:32 00ac            jmp code_2544 

        code_2498
  2498:3c                 dup 
  2499:35 04              ldi 4 
  249b:1a                 eq? 
  249c:30 0020            bnt code_24bf 
  249f:38 009a          pushi 9a // $9a prevSignal
  24a2:76               push0 
  24a3:72 37c0          lofsa $37c0 // joinSound
  24a6:4a 04             send 4 

  24a8:36                push 
  24a9:35 ff              ldi ff 
  24ab:1a                 eq? 
  24ac:30 0007            bnt code_24b6 
  24af:35 02              ldi 2 
  24b1:65 10             aTop cycles 
  24b3:32 008e            jmp code_2544 

        code_24b6
  24b6:6d 0a            dpToa state 
  24b8:35 02              ldi 2 
  24ba:65 10             aTop cycles 
  24bc:32 0085            jmp code_2544 

        code_24bf
  24bf:3c                 dup 
  24c0:35 05              ldi 5 
  24c2:1a                 eq? 
  24c3:30 005b            bnt code_2521 
  24c6:38 00c2          pushi c2 // $c2 show
  24c9:76               push0 
  24ca:81 00              lag  
  24cc:4a 04             send 4 

  24ce:38 00c2          pushi c2 // $c2 show
  24d1:76               push0 
  24d2:72 164e          lofsa $164e // marian
  24d5:4a 04             send 4 

  24d7:38 00c2          pushi c2 // $c2 show
  24da:76               push0 
  24db:72 0c64          lofsa $0c64 // bow
  24de:4a 04             send 4 

  24e0:38 00c2          pushi c2 // $c2 show
  24e3:76               push0 
  24e4:72 0cde          lofsa $0cde // quiver
  24e7:4a 04             send 4 

  24e9:39 6c            pushi 6c // $6c dispose
  24eb:76               push0 
  24ec:83 0d              lal local13 
  24ee:4a 04             send 4 

  24f0:39 6c            pushi 6c // $6c dispose
  24f2:76               push0 
  24f3:83 0e              lal local14 
  24f5:4a 04             send 4 

  24f7:38 018c          pushi 18c // $18c drawPic
  24fa:7a               push2 
  24fb:38 00d2          pushi d2 // $d2 useIconItem
  24fe:39 0a            pushi a // $a nsLeft
  2500:81 02              lag  
  2502:4a 08             send 8 

  2504:38 009d          pushi 9d // $9d pause
  2507:78               push1 
  2508:76               push0 
  2509:81 71              lag  
  250b:4a 06             send 6 

  250d:38 009d          pushi 9d // $9d pause
  2510:78               push1 
  2511:76               push0 
  2512:81 64              lag  
  2514:4a 06             send 6 

  2516:35 01              ldi 1 
  2518:65 10             aTop cycles 
  251a:35 00              ldi 0 
  251c:a3 11              sal local17 
  251e:32 0023            jmp code_2544 

        code_2521
  2521:3c                 dup 
  2522:35 06              ldi 6 
  2524:1a                 eq? 
  2525:30 001c            bnt code_2544 
  2528:38 00bb          pushi bb // $bb setCursor
  252b:7a               push2 
  252c:39 24            pushi 24 // $24 cursor
  252e:76               push0 
  252f:38 00ce          pushi ce // $ce curIcon
  2532:76               push0 
  2533:81 45              lag  
  2535:4a 04             send 4 

  2537:4a 04             send 4 

  2539:36                push 
  253a:78               push1 
  253b:81 01              lag  
  253d:4a 08             send 8 

  253f:39 6c            pushi 6c // $6c dispose
  2541:76               push0 
  2542:54 04             self 4 


        code_2544
  2544:3a                toss 
  2545:48                 ret 
    )

)

// 277a
(instance giveComb of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_25a0
  25a0:3f 02             link 2 // (var $2)
  25a2:87 01              lap param1 
  25a4:65 0a             aTop state 
  25a6:36                push 
  25a7:3c                 dup 
  25a8:35 00              ldi 0 
  25aa:1a                 eq? 
  25ab:30 005d            bnt code_260b 
  25ae:76               push0 
  25af:45 03 00         callb procedure_0003 0 //  

  25b2:38 0133          pushi 133 // $133 onControl
  25b5:78               push1 
  25b6:78               push1 
  25b7:81 00              lag  
  25b9:4a 06             send 6 

  25bb:36                push 
  25bc:35 04              ldi 4 
  25be:12                 and 
  25bf:18                 not 
  25c0:30 0013            bnt code_25d6 
  25c3:38 008e          pushi 8e // $8e setScript
  25c6:7a               push2 
  25c7:72 0910          lofsa $0910 // disarm
  25ca:36                push 
  25cb:7c            pushSelf 
  25cc:54 08             self 8 

  25ce:35 04              ldi 4 
  25d0:a2 01ae            sal local430 
  25d3:6d 0a            dpToa state 
  25d5:48                 ret 

        code_25d6
  25d6:39 11            pushi 11 // $11 signal
  25d8:78               push1 
  25d9:38 4000          pushi 4000 // $4000 sel_16384
  25dc:72 164e          lofsa $164e // marian
  25df:4a 06             send 6 

  25e1:38 011b          pushi 11b // $11b setMotion
  25e4:39 04            pushi 4 // $4 x
  25e6:51 24            class PolyPath 
  25e8:36                push 
  25e9:39 04            pushi 4 // $4 x
  25eb:76               push0 
  25ec:72 164e          lofsa $164e // marian
  25ef:4a 04             send 4 

  25f1:36                push 
  25f2:35 1c              ldi 1c 
  25f4:02                 add 
  25f5:36                push 
  25f6:39 03            pushi 3 // $3 y
  25f8:76               push0 
  25f9:72 164e          lofsa $164e // marian
  25fc:4a 04             send 4 

  25fe:36                push 
  25ff:35 02              ldi 2 
  2601:04                 sub 
  2602:36                push 
  2603:7c            pushSelf 
  2604:81 00              lag  
  2606:4a 0c             send c 

  2608:32 0166            jmp code_2771 

        code_260b
  260b:3c                 dup 
  260c:35 01              ldi 1 
  260e:1a                 eq? 
  260f:30 0019            bnt code_262b 
  2612:38 00a2          pushi a2 // $a2 setLoop
  2615:78               push1 
  2616:78               push1 
  2617:81 00              lag  
  2619:4a 06             send 6 

  261b:39 06            pushi 6 // $6 loop
  261d:78               push1 
  261e:76               push0 
  261f:72 164e          lofsa $164e // marian
  2622:4a 06             send 6 

  2624:35 1e              ldi 1e 
  2626:65 16             aTop ticks 
  2628:32 0146            jmp code_2771 

        code_262b
  262b:3c                 dup 
  262c:35 02              ldi 2 
  262e:1a                 eq? 
  262f:30 0041            bnt code_2673 
  2632:39 69            pushi 69 // $69 hide
  2634:76               push0 
  2635:72 164e          lofsa $164e // marian
  2638:4a 04             send 4 

  263a:39 05            pushi 5 // $5 view
  263c:78               push1 
  263d:38 00d7          pushi d7 // $d7 completed
  2640:38 00a2          pushi a2 // $a2 setLoop
  2643:78               push1 
  2644:76               push0 
  2645:38 0120          pushi 120 // $120 setCel
  2648:78               push1 
  2649:76               push0 
  264a:38 00db          pushi db // $db cycleSpeed
  264d:78               push1 
  264e:39 06            pushi 6 // $6 loop
  2650:38 011c          pushi 11c // $11c posn
  2653:7a               push2 
  2654:39 04            pushi 4 // $4 x
  2656:76               push0 
  2657:81 00              lag  
  2659:4a 04             send 4 

  265b:36                push 
  265c:35 07              ldi 7 
  265e:04                 sub 
  265f:36                push 
  2660:39 03            pushi 3 // $3 y
  2662:76               push0 
  2663:81 00              lag  
  2665:4a 04             send 4 

  2667:36                push 
  2668:81 00              lag  
  266a:4a 20             send 20 

  266c:35 14              ldi 14 
  266e:65 16             aTop ticks 
  2670:32 00fe            jmp code_2771 

        code_2673
  2673:3c                 dup 
  2674:35 03              ldi 3 
  2676:1a                 eq? 
  2677:30 0010            bnt code_268a 
  267a:38 0120          pushi 120 // $120 setCel
  267d:78               push1 
  267e:78               push1 
  267f:81 00              lag  
  2681:4a 06             send 6 

  2683:35 14              ldi 14 
  2685:65 16             aTop ticks 
  2687:32 00e7            jmp code_2771 

        code_268a
  268a:3c                 dup 
  268b:35 04              ldi 4 
  268d:1a                 eq? 
  268e:30 004c            bnt code_26dd 
  2691:38 011c          pushi 11c // $11c posn
  2694:7a               push2 
  2695:39 04            pushi 4 // $4 x
  2697:76               push0 
  2698:81 00              lag  
  269a:4a 04             send 4 

  269c:36                push 
  269d:35 07              ldi 7 
  269f:02                 add 
  26a0:36                push 
  26a1:39 03            pushi 3 // $3 y
  26a3:76               push0 
  26a4:81 00              lag  
  26a6:4a 04             send 4 

  26a8:36                push 
  26a9:81 00              lag  
  26ab:4a 08             send 8 

  26ad:39 05            pushi 5 // $5 view
  26af:78               push1 
  26b0:38 00d7          pushi d7 // $d7 completed
  26b3:39 06            pushi 6 // $6 loop
  26b5:78               push1 
  26b6:39 04            pushi 4 // $4 x
  26b8:39 07            pushi 7 // $7 cel
  26ba:78               push1 
  26bb:39 03            pushi 3 // $3 y
  26bd:38 00c2          pushi c2 // $c2 show
  26c0:76               push0 
  26c1:38 0096          pushi 96 // $96 setCycle
  26c4:7a               push2 
  26c5:51 1a            class End 
  26c7:36                push 
  26c8:7c            pushSelf 
  26c9:72 164e          lofsa $164e // marian
  26cc:4a 1e             send 1e 

  26ce:39 03            pushi 3 // $3 y
  26d0:78               push1 
  26d1:38 02be          pushi 2be // $2be sel_702
  26d4:38 02bf          pushi 2bf // $2bf sel_703
  26d7:45 02 06         callb procedure_0002 6 //  

  26da:32 0094            jmp code_2771 

        code_26dd
  26dd:3c                 dup 
  26de:35 05              ldi 5 
  26e0:1a                 eq? 
  26e1:30 0016            bnt code_26fa 
  26e4:39 05            pushi 5 // $5 view
  26e6:78               push1 
  26e7:38 00d4          pushi d4 // $d4 activateHeight
  26ea:39 06            pushi 6 // $6 loop
  26ec:78               push1 
  26ed:76               push0 
  26ee:72 164e          lofsa $164e // marian
  26f1:4a 0c             send c 

  26f3:35 1e              ldi 1e 
  26f5:65 16             aTop ticks 
  26f7:32 0077            jmp code_2771 

        code_26fa
  26fa:3c                 dup 
  26fb:35 06              ldi 6 
  26fd:1a                 eq? 
  26fe:30 0013            bnt code_2714 
  2701:39 04            pushi 4 // $4 x
  2703:5b 02 b4           lea 2 b4 
  2706:36                push 
  2707:78               push1 
  2708:39 16            pushi 16 // $16 brRight
  270a:7c            pushSelf 
  270b:46 0353 0000 08  calle 353 procedure_0000 8 //  

  2711:32 005d            jmp code_2771 

        code_2714
  2714:3c                 dup 
  2715:35 07              ldi 7 
  2717:1a                 eq? 
  2718:30 0056            bnt code_2771 
  271b:7a               push2 
  271c:39 32            pushi 32 // $32 b-i2
  271e:39 30            pushi 30 // $30 b-moveCnt
  2720:46 0326 0001 04  calle 326 procedure_0001 4 //  

  2726:78               push1 
  2727:39 2f            pushi 2f // $2f dy
  2729:45 05 02         callb procedure_0005 2 //  

  272c:30 0021            bnt code_2750 
  272f:38 0185          pushi 185 // $185 east
  2732:78               push1 
  2733:38 00a0          pushi a0 // $a0 mute
  2736:81 02              lag  
  2738:4a 06             send 6 

  273a:38 0186          pushi 186 // $186 south
  273d:78               push1 
  273e:38 00a0          pushi a0 // $a0 mute
  2741:81 02              lag  
  2743:4a 06             send 6 

  2745:38 0187          pushi 187 // $187 west
  2748:78               push1 
  2749:38 00a0          pushi a0 // $a0 mute
  274c:81 02              lag  
  274e:4a 06             send 6 


        code_2750
  2750:38 0148          pushi 148 // $148 put
  2753:78               push1 
  2754:39 0f            pushi f // $f lsBottom
  2756:81 00              lag  
  2758:4a 06             send 6 

  275a:39 11            pushi 11 // $11 signal
  275c:78               push1 
  275d:76               push0 
  275e:72 164e          lofsa $164e // marian
  2761:4a 06             send 6 

  2763:35 00              ldi 0 
  2765:a3 0c              sal local12 
  2767:76               push0 
  2768:40 da7a 00        call proc_01e6 0 

  276c:39 6c            pushi 6c // $6c dispose
  276e:76               push0 
  276f:54 04             self 4 


        code_2771
  2771:3a                toss 
  2772:48                 ret 
  2773:00                bnot 
    )

)

// 2e02
(instance giveScroll of TScript
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
        notKilled $1
    )
    (method (changeState) // method_27ae
  27ae:3f 98             link 98 // (var $98)
  27b0:87 01              lap param1 
  27b2:65 0a             aTop state 
  27b4:36                push 
  27b5:3c                 dup 
  27b6:35 00              ldi 0 
  27b8:1a                 eq? 
  27b9:30 005d            bnt code_2819 
  27bc:76               push0 
  27bd:45 03 00         callb procedure_0003 0 //  

  27c0:38 0133          pushi 133 // $133 onControl
  27c3:78               push1 
  27c4:78               push1 
  27c5:81 00              lag  
  27c7:4a 06             send 6 

  27c9:36                push 
  27ca:35 04              ldi 4 
  27cc:12                 and 
  27cd:18                 not 
  27ce:30 0013            bnt code_27e4 
  27d1:38 008e          pushi 8e // $8e setScript
  27d4:7a               push2 
  27d5:72 0910          lofsa $0910 // disarm
  27d8:36                push 
  27d9:7c            pushSelf 
  27da:54 08             self 8 

  27dc:35 04              ldi 4 
  27de:a2 01ae            sal local430 
  27e1:6d 0a            dpToa state 
  27e3:48                 ret 

        code_27e4
  27e4:35 01              ldi 1 
  27e6:65 22             aTop notKilled 
  27e8:39 11            pushi 11 // $11 signal
  27ea:78               push1 
  27eb:38 4000          pushi 4000 // $4000 sel_16384
  27ee:72 164e          lofsa $164e // marian
  27f1:4a 06             send 6 

  27f3:38 011b          pushi 11b // $11b setMotion
  27f6:39 04            pushi 4 // $4 x
  27f8:51 24            class PolyPath 
  27fa:36                push 
  27fb:39 04            pushi 4 // $4 x
  27fd:76               push0 
  27fe:72 164e          lofsa $164e // marian
  2801:4a 04             send 4 

  2803:36                push 
  2804:35 1c              ldi 1c 
  2806:02                 add 
  2807:36                push 
  2808:39 03            pushi 3 // $3 y
  280a:76               push0 
  280b:72 164e          lofsa $164e // marian
  280e:4a 04             send 4 

  2810:36                push 
  2811:7c            pushSelf 
  2812:81 00              lag  
  2814:4a 0c             send c 

  2816:32 05e0            jmp code_2df9 

        code_2819
  2819:3c                 dup 
  281a:35 01              ldi 1 
  281c:1a                 eq? 
  281d:30 0019            bnt code_2839 
  2820:38 00a2          pushi a2 // $a2 setLoop
  2823:78               push1 
  2824:78               push1 
  2825:81 00              lag  
  2827:4a 06             send 6 

  2829:39 06            pushi 6 // $6 loop
  282b:78               push1 
  282c:76               push0 
  282d:72 164e          lofsa $164e // marian
  2830:4a 06             send 6 

  2832:35 14              ldi 14 
  2834:65 16             aTop ticks 
  2836:32 05c0            jmp code_2df9 

        code_2839
  2839:3c                 dup 
  283a:35 02              ldi 2 
  283c:1a                 eq? 
  283d:30 0049            bnt code_2889 
  2840:39 69            pushi 69 // $69 hide
  2842:76               push0 
  2843:72 164e          lofsa $164e // marian
  2846:4a 04             send 4 

  2848:39 05            pushi 5 // $5 view
  284a:78               push1 
  284b:38 00d7          pushi d7 // $d7 completed
  284e:38 00db          pushi db // $db cycleSpeed
  2851:78               push1 
  2852:39 06            pushi 6 // $6 loop
  2854:38 00a2          pushi a2 // $a2 setLoop
  2857:78               push1 
  2858:76               push0 
  2859:38 0120          pushi 120 // $120 setCel
  285c:78               push1 
  285d:76               push0 
  285e:38 011c          pushi 11c // $11c posn
  2861:7a               push2 
  2862:39 04            pushi 4 // $4 x
  2864:76               push0 
  2865:81 00              lag  
  2867:4a 04             send 4 

  2869:36                push 
  286a:35 08              ldi 8 
  286c:04                 sub 
  286d:36                push 
  286e:39 03            pushi 3 // $3 y
  2870:76               push0 
  2871:81 00              lag  
  2873:4a 04             send 4 

  2875:36                push 
  2876:35 01              ldi 1 
  2878:02                 add 
  2879:36                push 
  287a:38 0096          pushi 96 // $96 setCycle
  287d:7a               push2 
  287e:51 1a            class End 
  2880:36                push 
  2881:7c            pushSelf 
  2882:81 00              lag  
  2884:4a 28             send 28 

  2886:32 0570            jmp code_2df9 

        code_2889
  2889:3c                 dup 
  288a:35 03              ldi 3 
  288c:1a                 eq? 
  288d:30 006c            bnt code_28fc 
  2890:78               push1 
  2891:38 00c8          pushi c8 // $c8 dispatchEvent
  2894:46 0326 0001 02  calle 326 procedure_0001 2 //  

  289a:39 05            pushi 5 // $5 view
  289c:78               push1 
  289d:38 00d7          pushi d7 // $d7 completed
  28a0:38 011c          pushi 11c // $11c posn
  28a3:7a               push2 
  28a4:39 04            pushi 4 // $4 x
  28a6:76               push0 
  28a7:81 00              lag  
  28a9:4a 04             send 4 

  28ab:36                push 
  28ac:35 0f              ldi f 
  28ae:04                 sub 
  28af:36                push 
  28b0:39 03            pushi 3 // $3 y
  28b2:76               push0 
  28b3:81 00              lag  
  28b5:4a 04             send 4 

  28b7:36                push 
  28b8:39 06            pushi 6 // $6 loop
  28ba:78               push1 
  28bb:7a               push2 
  28bc:39 07            pushi 7 // $7 cel
  28be:78               push1 
  28bf:76               push0 
  28c0:38 00c2          pushi c2 // $c2 show
  28c3:76               push0 
  28c4:72 164e          lofsa $164e // marian
  28c7:4a 1e             send 1e 

  28c9:38 011c          pushi 11c // $11c posn
  28cc:7a               push2 
  28cd:39 04            pushi 4 // $4 x
  28cf:76               push0 
  28d0:81 00              lag  
  28d2:4a 04             send 4 

  28d4:36                push 
  28d5:35 08              ldi 8 
  28d7:02                 add 
  28d8:36                push 
  28d9:39 03            pushi 3 // $3 y
  28db:76               push0 
  28dc:81 00              lag  
  28de:4a 04             send 4 

  28e0:36                push 
  28e1:35 01              ldi 1 
  28e3:04                 sub 
  28e4:36                push 
  28e5:81 00              lag  
  28e7:4a 08             send 8 

  28e9:39 03            pushi 3 // $3 y
  28eb:78               push1 
  28ec:38 02be          pushi 2be // $2be sel_702
  28ef:38 02bf          pushi 2bf // $2bf sel_703
  28f2:45 02 06         callb procedure_0002 6 //  

  28f5:35 14              ldi 14 
  28f7:65 10             aTop cycles 
  28f9:32 04fd            jmp code_2df9 

        code_28fc
  28fc:3c                 dup 
  28fd:35 04              ldi 4 
  28ff:1a                 eq? 
  2900:30 0014            bnt code_2917 
  2903:39 05            pushi 5 // $5 view
  2905:5b 02 ce           lea 2 ce 
  2908:36                push 
  2909:78               push1 
  290a:39 16            pushi 16 // $16 brRight
  290c:7c            pushSelf 
  290d:76               push0 
  290e:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2914:32 04e2            jmp code_2df9 

        code_2917
  2917:3c                 dup 
  2918:35 05              ldi 5 
  291a:1a                 eq? 
  291b:30 0015            bnt code_2933 
  291e:39 05            pushi 5 // $5 view
  2920:5b 02 d2           lea 2 d2 
  2923:36                push 
  2924:39 03            pushi 3 // $3 y
  2926:39 16            pushi 16 // $16 brRight
  2928:7c            pushSelf 
  2929:76               push0 
  292a:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2930:32 04c6            jmp code_2df9 

        code_2933
  2933:3c                 dup 
  2934:35 06              ldi 6 
  2936:1a                 eq? 
  2937:30 0013            bnt code_294d 
  293a:39 04            pushi 4 // $4 x
  293c:5b 02 d6           lea 2 d6 
  293f:36                push 
  2940:78               push1 
  2941:39 16            pushi 16 // $16 brRight
  2943:7c            pushSelf 
  2944:46 0353 0000 08  calle 353 procedure_0000 8 //  

  294a:32 04ac            jmp code_2df9 

        code_294d
  294d:3c                 dup 
  294e:35 07              ldi 7 
  2950:1a                 eq? 
  2951:30 0010            bnt code_2964 
  2954:38 0096          pushi 96 // $96 setCycle
  2957:7a               push2 
  2958:51 1a            class End 
  295a:36                push 
  295b:7c            pushSelf 
  295c:72 164e          lofsa $164e // marian
  295f:4a 08             send 8 

  2961:32 0495            jmp code_2df9 

        code_2964
  2964:3c                 dup 
  2965:35 08              ldi 8 
  2967:1a                 eq? 
  2968:30 0016            bnt code_2981 
  296b:39 2a            pushi 2a // $2a play
  296d:76               push0 
  296e:72 378a          lofsa $378a // rustleSound
  2971:4a 04             send 4 

  2973:38 008e          pushi 8e // $8e setScript
  2976:7a               push2 
  2977:72 2fe0          lofsa $2fe0 // scrollCloseUp
  297a:36                push 
  297b:7c            pushSelf 
  297c:54 08             self 8 

  297e:32 0478            jmp code_2df9 

        code_2981
  2981:3c                 dup 
  2982:35 09              ldi 9 
  2984:1a                 eq? 
  2985:30 0017            bnt code_299f 
  2988:35 01              ldi 1 
  298a:65 22             aTop notKilled 
  298c:39 04            pushi 4 // $4 x
  298e:5b 02 db           lea 2 db 
  2991:36                push 
  2992:39 16            pushi 16 // $16 brRight
  2994:76               push0 
  2995:7c            pushSelf 
  2996:46 0353 0000 08  calle 353 procedure_0000 8 //  

  299c:32 045a            jmp code_2df9 

        code_299f
  299f:3c                 dup 
  29a0:35 0a              ldi a 
  29a2:1a                 eq? 
  29a3:30 0018            bnt code_29be 
  29a6:38 0096          pushi 96 // $96 setCycle
  29a9:7a               push2 
  29aa:51 1b            class Beg 
  29ac:36                push 
  29ad:7c            pushSelf 
  29ae:72 164e          lofsa $164e // marian
  29b1:4a 08             send 8 

  29b3:39 2a            pushi 2a // $2a play
  29b5:76               push0 
  29b6:72 378a          lofsa $378a // rustleSound
  29b9:4a 04             send 4 

  29bb:32 043b            jmp code_2df9 

        code_29be
  29be:3c                 dup 
  29bf:35 0b              ldi b 
  29c1:1a                 eq? 
  29c2:30 0041            bnt code_2a06 
  29c5:39 69            pushi 69 // $69 hide
  29c7:76               push0 
  29c8:72 164e          lofsa $164e // marian
  29cb:4a 04             send 4 

  29cd:39 05            pushi 5 // $5 view
  29cf:78               push1 
  29d0:38 00d7          pushi d7 // $d7 completed
  29d3:38 00a2          pushi a2 // $a2 setLoop
  29d6:78               push1 
  29d7:76               push0 
  29d8:38 0120          pushi 120 // $120 setCel
  29db:78               push1 
  29dc:38 00ff          pushi ff // $ff syncNum
  29df:38 011c          pushi 11c // $11c posn
  29e2:7a               push2 
  29e3:39 04            pushi 4 // $4 x
  29e5:76               push0 
  29e6:81 00              lag  
  29e8:4a 04             send 4 

  29ea:36                push 
  29eb:35 08              ldi 8 
  29ed:04                 sub 
  29ee:36                push 
  29ef:39 03            pushi 3 // $3 y
  29f1:76               push0 
  29f2:81 00              lag  
  29f4:4a 04             send 4 

  29f6:36                push 
  29f7:38 0096          pushi 96 // $96 setCycle
  29fa:7a               push2 
  29fb:51 1b            class Beg 
  29fd:36                push 
  29fe:7c            pushSelf 
  29ff:81 00              lag  
  2a01:4a 22             send 22 

  2a03:32 03f3            jmp code_2df9 

        code_2a06
  2a06:3c                 dup 
  2a07:35 0c              ldi c 
  2a09:1a                 eq? 
  2a0a:30 0064            bnt code_2a71 
  2a0d:38 011c          pushi 11c // $11c posn
  2a10:7a               push2 
  2a11:39 04            pushi 4 // $4 x
  2a13:76               push0 
  2a14:81 00              lag  
  2a16:4a 04             send 4 

  2a18:36                push 
  2a19:35 08              ldi 8 
  2a1b:02                 add 
  2a1c:36                push 
  2a1d:39 03            pushi 3 // $3 y
  2a1f:76               push0 
  2a20:81 00              lag  
  2a22:4a 04             send 4 

  2a24:36                push 
  2a25:81 00              lag  
  2a27:4a 08             send 8 

  2a29:39 05            pushi 5 // $5 view
  2a2b:78               push1 
  2a2c:38 00d3          pushi d3 // $d3 helpIconItem
  2a2f:38 011c          pushi 11c // $11c posn
  2a32:7a               push2 
  2a33:39 04            pushi 4 // $4 x
  2a35:76               push0 
  2a36:81 00              lag  
  2a38:4a 04             send 4 

  2a3a:36                push 
  2a3b:35 1c              ldi 1c 
  2a3d:04                 sub 
  2a3e:36                push 
  2a3f:39 03            pushi 3 // $3 y
  2a41:76               push0 
  2a42:81 00              lag  
  2a44:4a 04             send 4 

  2a46:36                push 
  2a47:39 06            pushi 6 // $6 loop
  2a49:78               push1 
  2a4a:76               push0 
  2a4b:38 00c2          pushi c2 // $c2 show
  2a4e:76               push0 
  2a4f:38 0096          pushi 96 // $96 setCycle
  2a52:7a               push2 
  2a53:51 56            class StopWalk 
  2a55:36                push 
  2a56:38 00d4          pushi d4 // $d4 activateHeight
  2a59:72 164e          lofsa $164e // marian
  2a5c:4a 20             send 20 

  2a5e:39 03            pushi 3 // $3 y
  2a60:78               push1 
  2a61:38 02be          pushi 2be // $2be sel_702
  2a64:38 02bf          pushi 2bf // $2bf sel_703
  2a67:45 02 06         callb procedure_0002 6 //  

  2a6a:35 1e              ldi 1e 
  2a6c:65 16             aTop ticks 
  2a6e:32 0388            jmp code_2df9 

        code_2a71
  2a71:3c                 dup 
  2a72:35 0d              ldi d 
  2a74:1a                 eq? 
  2a75:30 0013            bnt code_2a8b 
  2a78:39 04            pushi 4 // $4 x
  2a7a:5b 02 e0           lea 2 e0 
  2a7d:36                push 
  2a7e:39 16            pushi 16 // $16 brRight
  2a80:78               push1 
  2a81:7c            pushSelf 
  2a82:46 0353 0000 08  calle 353 procedure_0000 8 //  

  2a88:32 036e            jmp code_2df9 

        code_2a8b
  2a8b:3c                 dup 
  2a8c:35 0e              ldi e 
  2a8e:1a                 eq? 
  2a8f:30 0030            bnt code_2ac2 
  2a92:63 22             pToa notKilled 
  2a94:30 001d            bnt code_2ab4 
  2a97:39 6b            pushi 6b // $6b init
  2a99:76               push0 
  2a9a:38 011b          pushi 11b // $11b setMotion
  2a9d:39 04            pushi 4 // $4 x
  2a9f:51 1e            class MoveTo 
  2aa1:36                push 
  2aa2:38 00a1          pushi a1 // $a1 setVol
  2aa5:39 79            pushi 79 // $79 first
  2aa7:7c            pushSelf 
  2aa8:72 306c          lofsa $306c // cursMan
  2aab:4a 10             send 10 

  2aad:35 01              ldi 1 
  2aaf:65 1a             aTop register 
  2ab1:32 0345            jmp code_2df9 

        code_2ab4
  2ab4:67 0a             pTos state 
  2ab6:35 0f              ldi f 
  2ab8:02                 add 
  2ab9:65 0a             aTop state 
  2abb:35 01              ldi 1 
  2abd:65 10             aTop cycles 
  2abf:32 0337            jmp code_2df9 

        code_2ac2
  2ac2:3c                 dup 
  2ac3:35 0f              ldi f 
  2ac5:1a                 eq? 
  2ac6:30 0007            bnt code_2ad0 
  2ac9:35 0f              ldi f 
  2acb:65 16             aTop ticks 
  2acd:32 0329            jmp code_2df9 

        code_2ad0
  2ad0:3c                 dup 
  2ad1:35 10              ldi 10 
  2ad3:1a                 eq? 
  2ad4:30 004c            bnt code_2b23 
  2ad7:39 55            pushi 55 // $55 z
  2ad9:78               push1 
  2ada:38 03e8          pushi 3e8 // $3e8 sel_1000
  2add:81 00              lag  
  2adf:4a 06             send 6 

  2ae1:39 55            pushi 55 // $55 z
  2ae3:78               push1 
  2ae4:38 03e8          pushi 3e8 // $3e8 sel_1000
  2ae7:81 6d              lag  
  2ae9:4a 06             send 6 

  2aeb:39 55            pushi 55 // $55 z
  2aed:78               push1 
  2aee:38 03e8          pushi 3e8 // $3e8 sel_1000
  2af1:72 164e          lofsa $164e // marian
  2af4:4a 06             send 6 

  2af6:39 55            pushi 55 // $55 z
  2af8:78               push1 
  2af9:38 03e8          pushi 3e8 // $3e8 sel_1000
  2afc:72 0c64          lofsa $0c64 // bow
  2aff:4a 06             send 6 

  2b01:39 55            pushi 55 // $55 z
  2b03:78               push1 
  2b04:38 03e8          pushi 3e8 // $3e8 sel_1000
  2b07:72 0cde          lofsa $0cde // quiver
  2b0a:4a 06             send 6 

  2b0c:38 018c          pushi 18c // $18c drawPic
  2b0f:39 04            pushi 4 // $4 x
  2b11:38 00d5          pushi d5 // $d5 has
  2b14:39 0a            pushi a // $a nsLeft
  2b16:78               push1 
  2b17:78               push1 
  2b18:81 02              lag  
  2b1a:4a 0c             send c 

  2b1c:35 02              ldi 2 
  2b1e:65 10             aTop cycles 
  2b20:32 02d6            jmp code_2df9 

        code_2b23
  2b23:3c                 dup 
  2b24:35 11              ldi 11 
  2b26:1a                 eq? 
  2b27:30 0030            bnt code_2b5a 
  2b2a:35 00              ldi 0 
  2b2c:65 1a             aTop register 
  2b2e:38 00bb          pushi bb // $bb setCursor
  2b31:39 04            pushi 4 // $4 x
  2b33:89 13              lsg  
  2b35:78               push1 
  2b36:38 0131          pushi 131 // $131 findPosn
  2b39:38 00be          pushi be // $be maskLoop
  2b3c:81 01              lag  
  2b3e:4a 0c             send c 

  2b40:38 00c2          pushi c2 // $c2 show
  2b43:76               push0 
  2b44:38 011b          pushi 11b // $11b setMotion
  2b47:39 04            pushi 4 // $4 x
  2b49:51 1e            class MoveTo 
  2b4b:36                push 
  2b4c:38 00ca          pushi ca // $ca noClickHelp
  2b4f:39 5d            pushi 5d // $5d handle
  2b51:7c            pushSelf 
  2b52:72 306c          lofsa $306c // cursMan
  2b55:4a 10             send 10 

  2b57:32 029f            jmp code_2df9 

        code_2b5a
  2b5a:3c                 dup 
  2b5b:35 12              ldi 12 
  2b5d:1a                 eq? 
  2b5e:30 0007            bnt code_2b68 
  2b61:35 14              ldi 14 
  2b63:65 16             aTop ticks 
  2b65:32 0291            jmp code_2df9 

        code_2b68
  2b68:3c                 dup 
  2b69:35 13              ldi 13 
  2b6b:1a                 eq? 
  2b6c:30 001f            bnt code_2b8e 
  2b6f:78               push1 
  2b70:72 39e9          lofsa $39e9 // R
  2b73:36                push 
  2b74:40 0572 02        call proc_30ea 2 

  2b78:38 011b          pushi 11b // $11b setMotion
  2b7b:39 04            pushi 4 // $4 x
  2b7d:51 1e            class MoveTo 
  2b7f:36                push 
  2b80:38 00a0          pushi a0 // $a0 mute
  2b83:39 62            pushi 62 // $62 pri
  2b85:7c            pushSelf 
  2b86:72 306c          lofsa $306c // cursMan
  2b89:4a 0c             send c 

  2b8b:32 026b            jmp code_2df9 

        code_2b8e
  2b8e:3c                 dup 
  2b8f:35 14              ldi 14 
  2b91:1a                 eq? 
  2b92:30 0007            bnt code_2b9c 
  2b95:35 14              ldi 14 
  2b97:65 16             aTop ticks 
  2b99:32 025d            jmp code_2df9 

        code_2b9c
  2b9c:3c                 dup 
  2b9d:35 15              ldi 15 
  2b9f:1a                 eq? 
  2ba0:30 001e            bnt code_2bc1 
  2ba3:78               push1 
  2ba4:72 39eb          lofsa $39eb // O
  2ba7:36                push 
  2ba8:40 053e 02        call proc_30ea 2 

  2bac:38 011b          pushi 11b // $11b setMotion
  2baf:39 04            pushi 4 // $4 x
  2bb1:51 1e            class MoveTo 
  2bb3:36                push 
  2bb4:39 7f            pushi 7f // $7f addAfter
  2bb6:39 5e            pushi 5e // $5e min
  2bb8:7c            pushSelf 
  2bb9:72 306c          lofsa $306c // cursMan
  2bbc:4a 0c             send c 

  2bbe:32 0238            jmp code_2df9 

        code_2bc1
  2bc1:3c                 dup 
  2bc2:35 16              ldi 16 
  2bc4:1a                 eq? 
  2bc5:30 0007            bnt code_2bcf 
  2bc8:35 14              ldi 14 
  2bca:65 16             aTop ticks 
  2bcc:32 022a            jmp code_2df9 

        code_2bcf
  2bcf:3c                 dup 
  2bd0:35 17              ldi 17 
  2bd2:1a                 eq? 
  2bd3:30 001f            bnt code_2bf5 
  2bd6:78               push1 
  2bd7:72 39ed          lofsa $39ed // B
  2bda:36                push 
  2bdb:40 050b 02        call proc_30ea 2 

  2bdf:38 011b          pushi 11b // $11b setMotion
  2be2:39 04            pushi 4 // $4 x
  2be4:51 1e            class MoveTo 
  2be6:36                push 
  2be7:38 00c7          pushi c7 // $c7 advanceCurIcon
  2bea:39 66            pushi 66 // $66 flags
  2bec:7c            pushSelf 
  2bed:72 306c          lofsa $306c // cursMan
  2bf0:4a 0c             send c 

  2bf2:32 0204            jmp code_2df9 

        code_2bf5
  2bf5:3c                 dup 
  2bf6:35 18              ldi 18 
  2bf8:1a                 eq? 
  2bf9:30 0007            bnt code_2c03 
  2bfc:35 14              ldi 14 
  2bfe:65 16             aTop ticks 
  2c00:32 01f6            jmp code_2df9 

        code_2c03
  2c03:3c                 dup 
  2c04:35 19              ldi 19 
  2c06:1a                 eq? 
  2c07:30 001f            bnt code_2c29 
  2c0a:78               push1 
  2c0b:72 39ef          lofsa $39ef // I
  2c0e:36                push 
  2c0f:40 04d7 02        call proc_30ea 2 

  2c13:38 011b          pushi 11b // $11b setMotion
  2c16:39 04            pushi 4 // $4 x
  2c18:51 1e            class MoveTo 
  2c1a:36                push 
  2c1b:38 00d1          pushi d1 // $d1 curInvIcon
  2c1e:39 4a            pushi 4a // $4a pragmaFail
  2c20:7c            pushSelf 
  2c21:72 306c          lofsa $306c // cursMan
  2c24:4a 0c             send c 

  2c26:32 01d0            jmp code_2df9 

        code_2c29
  2c29:3c                 dup 
  2c2a:35 1a              ldi 1a 
  2c2c:1a                 eq? 
  2c2d:30 0007            bnt code_2c37 
  2c30:35 14              ldi 14 
  2c32:65 16             aTop ticks 
  2c34:32 01c2            jmp code_2df9 

        code_2c37
  2c37:3c                 dup 
  2c38:35 1b              ldi 1b 
  2c3a:1a                 eq? 
  2c3b:30 001f            bnt code_2c5d 
  2c3e:78               push1 
  2c3f:72 39f1          lofsa $39f1 // N
  2c42:36                push 
  2c43:40 04a3 02        call proc_30ea 2 

  2c47:38 011b          pushi 11b // $11b setMotion
  2c4a:39 04            pushi 4 // $4 x
  2c4c:51 1e            class MoveTo 
  2c4e:36                push 
  2c4f:38 00ae          pushi ae // $ae isType
  2c52:39 7a            pushi 7a // $7a release
  2c54:7c            pushSelf 
  2c55:72 306c          lofsa $306c // cursMan
  2c58:4a 0c             send c 

  2c5a:32 019c            jmp code_2df9 

        code_2c5d
  2c5d:3c                 dup 
  2c5e:35 1c              ldi 1c 
  2c60:1a                 eq? 
  2c61:30 0007            bnt code_2c6b 
  2c64:35 14              ldi 14 
  2c66:65 16             aTop ticks 
  2c68:32 018e            jmp code_2df9 

        code_2c6b
  2c6b:3c                 dup 
  2c6c:35 1d              ldi 1d 
  2c6e:1a                 eq? 
  2c6f:30 0056            bnt code_2cc8 
  2c72:39 03            pushi 3 // $3 y
  2c74:72 39f3          lofsa $39f3 // 
  2c77:36                push 
  2c78:39 6c            pushi 6c // $6c dispose
  2c7a:8a 01a8            lsl local424 
  2c7d:43 1b 06         callk Display 6 

  2c80:38 018c          pushi 18c // $18c drawPic
  2c83:7a               push2 
  2c84:38 00d2          pushi d2 // $d2 useIconItem
  2c87:39 0a            pushi a // $a nsLeft
  2c89:81 02              lag  
  2c8b:4a 08             send 8 

  2c8d:39 55            pushi 55 // $55 z
  2c8f:78               push1 
  2c90:76               push0 
  2c91:81 00              lag  
  2c93:4a 06             send 6 

  2c95:39 55            pushi 55 // $55 z
  2c97:78               push1 
  2c98:39 28            pushi 28 // $28 message
  2c9a:81 6d              lag  
  2c9c:4a 06             send 6 

  2c9e:39 55            pushi 55 // $55 z
  2ca0:78               push1 
  2ca1:76               push0 
  2ca2:72 164e          lofsa $164e // marian
  2ca5:4a 06             send 6 

  2ca7:39 55            pushi 55 // $55 z
  2ca9:78               push1 
  2caa:76               push0 
  2cab:72 0c64          lofsa $0c64 // bow
  2cae:4a 06             send 6 

  2cb0:39 55            pushi 55 // $55 z
  2cb2:78               push1 
  2cb3:76               push0 
  2cb4:72 0cde          lofsa $0cde // quiver
  2cb7:4a 06             send 6 

  2cb9:39 6c            pushi 6c // $6c dispose
  2cbb:76               push0 
  2cbc:72 306c          lofsa $306c // cursMan
  2cbf:4a 04             send 4 

  2cc1:35 02              ldi 2 
  2cc3:65 10             aTop cycles 
  2cc5:32 0131            jmp code_2df9 

        code_2cc8
  2cc8:3c                 dup 
  2cc9:35 1e              ldi 1e 
  2ccb:1a                 eq? 
  2ccc:30 0014            bnt code_2ce3 
  2ccf:39 05            pushi 5 // $5 view
  2cd1:5b 02 e6           lea 2 e6 
  2cd4:36                push 
  2cd5:39 16            pushi 16 // $16 brRight
  2cd7:78               push1 
  2cd8:7c            pushSelf 
  2cd9:76               push0 
  2cda:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2ce0:32 0116            jmp code_2df9 

        code_2ce3
  2ce3:3c                 dup 
  2ce4:35 1f              ldi 1f 
  2ce6:1a                 eq? 
  2ce7:30 0015            bnt code_2cff 
  2cea:39 05            pushi 5 // $5 view
  2cec:5b 02 f2           lea 2 f2 
  2cef:36                push 
  2cf0:39 16            pushi 16 // $16 brRight
  2cf2:39 03            pushi 3 // $3 y
  2cf4:7c            pushSelf 
  2cf5:76               push0 
  2cf6:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2cfc:32 00fa            jmp code_2df9 

        code_2cff
  2cff:3c                 dup 
  2d00:35 20              ldi 20 
  2d02:1a                 eq? 
  2d03:30 0016            bnt code_2d1c 
  2d06:39 05            pushi 5 // $5 view
  2d08:5a 0002 0100       lea 2 100 
  2d0d:36                push 
  2d0e:39 16            pushi 16 // $16 brRight
  2d10:78               push1 
  2d11:7c            pushSelf 
  2d12:76               push0 
  2d13:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2d19:32 00dd            jmp code_2df9 

        code_2d1c
  2d1c:3c                 dup 
  2d1d:35 21              ldi 21 
  2d1f:1a                 eq? 
  2d20:30 0054            bnt code_2d77 
  2d23:39 03            pushi 3 // $3 y
  2d25:38 04ba          pushi 4ba // $4ba sel_1210
  2d28:38 009c          pushi 9c // $9c stop
  2d2b:5b 04 02           lea 4 2 
  2d2e:36                push 
  2d2f:43 49 06         callk GetFarText 6 

  2d32:39 03            pushi 3 // $3 y
  2d34:38 0525          pushi 525 // $525 sel_1317
  2d37:89 7b              lsg  
  2d39:5b 04 02           lea 4 2 
  2d3c:36                push 
  2d3d:78               push1 
  2d3e:5b 04 02           lea 4 2 
  2d41:36                push 
  2d42:43 46 02         callk StrLen 2 

  2d45:02                 add 
  2d46:36                push 
  2d47:43 49 06         callk GetFarText 6 

  2d4a:78               push1 
  2d4b:39 09            pushi 9 // $9 nsTop
  2d4d:47 0d 06 02      calle d procedure_0006 2 //  

  2d51:38 00c2          pushi c2 // $c2 show
  2d54:76               push0 
  2d55:38 01fd          pushi 1fd // $1fd say
  2d58:39 05            pushi 5 // $5 view
  2d5a:5b 04 02           lea 4 2 
  2d5d:36                push 
  2d5e:76               push0 
  2d5f:76               push0 
  2d60:76               push0 
  2d61:7c            pushSelf 
  2d62:7a               push2 
  2d63:38 0353          pushi 353 // $353 sel_851
  2d66:7a               push2 
  2d67:43 02 04         callk ScriptID 4 

  2d6a:65 1a             aTop register 
  2d6c:4a 12             send 12 

  2d6e:78               push1 
  2d6f:76               push0 
  2d70:47 0d 06 02      calle d procedure_0006 2 //  

  2d74:32 0082            jmp code_2df9 

        code_2d77
  2d77:3c                 dup 
  2d78:35 22              ldi 22 
  2d7a:1a                 eq? 
  2d7b:30 0023            bnt code_2da1 
  2d7e:63 22             pToa notKilled 
  2d80:18                 not 
  2d81:30 0007            bnt code_2d8b 
  2d84:39 6c            pushi 6c // $6c dispose
  2d86:76               push0 
  2d87:63 1a             pToa register 
  2d89:4a 04             send 4 


        code_2d8b
  2d8b:39 05            pushi 5 // $5 view
  2d8d:5a 0002 0105       lea 2 105 
  2d92:36                push 
  2d93:39 16            pushi 16 // $16 brRight
  2d95:78               push1 
  2d96:7c            pushSelf 
  2d97:76               push0 
  2d98:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2d9e:32 0058            jmp code_2df9 

        code_2da1
  2da1:3c                 dup 
  2da2:35 23              ldi 23 
  2da4:1a                 eq? 
  2da5:30 0017            bnt code_2dbf 
  2da8:39 05            pushi 5 // $5 view
  2daa:5a 0002 010a       lea 2 10a 
  2daf:36                push 
  2db0:39 16            pushi 16 // $16 brRight
  2db2:39 03            pushi 3 // $3 y
  2db4:7c            pushSelf 
  2db5:76               push0 
  2db6:46 0353 0000 0a  calle 353 procedure_0000 a //  

  2dbc:32 003a            jmp code_2df9 

        code_2dbf
  2dbf:3c                 dup 
  2dc0:35 24              ldi 24 
  2dc2:1a                 eq? 
  2dc3:30 0015            bnt code_2ddb 
  2dc6:39 04            pushi 4 // $4 x
  2dc8:5a 0002 0113       lea 2 113 
  2dcd:36                push 
  2dce:39 16            pushi 16 // $16 brRight
  2dd0:78               push1 
  2dd1:7c            pushSelf 
  2dd2:46 0353 0000 08  calle 353 procedure_0000 8 //  

  2dd8:32 001e            jmp code_2df9 

        code_2ddb
  2ddb:3c                 dup 
  2ddc:35 25              ldi 25 
  2dde:1a                 eq? 
  2ddf:30 0017            bnt code_2df9 
  2de2:39 11            pushi 11 // $11 signal
  2de4:78               push1 
  2de5:76               push0 
  2de6:72 164e          lofsa $164e // marian
  2de9:4a 06             send 6 

  2deb:35 00              ldi 0 
  2ded:a3 0c              sal local12 
  2def:76               push0 
  2df0:40 d3f2 00        call proc_01e6 0 

  2df4:39 6c            pushi 6c // $6c dispose
  2df6:76               push0 
  2df7:54 04             self 4 


        code_2df9
  2df9:3a                toss 
  2dfa:48                 ret 
  2dfb:00                bnot 
    )

)

// 2fda
(instance scrollCloseUp of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (doit) // method_2e38
  2e38:83 00              lal local0 
  2e3a:30 0026            bnt code_2e63 
  2e3d:38 009a          pushi 9a // $9a prevSignal
  2e40:76               push0 
  2e41:72 37f6          lofsa $37f6 // letterSound
  2e44:4a 04             send 4 

  2e46:36                push 
  2e47:35 ff              ldi ff 
  2e49:1a                 eq? 
  2e4a:30 0016            bnt code_2e63 
  2e4d:38 009d          pushi 9d // $9d pause
  2e50:78               push1 
  2e51:76               push0 
  2e52:81 64              lag  
  2e54:4a 06             send 6 

  2e56:38 009d          pushi 9d // $9d pause
  2e59:78               push1 
  2e5a:76               push0 
  2e5b:81 71              lag  
  2e5d:4a 06             send 6 

  2e5f:35 00              ldi 0 
  2e61:a3 00              sal local0 

        code_2e63
  2e63:39 3c            pushi 3c // $3c doit
  2e65:76               push0 
  2e66:59 01            &rest 1 
  2e68:57 06 04         super Script 4 

  2e6b:48                 ret 
    )

    (method (dispose) // method_2e6c
  2e6c:39 6c            pushi 6c // $6c dispose
  2e6e:76               push0 
  2e6f:72 37f6          lofsa $37f6 // letterSound
  2e72:4a 04             send 4 

  2e74:39 6c            pushi 6c // $6c dispose
  2e76:76               push0 
  2e77:59 01            &rest 1 
  2e79:57 06 04         super Script 4 

  2e7c:48                 ret 
    )

    (method (changeState) // method_2e7d
  2e7d:3f 02             link 2 // (var $2)
  2e7f:87 01              lap param1 
  2e81:65 0a             aTop state 
  2e83:36                push 
  2e84:3c                 dup 
  2e85:35 00              ldi 0 
  2e87:1a                 eq? 
  2e88:30 0049            bnt code_2ed4 
  2e8b:39 55            pushi 55 // $55 z
  2e8d:78               push1 
  2e8e:38 03e8          pushi 3e8 // $3e8 sel_1000
  2e91:81 00              lag  
  2e93:4a 06             send 6 

  2e95:39 55            pushi 55 // $55 z
  2e97:78               push1 
  2e98:38 03e8          pushi 3e8 // $3e8 sel_1000
  2e9b:81 6d              lag  
  2e9d:4a 06             send 6 

  2e9f:39 55            pushi 55 // $55 z
  2ea1:78               push1 
  2ea2:38 03e8          pushi 3e8 // $3e8 sel_1000
  2ea5:72 164e          lofsa $164e // marian
  2ea8:4a 06             send 6 

  2eaa:39 55            pushi 55 // $55 z
  2eac:78               push1 
  2ead:38 03e8          pushi 3e8 // $3e8 sel_1000
  2eb0:72 0c64          lofsa $0c64 // bow
  2eb3:4a 06             send 6 

  2eb5:39 55            pushi 55 // $55 z
  2eb7:78               push1 
  2eb8:38 03e8          pushi 3e8 // $3e8 sel_1000
  2ebb:72 0cde          lofsa $0cde // quiver
  2ebe:4a 06             send 6 

  2ec0:38 018c          pushi 18c // $18c drawPic
  2ec3:7a               push2 
  2ec4:38 00d3          pushi d3 // $d3 helpIconItem
  2ec7:39 06            pushi 6 // $6 loop
  2ec9:81 02              lag  
  2ecb:4a 08             send 8 

  2ecd:35 02              ldi 2 
  2ecf:65 10             aTop cycles 
  2ed1:32 00fd            jmp code_2fd1 

        code_2ed4
  2ed4:3c                 dup 
  2ed5:35 01              ldi 1 
  2ed7:1a                 eq? 
  2ed8:30 0007            bnt code_2ee2 
  2edb:35 4b              ldi 4b 
  2edd:65 16             aTop ticks 
  2edf:32 00ef            jmp code_2fd1 

        code_2ee2
  2ee2:3c                 dup 
  2ee3:35 02              ldi 2 
  2ee5:1a                 eq? 
  2ee6:30 0038            bnt code_2f21 
  2ee9:39 05            pushi 5 // $5 view
  2eeb:78               push1 
  2eec:38 00d0          pushi d0 // $d0 prevIcon
  2eef:39 06            pushi 6 // $6 loop
  2ef1:78               push1 
  2ef2:76               push0 
  2ef3:39 07            pushi 7 // $7 cel
  2ef5:78               push1 
  2ef6:7a               push2 
  2ef7:39 04            pushi 4 // $4 x
  2ef9:78               push1 
  2efa:38 009e          pushi 9e // $9e hold
  2efd:39 03            pushi 3 // $3 y
  2eff:78               push1 
  2f00:39 76            pushi 76 // $76 allTrue
  2f02:38 00db          pushi db // $db cycleSpeed
  2f05:78               push1 
  2f06:39 23            pushi 23 // $23 window
  2f08:39 6b            pushi 6b // $6b init
  2f0a:76               push0 
  2f0b:38 0096          pushi 96 // $96 setCycle
  2f0e:7a               push2 
  2f0f:51 1b            class Beg 
  2f11:36                push 
  2f12:7c            pushSelf 
  2f13:39 6a            pushi 6a // $6a new
  2f15:76               push0 
  2f16:51 30            class Actor 
  2f18:4a 04             send 4 

  2f1a:65 1a             aTop register 
  2f1c:4a 30             send 30 

  2f1e:32 00b0            jmp code_2fd1 

        code_2f21
  2f21:3c                 dup 
  2f22:35 03              ldi 3 
  2f24:1a                 eq? 
  2f25:30 0025            bnt code_2f4d 
  2f28:38 009d          pushi 9d // $9d pause
  2f2b:78               push1 
  2f2c:78               push1 
  2f2d:81 71              lag  
  2f2f:4a 06             send 6 

  2f31:38 009d          pushi 9d // $9d pause
  2f34:78               push1 
  2f35:78               push1 
  2f36:81 64              lag  
  2f38:4a 06             send 6 

  2f3a:35 01              ldi 1 
  2f3c:a3 00              sal local0 
  2f3e:39 2a            pushi 2a // $2a play
  2f40:76               push0 
  2f41:72 37f6          lofsa $37f6 // letterSound
  2f44:4a 04             send 4 

  2f46:35 05              ldi 5 
  2f48:65 12             aTop seconds 
  2f4a:32 0084            jmp code_2fd1 

        code_2f4d
  2f4d:3c                 dup 
  2f4e:35 04              ldi 4 
  2f50:1a                 eq? 
  2f51:30 000f            bnt code_2f63 
  2f54:38 0096          pushi 96 // $96 setCycle
  2f57:7a               push2 
  2f58:51 1a            class End 
  2f5a:36                push 
  2f5b:7c            pushSelf 
  2f5c:63 1a             pToa register 
  2f5e:4a 08             send 8 

  2f60:32 006e            jmp code_2fd1 

        code_2f63
  2f63:3c                 dup 
  2f64:35 05              ldi 5 
  2f66:1a                 eq? 
  2f67:30 000e            bnt code_2f78 
  2f6a:39 6c            pushi 6c // $6c dispose
  2f6c:76               push0 
  2f6d:63 1a             pToa register 
  2f6f:4a 04             send 4 

  2f71:35 1e              ldi 1e 
  2f73:65 16             aTop ticks 
  2f75:32 0059            jmp code_2fd1 

        code_2f78
  2f78:3c                 dup 
  2f79:35 06              ldi 6 
  2f7b:1a                 eq? 
  2f7c:30 0040            bnt code_2fbf 
  2f7f:38 018c          pushi 18c // $18c drawPic
  2f82:7a               push2 
  2f83:38 00d2          pushi d2 // $d2 useIconItem
  2f86:39 06            pushi 6 // $6 loop
  2f88:81 02              lag  
  2f8a:4a 08             send 8 

  2f8c:39 55            pushi 55 // $55 z
  2f8e:78               push1 
  2f8f:76               push0 
  2f90:81 00              lag  
  2f92:4a 06             send 6 

  2f94:39 55            pushi 55 // $55 z
  2f96:78               push1 
  2f97:39 28            pushi 28 // $28 message
  2f99:81 6d              lag  
  2f9b:4a 06             send 6 

  2f9d:39 55            pushi 55 // $55 z
  2f9f:78               push1 
  2fa0:76               push0 
  2fa1:72 164e          lofsa $164e // marian
  2fa4:4a 06             send 6 

  2fa6:39 55            pushi 55 // $55 z
  2fa8:78               push1 
  2fa9:76               push0 
  2faa:72 0c64          lofsa $0c64 // bow
  2fad:4a 06             send 6 

  2faf:39 55            pushi 55 // $55 z
  2fb1:78               push1 
  2fb2:76               push0 
  2fb3:72 0cde          lofsa $0cde // quiver
  2fb6:4a 06             send 6 

  2fb8:35 02              ldi 2 
  2fba:65 10             aTop cycles 
  2fbc:32 0012            jmp code_2fd1 

        code_2fbf
  2fbf:3c                 dup 
  2fc0:35 07              ldi 7 
  2fc2:1a                 eq? 
  2fc3:30 000b            bnt code_2fd1 
  2fc6:78               push1 
  2fc7:39 22            pushi 22 // $22 type
  2fc9:45 06 02         callb procedure_0006 2 //  

  2fcc:39 6c            pushi 6c // $6c dispose
  2fce:76               push0 
  2fcf:54 04             self 4 


        code_2fd1
  2fd1:3a                toss 
  2fd2:48                 ret 
  2fd3:00                bnot 
    )

)

// 3066
(instance cursMan of Actor
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $4
        view $b6
        loop $1
        cel $0
        priority $f
        underBits $0
        signal $4898
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $0
        xLast $0
        yLast $0
        xStep $4
        moveSpeed $3
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (init) // method_3016
  3016:39 04            pushi 4 // $4 x
  3018:76               push0 
  3019:38 0141          pushi 141 // $141 curEvent
  301c:76               push0 
  301d:51 31            class User 
  301f:4a 04             send 4 

  3021:4a 04             send 4 

  3023:65 08             aTop x 
  3025:39 03            pushi 3 // $3 y
  3027:76               push0 
  3028:38 0141          pushi 141 // $141 curEvent
  302b:76               push0 
  302c:51 31            class User 
  302e:4a 04             send 4 

  3030:4a 04             send 4 

  3032:65 0a             aTop y 
  3034:39 6b            pushi 6b // $6b init
  3036:76               push0 
  3037:57 30 04         super Actor 4 

  303a:34 4898            ldi 4898 
  303d:65 38             aTop signal 
  303f:48                 ret 
    )

    (method (doit) // method_3040
  3040:39 3c            pushi 3c // $3c doit
  3042:76               push0 
  3043:59 01            &rest 1 
  3045:57 30 04         super Actor 4 

  3048:38 0089          pushi 89 // $89 register
  304b:76               push0 
  304c:72 2e08          lofsa $2e08 // giveScroll
  304f:4a 04             send 4 

  3051:30 000b            bnt code_305f 
  3054:39 04            pushi 4 // $4 x
  3056:7a               push2 
  3057:78               push1 
  3058:67 08             pTos x 
  305a:67 0a             pTos y 
  305c:43 28 08         callk SetCursor 8 


        code_305f
  305f:48                 ret 
    )

)

// 32cc
(instance giveFScroll of TScript
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
        notKilled $1
    )
    (method (changeState) // method_3123
  3123:3f 98             link 98 // (var $98)
  3125:87 01              lap param1 
  3127:65 0a             aTop state 
  3129:36                push 
  312a:3c                 dup 
  312b:35 00              ldi 0 
  312d:1a                 eq? 
  312e:30 0052            bnt code_3183 
  3131:76               push0 
  3132:45 03 00         callb procedure_0003 0 //  

  3135:38 0133          pushi 133 // $133 onControl
  3138:78               push1 
  3139:78               push1 
  313a:81 00              lag  
  313c:4a 06             send 6 

  313e:36                push 
  313f:35 04              ldi 4 
  3141:12                 and 
  3142:18                 not 
  3143:30 0013            bnt code_3159 
  3146:38 008e          pushi 8e // $8e setScript
  3149:7a               push2 
  314a:72 0910          lofsa $0910 // disarm
  314d:36                push 
  314e:7c            pushSelf 
  314f:54 08             self 8 

  3151:35 04              ldi 4 
  3153:a2 01ae            sal local430 
  3156:6d 0a            dpToa state 
  3158:48                 ret 

        code_3159
  3159:35 01              ldi 1 
  315b:65 22             aTop notKilled 
  315d:38 011b          pushi 11b // $11b setMotion
  3160:39 04            pushi 4 // $4 x
  3162:51 24            class PolyPath 
  3164:36                push 
  3165:39 04            pushi 4 // $4 x
  3167:76               push0 
  3168:72 164e          lofsa $164e // marian
  316b:4a 04             send 4 

  316d:36                push 
  316e:35 1c              ldi 1c 
  3170:02                 add 
  3171:36                push 
  3172:39 03            pushi 3 // $3 y
  3174:76               push0 
  3175:72 164e          lofsa $164e // marian
  3178:4a 04             send 4 

  317a:36                push 
  317b:7c            pushSelf 
  317c:81 00              lag  
  317e:4a 0c             send c 

  3180:32 0141            jmp code_32c4 

        code_3183
  3183:3c                 dup 
  3184:35 01              ldi 1 
  3186:1a                 eq? 
  3187:30 001a            bnt code_31a4 
  318a:7a               push2 
  318b:89 00              lsg  
  318d:72 164e          lofsa $164e // marian
  3190:36                push 
  3191:45 09 04         callb procedure_0009 4 //  

  3194:39 06            pushi 6 // $6 loop
  3196:78               push1 
  3197:76               push0 
  3198:72 164e          lofsa $164e // marian
  319b:4a 06             send 6 

  319d:35 14              ldi 14 
  319f:65 16             aTop ticks 
  31a1:32 0120            jmp code_32c4 

        code_31a4
  31a4:3c                 dup 
  31a5:35 02              ldi 2 
  31a7:1a                 eq? 
  31a8:30 0028            bnt code_31d3 
  31ab:39 05            pushi 5 // $5 view
  31ad:78               push1 
  31ae:38 00d7          pushi d7 // $d7 completed
  31b1:39 06            pushi 6 // $6 loop
  31b3:78               push1 
  31b4:39 04            pushi 4 // $4 x
  31b6:38 0120          pushi 120 // $120 setCel
  31b9:78               push1 
  31ba:38 00ff          pushi ff // $ff syncNum
  31bd:38 00db          pushi db // $db cycleSpeed
  31c0:78               push1 
  31c1:39 06            pushi 6 // $6 loop
  31c3:38 0096          pushi 96 // $96 setCycle
  31c6:7a               push2 
  31c7:51 1b            class Beg 
  31c9:36                push 
  31ca:7c            pushSelf 
  31cb:72 164e          lofsa $164e // marian
  31ce:4a 20             send 20 

  31d0:32 00f1            jmp code_32c4 

        code_31d3
  31d3:3c                 dup 
  31d4:35 03              ldi 3 
  31d6:1a                 eq? 
  31d7:30 0064            bnt code_323e 
  31da:38 00d5          pushi d5 // $d5 has
  31dd:78               push1 
  31de:39 0a            pushi a // $a nsLeft
  31e0:81 00              lag  
  31e2:4a 06             send 6 

  31e4:30 001f            bnt code_3206 
  31e7:39 04            pushi 4 // $4 x
  31e9:5a 0002 0143       lea 2 143 
  31ee:36                push 
  31ef:78               push1 
  31f0:39 16            pushi 16 // $16 brRight
  31f2:7c            pushSelf 
  31f3:46 0353 0000 08  calle 353 procedure_0000 8 //  

  31f9:38 0148          pushi 148 // $148 put
  31fc:78               push1 
  31fd:39 10            pushi 10 // $10 lsRight
  31ff:81 00              lag  
  3201:4a 06             send 6 

  3203:32 00be            jmp code_32c4 

        code_3206
  3206:83 0a              lal local10 
  3208:30 0017            bnt code_3222 
  320b:39 05            pushi 5 // $5 view
  320d:78               push1 
  320e:5a 0002 013f       lea 2 13f 
  3213:36                push 
  3214:39 16            pushi 16 // $16 brRight
  3216:39 03            pushi 3 // $3 y
  3218:7c            pushSelf 
  3219:46 0353 0000 0a  calle 353 procedure_0000 a //  

  321f:32 00a2            jmp code_32c4 

        code_3222
  3222:35 01              ldi 1 
  3224:30 009d            bnt code_32c4 
  3227:a3 0a              sal local10 
  3229:39 04            pushi 4 // $4 x
  322b:5a 0002 0136       lea 2 136 
  3230:36                push 
  3231:78               push1 
  3232:39 16            pushi 16 // $16 brRight
  3234:7c            pushSelf 
  3235:46 0353 0000 08  calle 353 procedure_0000 8 //  

  323b:32 0086            jmp code_32c4 

        code_323e
  323e:3c                 dup 
  323f:35 04              ldi 4 
  3241:1a                 eq? 
  3242:30 003a            bnt code_327f 
  3245:38 00d5          pushi d5 // $d5 has
  3248:78               push1 
  3249:39 0a            pushi a // $a nsLeft
  324b:81 00              lag  
  324d:4a 06             send 6 

  324f:30 001d            bnt code_326f 
  3252:38 0148          pushi 148 // $148 put
  3255:78               push1 
  3256:39 10            pushi 10 // $10 lsRight
  3258:81 00              lag  
  325a:4a 06             send 6 

  325c:38 0096          pushi 96 // $96 setCycle
  325f:39 04            pushi 4 // $4 x
  3261:51 19            class CT 
  3263:36                push 
  3264:7a               push2 
  3265:78               push1 
  3266:7c            pushSelf 
  3267:72 164e          lofsa $164e // marian
  326a:4a 0c             send c 

  326c:32 0055            jmp code_32c4 

        code_326f
  326f:38 0096          pushi 96 // $96 setCycle
  3272:7a               push2 
  3273:51 1a            class End 
  3275:36                push 
  3276:7c            pushSelf 
  3277:72 164e          lofsa $164e // marian
  327a:4a 08             send 8 

  327c:32 0045            jmp code_32c4 

        code_327f
  327f:3c                 dup 
  3280:35 05              ldi 5 
  3282:1a                 eq? 
  3283:30 003e            bnt code_32c4 
  3286:39 05            pushi 5 // $5 view
  3288:78               push1 
  3289:38 00d3          pushi d3 // $d3 helpIconItem
  328c:38 011c          pushi 11c // $11c posn
  328f:7a               push2 
  3290:39 04            pushi 4 // $4 x
  3292:76               push0 
  3293:81 00              lag  
  3295:4a 04             send 4 

  3297:36                push 
  3298:35 1c              ldi 1c 
  329a:04                 sub 
  329b:36                push 
  329c:39 03            pushi 3 // $3 y
  329e:76               push0 
  329f:81 00              lag  
  32a1:4a 04             send 4 

  32a3:36                push 
  32a4:39 06            pushi 6 // $6 loop
  32a6:78               push1 
  32a7:76               push0 
  32a8:38 00c2          pushi c2 // $c2 show
  32ab:76               push0 
  32ac:38 0096          pushi 96 // $96 setCycle
  32af:7a               push2 
  32b0:51 56            class StopWalk 
  32b2:36                push 
  32b3:38 00d4          pushi d4 // $d4 activateHeight
  32b6:72 164e          lofsa $164e // marian
  32b9:4a 20             send 20 

  32bb:39 6c            pushi 6c // $6c dispose
  32bd:76               push0 
  32be:54 04             self 4 

  32c0:76               push0 
  32c1:45 04 00         callb procedure_0004 0 //  


        code_32c4
  32c4:3a                toss 
  32c5:48                 ret 
    )

)

// 33d4
(instance tryBlowinIt of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_3302
  3302:87 01              lap param1 
  3304:65 0a             aTop state 
  3306:36                push 
  3307:3c                 dup 
  3308:35 00              ldi 0 
  330a:1a                 eq? 
  330b:30 0029            bnt code_3337 
  330e:76               push0 
  330f:45 03 00         callb procedure_0003 0 //  

  3312:89 82              lsg  
  3314:35 0a              ldi a 
  3316:1a                 eq? 
  3317:30 0014            bnt code_332e 
  331a:39 03            pushi 3 // $3 y
  331c:38 04ba          pushi 4ba // $4ba sel_1210
  331f:38 00f1          pushi f1 // $f1 escaping
  3322:7c            pushSelf 
  3323:47 0d 04 06      calle d procedure_0004 6 //  

  3327:35 00              ldi 0 
  3329:a3 02              sal local2 
  332b:32 009d            jmp code_33cb 

        code_332e
  332e:6b 0a            ipToa state 
  3330:35 01              ldi 1 
  3332:65 10             aTop cycles 
  3334:32 0094            jmp code_33cb 

        code_3337
  3337:3c                 dup 
  3338:35 01              ldi 1 
  333a:1a                 eq? 
  333b:30 000d            bnt code_334b 
  333e:76               push0 
  333f:40 cea3 00        call proc_01e6 0 

  3343:39 6c            pushi 6c // $6c dispose
  3345:76               push0 
  3346:54 04             self 4 

  3348:32 0080            jmp code_33cb 

        code_334b
  334b:3c                 dup 
  334c:35 02              ldi 2 
  334e:1a                 eq? 
  334f:30 0037            bnt code_3389 
  3352:39 77            pushi 77 // $77 contains
  3354:78               push1 
  3355:72 164e          lofsa $164e // marian
  3358:36                push 
  3359:81 05              lag  
  335b:4a 06             send 6 

  335d:65 1a             aTop register 
  335f:30 0017            bnt code_3379 
  3362:39 05            pushi 5 // $5 view
  3364:78               push1 
  3365:5a 0002 018f       lea 2 18f 
  336a:36                push 
  336b:39 16            pushi 16 // $16 brRight
  336d:39 03            pushi 3 // $3 y
  336f:7c            pushSelf 
  3370:46 0353 0000 0a  calle 353 procedure_0000 a //  

  3376:32 0052            jmp code_33cb 

        code_3379
  3379:39 03            pushi 3 // $3 y
  337b:38 04ba          pushi 4ba // $4ba sel_1210
  337e:38 00f0          pushi f0 // $f0 thisTurn
  3381:7c            pushSelf 
  3382:47 0d 04 06      calle d procedure_0004 6 //  

  3386:32 0042            jmp code_33cb 

        code_3389
  3389:3c                 dup 
  338a:35 03              ldi 3 
  338c:1a                 eq? 
  338d:30 000f            bnt code_339f 
  3390:35 01              ldi 1 
  3392:65 10             aTop cycles 
  3394:63 1a             pToa register 
  3396:18                 not 
  3397:30 0031            bnt code_33cb 
  339a:6b 0a            ipToa state 
  339c:32 002c            jmp code_33cb 

        code_339f
  339f:3c                 dup 
  33a0:35 04              ldi 4 
  33a2:1a                 eq? 
  33a3:30 0014            bnt code_33ba 
  33a6:39 04            pushi 4 // $4 x
  33a8:5a 0002 0193       lea 2 193 
  33ad:36                push 
  33ae:78               push1 
  33af:76               push0 
  33b0:7c            pushSelf 
  33b1:46 0353 0000 08  calle 353 procedure_0000 8 //  

  33b7:32 0011            jmp code_33cb 

        code_33ba
  33ba:3c                 dup 
  33bb:35 05              ldi 5 
  33bd:1a                 eq? 
  33be:30 000a            bnt code_33cb 
  33c1:76               push0 
  33c2:40 ce20 00        call proc_01e6 0 

  33c6:39 6c            pushi 6c // $6c dispose
  33c8:76               push0 
  33c9:54 04             self 4 


        code_33cb
  33cb:3a                toss 
  33cc:48                 ret 
  33cd:00                bnot 
    )

)

// 344e
(instance egoActions of SpecialDoVerb
    (properties
    )
    (method (doVerb) // method_3408
  3408:8f 01              lsp param1 
  340a:3c                 dup 
  340b:35 04              ldi 4 
  340d:1a                 eq? 
  340e:30 0019            bnt code_342a 
  3411:8f 02              lsp param2 
  3413:35 01              ldi 1 
  3415:1a                 eq? 
  3416:30 002d            bnt code_3446 
  3419:38 008e          pushi 8e // $8e setScript
  341c:78               push1 
  341d:72 33da          lofsa $33da // tryBlowinIt
  3420:36                push 
  3421:81 02              lag  
  3423:4a 06             send 6 

  3425:35 01              ldi 1 
  3427:32 001c            jmp code_3446 

        code_342a
  342a:3c                 dup 
  342b:35 03              ldi 3 
  342d:1a                 eq? 
  342e:30 0015            bnt code_3446 
  3431:78               push1 
  3432:39 22            pushi 22 // $22 type
  3434:45 05 02         callb procedure_0005 2 //  

  3437:30 000c            bnt code_3446 
  343a:38 008e          pushi 8e // $8e setScript
  343d:78               push1 
  343e:72 3490          lofsa $3490 // waitForIt
  3441:36                push 
  3442:81 02              lag  
  3444:4a 06             send 6 


        code_3446
  3446:3a                toss 
  3447:48                 ret 
    )

)

// 348a
(instance waitForIt of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (doit) // method_3468
  3468:78               push1 
  3469:39 6e            pushi 6e // $6e showSelf
  346b:45 05 02         callb procedure_0005 2 //  

  346e:30 0012            bnt code_3483 
  3471:78               push1 
  3472:39 6e            pushi 6e // $6e showSelf
  3474:45 07 02         callb procedure_0007 2 //  

  3477:38 008e          pushi 8e // $8e setScript
  347a:78               push1 
  347b:72 36a6          lofsa $36a6 // willowTalk
  347e:36                push 
  347f:63 08             pToa client 
  3481:4a 06             send 6 


        code_3483
  3483:48                 ret 
    )

)

// 36a0
(instance willowTalk of TScript
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
        notKilled $1
    )
    (method (changeState) // method_34be
  34be:87 01              lap param1 
  34c0:65 0a             aTop state 
  34c2:36                push 
  34c3:3c                 dup 
  34c4:35 00              ldi 0 
  34c6:1a                 eq? 
  34c7:30 0139            bnt code_3603 
  34ca:76               push0 
  34cb:45 03 00         callb procedure_0003 0 //  

  34ce:39 77            pushi 77 // $77 contains
  34d0:78               push1 
  34d1:72 164e          lofsa $164e // marian
  34d4:36                push 
  34d5:81 05              lag  
  34d7:4a 06             send 6 

  34d9:30 0055            bnt code_3531 
  34dc:89 82              lsg  
  34de:35 07              ldi 7 
  34e0:1a                 eq? 
  34e1:30 0035            bnt code_3519 
  34e4:c3 01              +al local1 
  34e6:35 04              ldi 4 
  34e8:65 0a             aTop state 
  34ea:8b 01              lsl local1 
  34ec:35 05              ldi 5 
  34ee:20                 ge? 
  34ef:30 0008            bnt code_34fa 
  34f2:5a 0002 01b9       lea 2 1b9 
  34f7:32 001a            jmp code_3514 

        code_34fa
  34fa:89 7c              lsg  
  34fc:35 37              ldi 37 
  34fe:1a                 eq? 
  34ff:30 0008            bnt code_350a 
  3502:5a 0002 01b1       lea 2 1b1 
  3507:32 000a            jmp code_3514 

        code_350a
  350a:35 01              ldi 1 
  350c:30 0005            bnt code_3514 
  350f:5a 0002 01b5       lea 2 1b5 

        code_3514
  3514:65 1a             aTop register 
  3516:32 00e3            jmp code_35fc 

        code_3519
  3519:35 02              ldi 2 
  351b:65 0a             aTop state 
  351d:89 7c              lsg  
  351f:35 13              ldi 13 
  3521:1a                 eq? 
  3522:30 00d7            bnt code_35fc 
  3525:6b 0a            ipToa state 
  3527:5a 0002 01e4       lea 2 1e4 
  352c:65 1a             aTop register 
  352e:32 00cb            jmp code_35fc 

        code_3531
  3531:89 7c              lsg  
  3533:35 13              ldi 13 
  3535:1c                 ne? 
  3536:2e 000f             bt code_3548 
  3539:78               push1 
  353a:39 23            pushi 23 // $23 window
  353c:45 05 02         callb procedure_0005 2 //  

  353f:18                 not 
  3540:2e 0005             bt code_3548 
  3543:89 7e              lsg  
  3545:35 00              ldi 0 
  3547:1c                 ne? 

        code_3548
  3548:30 000e            bnt code_3559 
  354b:39 6c            pushi 6c // $6c dispose
  354d:76               push0 
  354e:54 04             self 4 

  3550:76               push0 
  3551:40 cc91 00        call proc_01e6 0 

  3555:48                 ret 
  3556:32 00a3            jmp code_35fc 

        code_3559
  3559:83 01              lal local1 
  355b:30 000e            bnt code_356c 
  355e:5a 0002 01c9       lea 2 1c9 
  3563:65 1a             aTop register 
  3565:35 03              ldi 3 
  3567:65 0a             aTop state 
  3569:32 0090            jmp code_35fc 

        code_356c
  356c:35 01              ldi 1 
  356e:30 008b            bnt code_35fc 
  3571:a3 01              sal local1 
  3573:89 82              lsg  
  3575:3c                 dup 
  3576:35 07              ldi 7 
  3578:1a                 eq? 
  3579:30 0032            bnt code_35ae 
  357c:78               push1 
  357d:39 78            pushi 78 // $78 isEmpty
  357f:45 05 02         callb procedure_0005 2 //  

  3582:30 0008            bnt code_358d 
  3585:5a 0002 01d3       lea 2 1d3 
  358a:32 001c            jmp code_35a9 

        code_358d
  358d:78               push1 
  358e:38 008f          pushi 8f // $8f port
  3591:45 05 02         callb procedure_0005 2 //  

  3594:30 0008            bnt code_359f 
  3597:5a 0002 01cd       lea 2 1cd 
  359c:32 000a            jmp code_35a9 

        code_359f
  359f:35 01              ldi 1 
  35a1:30 0005            bnt code_35a9 
  35a4:5a 0002 01c4       lea 2 1c4 

        code_35a9
  35a9:65 1a             aTop register 
  35ab:32 004d            jmp code_35fb 

        code_35ae
  35ae:3c                 dup 
  35af:35 08              ldi 8 
  35b1:1a                 eq? 
  35b2:30 000e            bnt code_35c3 
  35b5:5a 0002 01d9       lea 2 1d9 
  35ba:65 1a             aTop register 
  35bc:35 03              ldi 3 
  35be:65 0a             aTop state 
  35c0:32 0038            jmp code_35fb 

        code_35c3
  35c3:3c                 dup 
  35c4:35 0a              ldi a 
  35c6:1a                 eq? 
  35c7:30 000e            bnt code_35d8 
  35ca:5a 0002 01e0       lea 2 1e0 
  35cf:65 1a             aTop register 
  35d1:35 03              ldi 3 
  35d3:65 0a             aTop state 
  35d5:32 0023            jmp code_35fb 

        code_35d8
  35d8:78               push1 
  35d9:39 05            pushi 5 // $5 view
  35db:45 05 02         callb procedure_0005 2 //  

  35de:30 000f            bnt code_35f0 
  35e1:38 008e          pushi 8e // $8e setScript
  35e4:78               push1 
  35e5:72 3752          lofsa $3752 // spillBeans
  35e8:36                push 
  35e9:63 08             pToa client 
  35eb:4a 06             send 6 

  35ed:32 000b            jmp code_35fb 

        code_35f0
  35f0:5a 0002 01e8       lea 2 1e8 
  35f5:65 1a             aTop register 
  35f7:35 03              ldi 3 
  35f9:65 0a             aTop state 

        code_35fb
  35fb:3a                toss 

        code_35fc
  35fc:35 01              ldi 1 
  35fe:65 10             aTop cycles 
  3600:32 0095            jmp code_3698 

        code_3603
  3603:3c                 dup 
  3604:35 01              ldi 1 
  3606:1a                 eq? 
  3607:30 001c            bnt code_3626 
  360a:39 05            pushi 5 // $5 view
  360c:5a 0002 01bd       lea 2 1bd 
  3611:36                push 
  3612:5a 0002 01fd       lea 2 1fd 
  3617:36                push 
  3618:38 03e7          pushi 3e7 // $3e7 sel_999
  361b:7c            pushSelf 
  361c:76               push0 
  361d:46 0353 0000 0a  calle 353 procedure_0000 a //  

  3623:32 0072            jmp code_3698 

        code_3626
  3626:3c                 dup 
  3627:35 02              ldi 2 
  3629:1a                 eq? 
  362a:30 0017            bnt code_3644 
  362d:39 04            pushi 4 // $4 x
  362f:67 1a             pTos register 
  3631:5a 0002 01fd       lea 2 1fd 
  3636:36                push 
  3637:38 03e7          pushi 3e7 // $3e7 sel_999
  363a:7c            pushSelf 
  363b:46 0353 0000 08  calle 353 procedure_0000 8 //  

  3641:32 0054            jmp code_3698 

        code_3644
  3644:3c                 dup 
  3645:35 03              ldi 3 
  3647:1a                 eq? 
  3648:30 000d            bnt code_3658 
  364b:39 6c            pushi 6c // $6c dispose
  364d:76               push0 
  364e:54 04             self 4 

  3650:76               push0 
  3651:40 cb91 00        call proc_01e6 0 

  3655:32 0040            jmp code_3698 

        code_3658
  3658:3c                 dup 
  3659:35 04              ldi 4 
  365b:1a                 eq? 
  365c:30 001d            bnt code_367c 
  365f:67 0a             pTos state 
  3661:35 02              ldi 2 
  3663:04                 sub 
  3664:65 0a             aTop state 
  3666:39 05            pushi 5 // $5 view
  3668:78               push1 
  3669:67 1a             pTos register 
  366b:5a 0002 01fd       lea 2 1fd 
  3670:36                push 
  3671:76               push0 
  3672:7c            pushSelf 
  3673:46 0353 0000 0a  calle 353 procedure_0000 a //  

  3679:32 001c            jmp code_3698 

        code_367c
  367c:3c                 dup 
  367d:35 05              ldi 5 
  367f:1a                 eq? 
  3680:30 0015            bnt code_3698 
  3683:67 0a             pTos state 
  3685:35 03              ldi 3 
  3687:04                 sub 
  3688:65 0a             aTop state 
  368a:39 04            pushi 4 // $4 x
  368c:67 1a             pTos register 
  368e:39 16            pushi 16 // $16 brRight
  3690:76               push0 
  3691:7c            pushSelf 
  3692:46 0353 0000 08  calle 353 procedure_0000 8 //  


        code_3698
  3698:3a                toss 
  3699:48                 ret 
    )

)

// 374c
(instance spillBeans of TScript
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
        notKilled $1
    )
    (method (changeState) // method_36d6
  36d6:3f 1e             link 1e // (var $1e)
  36d8:87 01              lap param1 
  36da:65 0a             aTop state 
  36dc:36                push 
  36dd:3c                 dup 
  36de:35 00              ldi 0 
  36e0:1a                 eq? 
  36e1:30 001c            bnt code_3700 
  36e4:39 05            pushi 5 // $5 view
  36e6:5a 0002 01ec       lea 2 1ec 
  36eb:36                push 
  36ec:5a 0002 01fd       lea 2 1fd 
  36f1:36                push 
  36f2:38 03e7          pushi 3e7 // $3e7 sel_999
  36f5:7c            pushSelf 
  36f6:76               push0 
  36f7:46 0353 0000 0a  calle 353 procedure_0000 a //  

  36fd:32 0044            jmp code_3744 

        code_3700
  3700:3c                 dup 
  3701:35 01              ldi 1 
  3703:1a                 eq? 
  3704:30 002c            bnt code_3733 
  3707:39 f6            pushi f6 // $f6 nonBumps
  3709:81 8c              lag  
  370b:02                 add 
  370c:36                push 
  370d:35 01              ldi 1 
  370f:b2 01f2           sali local498 
  3712:39 04            pushi 4 // $4 x
  3714:5a 0002 01f2       lea 2 1f2 
  3719:36                push 
  371a:5a 0002 01fd       lea 2 1fd 
  371f:36                push 
  3720:38 03e7          pushi 3e7 // $3e7 sel_999
  3723:7c            pushSelf 
  3724:46 0353 0000 08  calle 353 procedure_0000 8 //  

  372a:78               push1 
  372b:39 33            pushi 33 // $33 b-di
  372d:45 06 02         callb procedure_0006 2 //  

  3730:32 0011            jmp code_3744 

        code_3733
  3733:3c                 dup 
  3734:35 02              ldi 2 
  3736:1a                 eq? 
  3737:30 000a            bnt code_3744 
  373a:39 6c            pushi 6c // $6c dispose
  373c:76               push0 
  373d:54 04             self 4 

  373f:76               push0 
  3740:40 caa2 00        call proc_01e6 0 


        code_3744
  3744:3a                toss 
  3745:48                 ret 
    )

)

// 3784
(instance rustleSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $279
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 37ba
(instance joinSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $d4
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 37f0
(instance letterSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $d6
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 386a
(instance willows of Feature
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $8
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $8
    )
    (method (doVerb) // method_3824
  3824:8f 01              lsp param1 
  3826:35 03              ldi 3 
  3828:1a                 eq? 
  3829:30 002b            bnt code_3857 
  382c:38 008a          pushi 8a // $8a script
  382f:76               push0 
  3830:72 164e          lofsa $164e // marian
  3833:4a 04             send 4 

  3835:36                push 
  3836:72 12a6          lofsa $12a6 // waitToDie
  3839:1a                 eq? 
  383a:30 000d            bnt code_384a 
  383d:7a               push2 
  383e:38 04ba          pushi 4ba // $4ba sel_1210
  3841:39 0b            pushi b // $b nsBottom
  3843:47 0d 04 04      calle d procedure_0004 4 //  

  3847:32 0018            jmp code_3862 

        code_384a
  384a:7a               push2 
  384b:38 04ba          pushi 4ba // $4ba sel_1210
  384e:39 0a            pushi a // $a nsLeft
  3850:47 0d 04 04      calle d procedure_0004 4 //  

  3854:32 000b            jmp code_3862 

        code_3857
  3857:38 010c          pushi 10c // $10c doVerb
  385a:7a               push2 
  385b:8f 01              lsp param1 
  385d:8f 02              lsp param2 
  385f:57 2c 08         super Feature 8 


        code_3862
  3862:48                 ret 
  3863:00                bnot 
    )

)

// 38ee
(instance ferns of Feature
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $10
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $9
    )
    (method (doVerb) // method_38a8
  38a8:8f 01              lsp param1 
  38aa:35 03              ldi 3 
  38ac:1a                 eq? 
  38ad:30 002b            bnt code_38db 
  38b0:38 008a          pushi 8a // $8a script
  38b3:76               push0 
  38b4:72 164e          lofsa $164e // marian
  38b7:4a 04             send 4 

  38b9:36                push 
  38ba:72 12a6          lofsa $12a6 // waitToDie
  38bd:1a                 eq? 
  38be:30 000d            bnt code_38ce 
  38c1:7a               push2 
  38c2:38 04ba          pushi 4ba // $4ba sel_1210
  38c5:39 0d            pushi d // $d lsTop
  38c7:47 0d 04 04      calle d procedure_0004 4 //  

  38cb:32 0018            jmp code_38e6 

        code_38ce
  38ce:7a               push2 
  38cf:38 04ba          pushi 4ba // $4ba sel_1210
  38d2:39 0c            pushi c // $c nsRight
  38d4:47 0d 04 04      calle d procedure_0004 4 //  

  38d8:32 000b            jmp code_38e6 

        code_38db
  38db:38 010c          pushi 10c // $10c doVerb
  38de:7a               push2 
  38df:8f 01              lsp param1 
  38e1:8f 02              lsp param2 
  38e3:57 2c 08         super Feature 8 


        code_38e6
  38e6:48                 ret 
  38e7:00                bnot 
    )

)



(procedure proc_01e6
  01e6:76               push0 
  01e7:45 04 00         callb procedure_0004 0 //  

  01ea:83 0c              lal local12 
  01ec:30 000f            bnt code_01fe 
  01ef:38 00c9          pushi c9 // $c9 disable
  01f2:78               push1 
  01f3:76               push0 
  01f4:38 00c9          pushi c9 // $c9 disable
  01f7:78               push1 
  01f8:39 05            pushi 5 // $5 view
  01fa:81 45              lag  
  01fc:4a 0c             send c 


        code_01fe
  01fe:38 008a          pushi 8a // $8a script
  0201:76               push0 
  0202:72 164e          lofsa $164e // marian
  0205:4a 04             send 4 

  0207:36                push 
  0208:72 12a6          lofsa $12a6 // waitToDie
  020b:1a                 eq? 
  020c:30 0013            bnt code_0222 
  020f:38 00c9          pushi c9 // $c9 disable
  0212:78               push1 
  0213:39 04            pushi 4 // $4 x
  0215:38 00c9          pushi c9 // $c9 disable
  0218:78               push1 
  0219:39 05            pushi 5 // $5 view
  021b:81 45              lag  
  021d:4a 0c             send c 

  021f:32 0018            jmp code_023a 

        code_0222
  0222:89 7e              lsg  
  0224:35 00              ldi 0 
  0226:1a                 eq? 
  0227:30 0010            bnt code_023a 
  022a:82 01ae            lal local430 
  022d:30 000a            bnt code_023a 
  0230:38 00c9          pushi c9 // $c9 disable
  0233:78               push1 
  0234:39 04            pushi 4 // $4 x
  0236:81 45              lag  
  0238:4a 06             send 6 


        code_023a
  023a:48                 ret 
)

(procedure proc_30ea
  30ea:39 03            pushi 3 // $3 y
  30ec:72 39f3          lofsa $39f3 // 
  30ef:36                push 
  30f0:39 6c            pushi 6c // $6c dispose
  30f2:8a 01a8            lsl local424 
  30f5:43 1b 06         callk Display 6 

  30f8:7a               push2 
  30f9:5a 0002 01a9       lea 2 1a9 
  30fe:36                push 
  30ff:8f 01              lsp param1 
  3101:43 44 04         callk StrCat 4 

  3104:39 09            pushi 9 // $9 nsTop
  3106:5a 0002 01a9       lea 2 1a9 
  310b:36                push 
  310c:39 64            pushi 64 // $64 moveDone
  310e:39 73            pushi 73 // $73 add
  3110:39 23            pushi 23 // $23 window
  3112:39 66            pushi 66 // $66 flags
  3114:89 bb              lsg  
  3116:39 67            pushi 67 // $67 quitGame
  3118:89 ba              lsg  
  311a:39 6b            pushi 6b // $6b init
  311c:43 1b 12         callk Display 12 

  311f:a2 01a8            sal local424 
  3122:48                 ret 
)

